// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v0.0.0-dev
// - protoc              v3.17.3
// source: lorawan-stack/api/deviceclaimingserver.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	pflag "github.com/spf13/pflag"
	types "go.thethings.network/lorawan-stack/v3/pkg/types"
)

// AddSelectFlagsForClaimEndDeviceRequest adds flags to select fields in ClaimEndDeviceRequest.
func AddSelectFlagsForClaimEndDeviceRequest(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("source-device.authenticated-identifiers", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("source-device.authenticated-identifiers", prefix), true)))
	// NOTE: authenticated_identifiers (ClaimEndDeviceRequest_AuthenticatedIdentifiers) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("source-device.qr-code", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("source-device.qr-code", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("target-application-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("target-application-ids", prefix), true)))
	AddSelectFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("target-application-ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("target-device-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("target-device-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("target-network-server-address", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("target-network-server-address", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("target-network-server-kek-label", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("target-network-server-kek-label", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("target-application-server-address", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("target-application-server-address", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("target-application-server-kek-label", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("target-application-server-kek-label", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("target-application-server-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("target-application-server-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("target-net-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("target-net-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("invalidate-authentication-code", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("invalidate-authentication-code", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forClaimEndDeviceRequest message from select flags.
func PathsFromSelectFlagsForClaimEndDeviceRequest(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("source_device.authenticated_identifiers", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("source_device.authenticated_identifiers", prefix))
	}
	// NOTE: authenticated_identifiers (ClaimEndDeviceRequest_AuthenticatedIdentifiers) does not seem to have select flags.
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("source_device.qr_code", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("source_device.qr_code", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("target_application_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("target_application_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("target_application_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("target_device_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("target_device_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("target_network_server_address", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("target_network_server_address", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("target_network_server_kek_label", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("target_network_server_kek_label", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("target_application_server_address", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("target_application_server_address", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("target_application_server_kek_label", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("target_application_server_kek_label", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("target_application_server_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("target_application_server_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("target_net_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("target_net_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("invalidate_authentication_code", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("invalidate_authentication_code", prefix))
	}
	return paths, nil
}

// AddSetFlagsForClaimEndDeviceRequest adds flags to select fields in ClaimEndDeviceRequest.
func AddSetFlagsForClaimEndDeviceRequest(flags *pflag.FlagSet, prefix string) {
	// FIXME: Skipping AuthenticatedIdentifiers because it does not seem to implement AddSetFlags.
	flags.AddFlag(flagsplugin.NewBytesFlag(flagsplugin.Prefix("source-device.qr-code", prefix), ""))
	AddSetFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("target-application-ids", prefix))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("target-device-id", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("target-network-server-address", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("target-network-server-kek-label", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("target-application-server-address", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("target-application-server-kek-label", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("target-application-server-id", prefix), ""))
	flags.AddFlag(flagsplugin.NewBytesFlag(flagsplugin.Prefix("target-net-id", prefix), ""))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("invalidate-authentication-code", prefix), ""))
}

// SetFromFlags sets the ClaimEndDeviceRequest message from flags.
func (m *ClaimEndDeviceRequest) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	// FIXME: Skipping AuthenticatedIdentifiers because it does not seem to implement AddSetFlags.
	if val, selected, err := flagsplugin.GetBytes(flags, flagsplugin.Prefix("source_device.qr_code", prefix)); err != nil {
		return nil, err
	} else if selected {
		ov := &ClaimEndDeviceRequest_QrCode{}
		ov.QrCode = val
		paths = append(paths, flagsplugin.Prefix("source_device.qr_code", prefix))
		m.SourceDevice = ov
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("target_application_ids", prefix)); selected {
		m.TargetApplicationIds = &ApplicationIdentifiers{}
		if setPaths, err := m.TargetApplicationIds.SetFromFlags(flags, flagsplugin.Prefix("target_application_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("target_device_id", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.TargetDeviceId = val
		paths = append(paths, flagsplugin.Prefix("target_device_id", prefix))
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("target_network_server_address", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.TargetNetworkServerAddress = val
		paths = append(paths, flagsplugin.Prefix("target_network_server_address", prefix))
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("target_network_server_kek_label", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.TargetNetworkServerKekLabel = val
		paths = append(paths, flagsplugin.Prefix("target_network_server_kek_label", prefix))
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("target_application_server_address", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.TargetApplicationServerAddress = val
		paths = append(paths, flagsplugin.Prefix("target_application_server_address", prefix))
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("target_application_server_kek_label", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.TargetApplicationServerKekLabel = val
		paths = append(paths, flagsplugin.Prefix("target_application_server_kek_label", prefix))
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("target_application_server_id", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.TargetApplicationServerId = val
		paths = append(paths, flagsplugin.Prefix("target_application_server_id", prefix))
	}
	if val, selected, err := types.GetNetID(flags, flagsplugin.Prefix("target_net_id", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.TargetNetId = &val
		paths = append(paths, flagsplugin.Prefix("target_net_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("invalidate_authentication_code", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.InvalidateAuthenticationCode = val
		paths = append(paths, flagsplugin.Prefix("invalidate_authentication_code", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForAuthorizeApplicationRequest adds flags to select fields in AuthorizeApplicationRequest.
func AddSelectFlagsForAuthorizeApplicationRequest(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("application-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("application-ids", prefix), true)))
	AddSelectFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("application-ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("api-key", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("api-key", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forAuthorizeApplicationRequest message from select flags.
func PathsFromSelectFlagsForAuthorizeApplicationRequest(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("application_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("application_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("application_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("api_key", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("api_key", prefix))
	}
	return paths, nil
}

// AddSetFlagsForAuthorizeApplicationRequest adds flags to select fields in AuthorizeApplicationRequest.
func AddSetFlagsForAuthorizeApplicationRequest(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("application-ids", prefix))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("api-key", prefix), ""))
}

// SetFromFlags sets the AuthorizeApplicationRequest message from flags.
func (m *AuthorizeApplicationRequest) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("application_ids", prefix)); selected {
		m.ApplicationIds = &ApplicationIdentifiers{}
		if setPaths, err := m.ApplicationIds.SetFromFlags(flags, flagsplugin.Prefix("application_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("api_key", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.ApiKey = val
		paths = append(paths, flagsplugin.Prefix("api_key", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForClaimGatewayRequest adds flags to select fields in ClaimGatewayRequest.
func AddSelectFlagsForClaimGatewayRequest(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("source-gateway.authenticated-identifiers", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("source-gateway.authenticated-identifiers", prefix), true)))
	// NOTE: authenticated_identifiers (ClaimGatewayRequest_AuthenticatedIdentifiers) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("source-gateway.qr-code", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("source-gateway.qr-code", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("collaborator", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("collaborator", prefix), true)))
	AddSelectFlagsForOrganizationOrUserIdentifiers(flags, flagsplugin.Prefix("collaborator", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("target-gateway-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("target-gateway-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("target-gateway-server-address", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("target-gateway-server-address", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("cups-redirection", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("cups-redirection", prefix), true)))
	// NOTE: cups_redirection (CUPSRedirection) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("target-frequency-plan-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("target-frequency-plan-id", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forClaimGatewayRequest message from select flags.
func PathsFromSelectFlagsForClaimGatewayRequest(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("source_gateway.authenticated_identifiers", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("source_gateway.authenticated_identifiers", prefix))
	}
	// NOTE: authenticated_identifiers (ClaimGatewayRequest_AuthenticatedIdentifiers) does not seem to have select flags.
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("source_gateway.qr_code", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("source_gateway.qr_code", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("collaborator", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("collaborator", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForOrganizationOrUserIdentifiers(flags, flagsplugin.Prefix("collaborator", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("target_gateway_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("target_gateway_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("target_gateway_server_address", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("target_gateway_server_address", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("cups_redirection", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("cups_redirection", prefix))
	}
	// NOTE: cups_redirection (CUPSRedirection) does not seem to have select flags.
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("target_frequency_plan_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("target_frequency_plan_id", prefix))
	}
	return paths, nil
}

// AddSetFlagsForClaimGatewayRequest adds flags to select fields in ClaimGatewayRequest.
func AddSetFlagsForClaimGatewayRequest(flags *pflag.FlagSet, prefix string) {
	// FIXME: Skipping AuthenticatedIdentifiers because it does not seem to implement AddSetFlags.
	flags.AddFlag(flagsplugin.NewBytesFlag(flagsplugin.Prefix("source-gateway.qr-code", prefix), ""))
	AddSetFlagsForOrganizationOrUserIdentifiers(flags, flagsplugin.Prefix("collaborator", prefix))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("target-gateway-id", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("target-gateway-server-address", prefix), ""))
	// FIXME: Skipping CupsRedirection because it does not seem to implement AddSetFlags.
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("target-frequency-plan-id", prefix), ""))
}

// SetFromFlags sets the ClaimGatewayRequest message from flags.
func (m *ClaimGatewayRequest) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	// FIXME: Skipping AuthenticatedIdentifiers because it does not seem to implement AddSetFlags.
	if val, selected, err := flagsplugin.GetBytes(flags, flagsplugin.Prefix("source_gateway.qr_code", prefix)); err != nil {
		return nil, err
	} else if selected {
		ov := &ClaimGatewayRequest_QrCode{}
		ov.QrCode = val
		paths = append(paths, flagsplugin.Prefix("source_gateway.qr_code", prefix))
		m.SourceGateway = ov
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("collaborator", prefix)); selected {
		m.Collaborator = &OrganizationOrUserIdentifiers{}
		if setPaths, err := m.Collaborator.SetFromFlags(flags, flagsplugin.Prefix("collaborator", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("target_gateway_id", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.TargetGatewayId = val
		paths = append(paths, flagsplugin.Prefix("target_gateway_id", prefix))
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("target_gateway_server_address", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.TargetGatewayServerAddress = val
		paths = append(paths, flagsplugin.Prefix("target_gateway_server_address", prefix))
	}
	// FIXME: Skipping CupsRedirection because it does not seem to implement AddSetFlags.
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("target_frequency_plan_id", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.TargetFrequencyPlanId = val
		paths = append(paths, flagsplugin.Prefix("target_frequency_plan_id", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForAuthorizeGatewayRequest adds flags to select fields in AuthorizeGatewayRequest.
func AddSelectFlagsForAuthorizeGatewayRequest(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("gateway-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("gateway-ids", prefix), true)))
	AddSelectFlagsForGatewayIdentifiers(flags, flagsplugin.Prefix("gateway-ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("api-key", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("api-key", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forAuthorizeGatewayRequest message from select flags.
func PathsFromSelectFlagsForAuthorizeGatewayRequest(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("gateway_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("gateway_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForGatewayIdentifiers(flags, flagsplugin.Prefix("gateway_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("api_key", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("api_key", prefix))
	}
	return paths, nil
}

// AddSetFlagsForAuthorizeGatewayRequest adds flags to select fields in AuthorizeGatewayRequest.
func AddSetFlagsForAuthorizeGatewayRequest(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForGatewayIdentifiers(flags, flagsplugin.Prefix("gateway-ids", prefix))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("api-key", prefix), ""))
}

// SetFromFlags sets the AuthorizeGatewayRequest message from flags.
func (m *AuthorizeGatewayRequest) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("gateway_ids", prefix)); selected {
		m.GatewayIds = &GatewayIdentifiers{}
		if setPaths, err := m.GatewayIds.SetFromFlags(flags, flagsplugin.Prefix("gateway_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("api_key", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.ApiKey = val
		paths = append(paths, flagsplugin.Prefix("api_key", prefix))
	}
	return paths, nil
}
