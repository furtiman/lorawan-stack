// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v0.0.0-dev
// - protoc              v3.17.3
// source: lorawan-stack/api/applicationserver_pubsub.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	gogo "github.com/TheThingsIndustries/protoc-gen-go-flags/gogo"
	pflag "github.com/spf13/pflag"
)

// AddSelectFlagsForApplicationPubSubIdentifiers adds flags to select fields in ApplicationPubSubIdentifiers.
func AddSelectFlagsForApplicationPubSubIdentifiers(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("application-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("application-ids", prefix), true)))
	AddSelectFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("application-ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("pub-sub-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("pub-sub-id", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationPubSubIdentifiers message from select flags.
func PathsFromSelectFlagsForApplicationPubSubIdentifiers(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	applicationIds, applicationIdsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("application-ids", prefix))
	if err != nil {
		return paths, err
	}
	if applicationIdsSelect && applicationIds {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("application-ids", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("application-ids", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	pubSubId, pubSubIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("pub-sub-id", prefix))
	if err != nil {
		return paths, err
	}
	if pubSubIdSelect && pubSubId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("pub-sub-id", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForApplicationPubSubIdentifiers adds flags to select fields in ApplicationPubSubIdentifiers.
func AddSetFlagsForApplicationPubSubIdentifiers(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("application-ids", prefix))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("pub-sub-id", prefix), ""))
}

// SetFromFlags sets the ApplicationPubSubIdentifiers message from flags.
func (m *ApplicationPubSubIdentifiers) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	applicationIdsSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("application-ids", prefix))
	if applicationIdsSet {
		m.ApplicationIds = &ApplicationIdentifiers{}
		if setPaths, err := m.ApplicationIds.SetFromFlags(flags, flagsplugin.Prefix("application-ids", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	pubSubId, pubSubIdSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("pub-sub-id", prefix))
	if err != nil {
		return paths, err
	}
	if pubSubIdSet {
		m.PubSubId = pubSubId
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("pub-sub-id", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationPubSub_NATSProvider adds flags to select fields in ApplicationPubSub_NATSProvider.
func AddSelectFlagsForApplicationPubSub_NATSProvider(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("server-url", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("server-url", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationPubSub_NATSProvider message from select flags.
func PathsFromSelectFlagsForApplicationPubSub_NATSProvider(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	serverUrl, serverUrlSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("server-url", prefix))
	if err != nil {
		return paths, err
	}
	if serverUrlSelect && serverUrl {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("server-url", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForApplicationPubSub_NATSProvider adds flags to select fields in ApplicationPubSub_NATSProvider.
func AddSetFlagsForApplicationPubSub_NATSProvider(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("server-url", prefix), ""))
}

// SetFromFlags sets the ApplicationPubSub_NATSProvider message from flags.
func (m *ApplicationPubSub_NATSProvider) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	serverUrl, serverUrlSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("server-url", prefix))
	if err != nil {
		return paths, err
	}
	if serverUrlSet {
		m.ServerUrl = serverUrl
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("server-url", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationPubSub_MQTTProvider adds flags to select fields in ApplicationPubSub_MQTTProvider.
func AddSelectFlagsForApplicationPubSub_MQTTProvider(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("server-url", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("server-url", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("client-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("client-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("username", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("username", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("password", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("password", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("subscribe-qos", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("subscribe-qos", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("publish-qos", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("publish-qos", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("use-tls", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("use-tls", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("tls-ca", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("tls-ca", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("tls-client-cert", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("tls-client-cert", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("tls-client-key", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("tls-client-key", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("headers", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("headers", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationPubSub_MQTTProvider message from select flags.
func PathsFromSelectFlagsForApplicationPubSub_MQTTProvider(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	serverUrl, serverUrlSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("server-url", prefix))
	if err != nil {
		return paths, err
	}
	if serverUrlSelect && serverUrl {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("server-url", prefix)))
	}
	clientId, clientIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("client-id", prefix))
	if err != nil {
		return paths, err
	}
	if clientIdSelect && clientId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("client-id", prefix)))
	}
	username, usernameSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("username", prefix))
	if err != nil {
		return paths, err
	}
	if usernameSelect && username {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("username", prefix)))
	}
	password, passwordSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("password", prefix))
	if err != nil {
		return paths, err
	}
	if passwordSelect && password {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("password", prefix)))
	}
	subscribeQos, subscribeQosSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("subscribe-qos", prefix))
	if err != nil {
		return paths, err
	}
	if subscribeQosSelect && subscribeQos {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("subscribe-qos", prefix)))
	}
	publishQos, publishQosSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("publish-qos", prefix))
	if err != nil {
		return paths, err
	}
	if publishQosSelect && publishQos {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("publish-qos", prefix)))
	}
	useTls, useTlsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("use-tls", prefix))
	if err != nil {
		return paths, err
	}
	if useTlsSelect && useTls {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("use-tls", prefix)))
	}
	tlsCa, tlsCaSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("tls-ca", prefix))
	if err != nil {
		return paths, err
	}
	if tlsCaSelect && tlsCa {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("tls-ca", prefix)))
	}
	tlsClientCert, tlsClientCertSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("tls-client-cert", prefix))
	if err != nil {
		return paths, err
	}
	if tlsClientCertSelect && tlsClientCert {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("tls-client-cert", prefix)))
	}
	tlsClientKey, tlsClientKeySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("tls-client-key", prefix))
	if err != nil {
		return paths, err
	}
	if tlsClientKeySelect && tlsClientKey {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("tls-client-key", prefix)))
	}
	headers, headersSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("headers", prefix))
	if err != nil {
		return paths, err
	}
	if headersSelect && headers {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("headers", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForApplicationPubSub_MQTTProvider adds flags to select fields in ApplicationPubSub_MQTTProvider.
func AddSetFlagsForApplicationPubSub_MQTTProvider(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("server-url", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("client-id", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("username", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("password", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("subscribe-qos", prefix), flagsplugin.EnumValueDesc(ApplicationPubSub_MQTTProvider_QoS_value)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("publish-qos", prefix), flagsplugin.EnumValueDesc(ApplicationPubSub_MQTTProvider_QoS_value)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("use-tls", prefix), ""))
	flags.AddFlag(flagsplugin.NewBytesFlag(flagsplugin.Prefix("tls-ca", prefix), ""))
	flags.AddFlag(flagsplugin.NewBytesFlag(flagsplugin.Prefix("tls-client-cert", prefix), ""))
	flags.AddFlag(flagsplugin.NewBytesFlag(flagsplugin.Prefix("tls-client-key", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringStringMapFlag(flagsplugin.Prefix("headers", prefix), ""))
}

// SetFromFlags sets the ApplicationPubSub_MQTTProvider message from flags.
func (m *ApplicationPubSub_MQTTProvider) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	serverUrl, serverUrlSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("server-url", prefix))
	if err != nil {
		return paths, err
	}
	if serverUrlSet {
		m.ServerUrl = serverUrl
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("server-url", prefix)))
	}
	clientId, clientIdSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("client-id", prefix))
	if err != nil {
		return paths, err
	}
	if clientIdSet {
		m.ClientId = clientId
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("client-id", prefix)))
	}
	username, usernameSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("username", prefix))
	if err != nil {
		return paths, err
	}
	if usernameSet {
		m.Username = username
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("username", prefix)))
	}
	password, passwordSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("password", prefix))
	if err != nil {
		return paths, err
	}
	if passwordSet {
		m.Password = password
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("password", prefix)))
	}
	subscribeQos, subscribeQosSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("subscribe-qos", prefix))
	if err != nil {
		return paths, err
	}
	if subscribeQosSet {
		enumValue, err := flagsplugin.SetEnumString(subscribeQos, ApplicationPubSub_MQTTProvider_QoS_value)
		if err != nil {
			return paths, err
		}
		m.SubscribeQos = ApplicationPubSub_MQTTProvider_QoS(enumValue)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("subscribe-qos", prefix)))
	}
	publishQos, publishQosSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("publish-qos", prefix))
	if err != nil {
		return paths, err
	}
	if publishQosSet {
		enumValue, err := flagsplugin.SetEnumString(publishQos, ApplicationPubSub_MQTTProvider_QoS_value)
		if err != nil {
			return paths, err
		}
		m.PublishQos = ApplicationPubSub_MQTTProvider_QoS(enumValue)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("publish-qos", prefix)))
	}
	useTls, useTlsSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("use-tls", prefix))
	if err != nil {
		return paths, err
	}
	if useTlsSet {
		m.UseTls = useTls
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("use-tls", prefix)))
	}
	tlsCa, tlsCaSet, err := flagsplugin.GetBytes(flags, flagsplugin.Prefix("tls-ca", prefix))
	if err != nil {
		return paths, err
	}
	if tlsCaSet {
		m.TlsCa = tlsCa
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("tls-ca", prefix)))
	}
	tlsClientCert, tlsClientCertSet, err := flagsplugin.GetBytes(flags, flagsplugin.Prefix("tls-client-cert", prefix))
	if err != nil {
		return paths, err
	}
	if tlsClientCertSet {
		m.TlsClientCert = tlsClientCert
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("tls-client-cert", prefix)))
	}
	tlsClientKey, tlsClientKeySet, err := flagsplugin.GetBytes(flags, flagsplugin.Prefix("tls-client-key", prefix))
	if err != nil {
		return paths, err
	}
	if tlsClientKeySet {
		m.TlsClientKey = tlsClientKey
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("tls-client-key", prefix)))
	}
	headers, headersSet, err := flagsplugin.GetStringStringMap(flags, flagsplugin.Prefix("headers", prefix))
	if err != nil {
		return paths, err
	}
	if headersSet {
		m.Headers = headers
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("headers", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationPubSub_AWSIoTProvider_AccessKey adds flags to select fields in ApplicationPubSub_AWSIoTProvider_AccessKey.
func AddSelectFlagsForApplicationPubSub_AWSIoTProvider_AccessKey(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("access-key-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("access-key-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("secret-access-key", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("secret-access-key", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("session-token", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("session-token", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationPubSub_AWSIoTProvider_AccessKey message from select flags.
func PathsFromSelectFlagsForApplicationPubSub_AWSIoTProvider_AccessKey(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	accessKeyId, accessKeyIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("access-key-id", prefix))
	if err != nil {
		return paths, err
	}
	if accessKeyIdSelect && accessKeyId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("access-key-id", prefix)))
	}
	secretAccessKey, secretAccessKeySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("secret-access-key", prefix))
	if err != nil {
		return paths, err
	}
	if secretAccessKeySelect && secretAccessKey {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("secret-access-key", prefix)))
	}
	sessionToken, sessionTokenSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("session-token", prefix))
	if err != nil {
		return paths, err
	}
	if sessionTokenSelect && sessionToken {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("session-token", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForApplicationPubSub_AWSIoTProvider_AccessKey adds flags to select fields in ApplicationPubSub_AWSIoTProvider_AccessKey.
func AddSetFlagsForApplicationPubSub_AWSIoTProvider_AccessKey(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("access-key-id", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("secret-access-key", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("session-token", prefix), ""))
}

// SetFromFlags sets the ApplicationPubSub_AWSIoTProvider_AccessKey message from flags.
func (m *ApplicationPubSub_AWSIoTProvider_AccessKey) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	accessKeyId, accessKeyIdSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("access-key-id", prefix))
	if err != nil {
		return paths, err
	}
	if accessKeyIdSet {
		m.AccessKeyId = accessKeyId
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("access-key-id", prefix)))
	}
	secretAccessKey, secretAccessKeySet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("secret-access-key", prefix))
	if err != nil {
		return paths, err
	}
	if secretAccessKeySet {
		m.SecretAccessKey = secretAccessKey
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("secret-access-key", prefix)))
	}
	sessionToken, sessionTokenSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("session-token", prefix))
	if err != nil {
		return paths, err
	}
	if sessionTokenSet {
		m.SessionToken = sessionToken
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("session-token", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationPubSub_AWSIoTProvider_AssumeRole adds flags to select fields in ApplicationPubSub_AWSIoTProvider_AssumeRole.
func AddSelectFlagsForApplicationPubSub_AWSIoTProvider_AssumeRole(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("arn", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("arn", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("external-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("external-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("session-duration", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("session-duration", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationPubSub_AWSIoTProvider_AssumeRole message from select flags.
func PathsFromSelectFlagsForApplicationPubSub_AWSIoTProvider_AssumeRole(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	arn, arnSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("arn", prefix))
	if err != nil {
		return paths, err
	}
	if arnSelect && arn {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("arn", prefix)))
	}
	externalId, externalIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("external-id", prefix))
	if err != nil {
		return paths, err
	}
	if externalIdSelect && externalId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("external-id", prefix)))
	}
	sessionDuration, sessionDurationSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("session-duration", prefix))
	if err != nil {
		return paths, err
	}
	if sessionDurationSelect && sessionDuration {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("session-duration", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForApplicationPubSub_AWSIoTProvider_AssumeRole adds flags to select fields in ApplicationPubSub_AWSIoTProvider_AssumeRole.
func AddSetFlagsForApplicationPubSub_AWSIoTProvider_AssumeRole(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("arn", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("external-id", prefix), ""))
	flags.AddFlag(flagsplugin.NewDurationFlag(flagsplugin.Prefix("session-duration", prefix), ""))
}

// SetFromFlags sets the ApplicationPubSub_AWSIoTProvider_AssumeRole message from flags.
func (m *ApplicationPubSub_AWSIoTProvider_AssumeRole) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	arn, arnSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("arn", prefix))
	if err != nil {
		return paths, err
	}
	if arnSet {
		m.Arn = arn
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("arn", prefix)))
	}
	externalId, externalIdSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("external-id", prefix))
	if err != nil {
		return paths, err
	}
	if externalIdSet {
		m.ExternalId = externalId
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("external-id", prefix)))
	}
	sessionDuration, sessionDurationSet, err := flagsplugin.GetDuration(flags, flagsplugin.Prefix("session-duration", prefix))
	if err != nil {
		return paths, err
	}
	if sessionDurationSet {
		m.SessionDuration = gogo.SetDuration(sessionDuration)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("session-duration", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationPubSub_AWSIoTProvider_DefaultIntegration adds flags to select fields in ApplicationPubSub_AWSIoTProvider_DefaultIntegration.
func AddSelectFlagsForApplicationPubSub_AWSIoTProvider_DefaultIntegration(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("stack-name", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("stack-name", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationPubSub_AWSIoTProvider_DefaultIntegration message from select flags.
func PathsFromSelectFlagsForApplicationPubSub_AWSIoTProvider_DefaultIntegration(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	stackName, stackNameSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("stack-name", prefix))
	if err != nil {
		return paths, err
	}
	if stackNameSelect && stackName {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("stack-name", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForApplicationPubSub_AWSIoTProvider_DefaultIntegration adds flags to select fields in ApplicationPubSub_AWSIoTProvider_DefaultIntegration.
func AddSetFlagsForApplicationPubSub_AWSIoTProvider_DefaultIntegration(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("stack-name", prefix), ""))
}

// SetFromFlags sets the ApplicationPubSub_AWSIoTProvider_DefaultIntegration message from flags.
func (m *ApplicationPubSub_AWSIoTProvider_DefaultIntegration) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	stackName, stackNameSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("stack-name", prefix))
	if err != nil {
		return paths, err
	}
	if stackNameSet {
		m.StackName = stackName
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("stack-name", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationPubSub_AWSIoTProvider adds flags to select fields in ApplicationPubSub_AWSIoTProvider.
func AddSelectFlagsForApplicationPubSub_AWSIoTProvider(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("region", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("region", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("access-key", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("access-key", prefix), true)))
	AddSelectFlagsForApplicationPubSub_AWSIoTProvider_AccessKey(flags, flagsplugin.Prefix("access-key", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("assume-role", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("assume-role", prefix), true)))
	AddSelectFlagsForApplicationPubSub_AWSIoTProvider_AssumeRole(flags, flagsplugin.Prefix("assume-role", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("endpoint-address", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("endpoint-address", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("deployment.default", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("deployment.default", prefix), true)))
	AddSelectFlagsForApplicationPubSub_AWSIoTProvider_DefaultIntegration(flags, flagsplugin.Prefix("deployment.default", prefix))
}

// SelectFromFlags outputs the fieldmask paths forApplicationPubSub_AWSIoTProvider message from select flags.
func PathsFromSelectFlagsForApplicationPubSub_AWSIoTProvider(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	region, regionSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("region", prefix))
	if err != nil {
		return paths, err
	}
	if regionSelect && region {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("region", prefix)))
	}
	accessKey, accessKeySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("access-key", prefix))
	if err != nil {
		return paths, err
	}
	if accessKeySelect && accessKey {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("access-key", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_AWSIoTProvider_AccessKey(flags, flagsplugin.Prefix("access-key", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	assumeRole, assumeRoleSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("assume-role", prefix))
	if err != nil {
		return paths, err
	}
	if assumeRoleSelect && assumeRole {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("assume-role", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_AWSIoTProvider_AssumeRole(flags, flagsplugin.Prefix("assume-role", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	endpointAddress, endpointAddressSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("endpoint-address", prefix))
	if err != nil {
		return paths, err
	}
	if endpointAddressSelect && endpointAddress {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("endpoint-address", prefix)))
	}
	defaultVal, defaultValSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("deployment.default", prefix))
	if err != nil {
		return paths, err
	}
	if defaultValSelect && defaultVal {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("deployment.default", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_AWSIoTProvider_DefaultIntegration(flags, flagsplugin.Prefix("deployment.default", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSetFlagsForApplicationPubSub_AWSIoTProvider adds flags to select fields in ApplicationPubSub_AWSIoTProvider.
func AddSetFlagsForApplicationPubSub_AWSIoTProvider(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("region", prefix), ""))
	AddSetFlagsForApplicationPubSub_AWSIoTProvider_AccessKey(flags, flagsplugin.Prefix("access-key", prefix))
	AddSetFlagsForApplicationPubSub_AWSIoTProvider_AssumeRole(flags, flagsplugin.Prefix("assume-role", prefix))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("endpoint-address", prefix), ""))
	AddSetFlagsForApplicationPubSub_AWSIoTProvider_DefaultIntegration(flags, flagsplugin.Prefix("deployment.default", prefix))
}

// SetFromFlags sets the ApplicationPubSub_AWSIoTProvider message from flags.
func (m *ApplicationPubSub_AWSIoTProvider) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	region, regionSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("region", prefix))
	if err != nil {
		return paths, err
	}
	if regionSet {
		m.Region = region
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("region", prefix)))
	}
	accessKeySet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("access-key", prefix))
	if accessKeySet {
		m.AccessKey = &ApplicationPubSub_AWSIoTProvider_AccessKey{}
		if setPaths, err := m.AccessKey.SetFromFlags(flags, flagsplugin.Prefix("access-key", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	assumeRoleSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("assume-role", prefix))
	if assumeRoleSet {
		m.AssumeRole = &ApplicationPubSub_AWSIoTProvider_AssumeRole{}
		if setPaths, err := m.AssumeRole.SetFromFlags(flags, flagsplugin.Prefix("assume-role", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	endpointAddress, endpointAddressSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("endpoint-address", prefix))
	if err != nil {
		return paths, err
	}
	if endpointAddressSet {
		m.EndpointAddress = endpointAddress
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("endpoint-address", prefix)))
	}
	defaultValSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("deployment.default", prefix))
	if defaultValSet {
		ov := &ApplicationPubSub_AWSIoTProvider_Default{}
		ov.Default = &ApplicationPubSub_AWSIoTProvider_DefaultIntegration{}
		if setPaths, err := ov.Default.SetFromFlags(flags, flagsplugin.Prefix("deployment.default", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
		m.Deployment = ov
	}
	return paths, nil
}

// AddSelectFlagsForApplicationPubSub_Message adds flags to select fields in ApplicationPubSub_Message.
func AddSelectFlagsForApplicationPubSub_Message(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("topic", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("topic", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationPubSub_Message message from select flags.
func PathsFromSelectFlagsForApplicationPubSub_Message(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	topic, topicSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("topic", prefix))
	if err != nil {
		return paths, err
	}
	if topicSelect && topic {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("topic", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForApplicationPubSub_Message adds flags to select fields in ApplicationPubSub_Message.
func AddSetFlagsForApplicationPubSub_Message(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("topic", prefix), ""))
}

// SetFromFlags sets the ApplicationPubSub_Message message from flags.
func (m *ApplicationPubSub_Message) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	topic, topicSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("topic", prefix))
	if err != nil {
		return paths, err
	}
	if topicSet {
		m.Topic = topic
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("topic", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationPubSub adds flags to select fields in ApplicationPubSub.
func AddSelectFlagsForApplicationPubSub(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ids", prefix), true)))
	AddSelectFlagsForApplicationPubSubIdentifiers(flags, flagsplugin.Prefix("ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("created-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("created-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("updated-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("updated-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("format", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("format", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("provider.nats", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("provider.nats", prefix), true)))
	AddSelectFlagsForApplicationPubSub_NATSProvider(flags, flagsplugin.Prefix("provider.nats", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("provider.mqtt", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("provider.mqtt", prefix), true)))
	AddSelectFlagsForApplicationPubSub_MQTTProvider(flags, flagsplugin.Prefix("provider.mqtt", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("provider.aws-iot", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("provider.aws-iot", prefix), true)))
	AddSelectFlagsForApplicationPubSub_AWSIoTProvider(flags, flagsplugin.Prefix("provider.aws-iot", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("base-topic", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("base-topic", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-push", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-push", prefix), true)))
	AddSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-push", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-replace", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-replace", prefix), true)))
	AddSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-replace", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("uplink-message", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("uplink-message", prefix), true)))
	AddSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("uplink-message", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("join-accept", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("join-accept", prefix), true)))
	AddSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("join-accept", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-ack", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-ack", prefix), true)))
	AddSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-ack", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-nack", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-nack", prefix), true)))
	AddSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-nack", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-sent", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-sent", prefix), true)))
	AddSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-sent", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-failed", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-failed", prefix), true)))
	AddSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-failed", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-queued", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-queued", prefix), true)))
	AddSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-queued", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-queue-invalidated", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-queue-invalidated", prefix), true)))
	AddSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-queue-invalidated", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("location-solved", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("location-solved", prefix), true)))
	AddSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("location-solved", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("service-data", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("service-data", prefix), true)))
	AddSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("service-data", prefix))
}

// SelectFromFlags outputs the fieldmask paths forApplicationPubSub message from select flags.
func PathsFromSelectFlagsForApplicationPubSub(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	ids, idsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ids", prefix))
	if err != nil {
		return paths, err
	}
	if idsSelect && ids {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("ids", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSubIdentifiers(flags, flagsplugin.Prefix("ids", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	createdAt, createdAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("created-at", prefix))
	if err != nil {
		return paths, err
	}
	if createdAtSelect && createdAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("created-at", prefix)))
	}
	updatedAt, updatedAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("updated-at", prefix))
	if err != nil {
		return paths, err
	}
	if updatedAtSelect && updatedAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("updated-at", prefix)))
	}
	format, formatSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("format", prefix))
	if err != nil {
		return paths, err
	}
	if formatSelect && format {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("format", prefix)))
	}
	nats, natsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("provider.nats", prefix))
	if err != nil {
		return paths, err
	}
	if natsSelect && nats {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("provider.nats", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_NATSProvider(flags, flagsplugin.Prefix("provider.nats", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	mqtt, mqttSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("provider.mqtt", prefix))
	if err != nil {
		return paths, err
	}
	if mqttSelect && mqtt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("provider.mqtt", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_MQTTProvider(flags, flagsplugin.Prefix("provider.mqtt", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	awsIot, awsIotSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("provider.aws-iot", prefix))
	if err != nil {
		return paths, err
	}
	if awsIotSelect && awsIot {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("provider.aws-iot", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_AWSIoTProvider(flags, flagsplugin.Prefix("provider.aws-iot", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	baseTopic, baseTopicSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("base-topic", prefix))
	if err != nil {
		return paths, err
	}
	if baseTopicSelect && baseTopic {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("base-topic", prefix)))
	}
	downlinkPush, downlinkPushSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink-push", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkPushSelect && downlinkPush {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("downlink-push", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-push", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	downlinkReplace, downlinkReplaceSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink-replace", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkReplaceSelect && downlinkReplace {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("downlink-replace", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-replace", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	uplinkMessage, uplinkMessageSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("uplink-message", prefix))
	if err != nil {
		return paths, err
	}
	if uplinkMessageSelect && uplinkMessage {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("uplink-message", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("uplink-message", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	joinAccept, joinAcceptSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("join-accept", prefix))
	if err != nil {
		return paths, err
	}
	if joinAcceptSelect && joinAccept {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("join-accept", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("join-accept", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	downlinkAck, downlinkAckSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink-ack", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkAckSelect && downlinkAck {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("downlink-ack", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-ack", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	downlinkNack, downlinkNackSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink-nack", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkNackSelect && downlinkNack {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("downlink-nack", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-nack", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	downlinkSent, downlinkSentSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink-sent", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkSentSelect && downlinkSent {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("downlink-sent", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-sent", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	downlinkFailed, downlinkFailedSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink-failed", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkFailedSelect && downlinkFailed {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("downlink-failed", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-failed", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	downlinkQueued, downlinkQueuedSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink-queued", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkQueuedSelect && downlinkQueued {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("downlink-queued", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-queued", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	downlinkQueueInvalidated, downlinkQueueInvalidatedSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink-queue-invalidated", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkQueueInvalidatedSelect && downlinkQueueInvalidated {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("downlink-queue-invalidated", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-queue-invalidated", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	locationSolved, locationSolvedSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("location-solved", prefix))
	if err != nil {
		return paths, err
	}
	if locationSolvedSelect && locationSolved {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("location-solved", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("location-solved", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	serviceData, serviceDataSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("service-data", prefix))
	if err != nil {
		return paths, err
	}
	if serviceDataSelect && serviceData {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("service-data", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("service-data", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSetFlagsForApplicationPubSub adds flags to select fields in ApplicationPubSub.
func AddSetFlagsForApplicationPubSub(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForApplicationPubSubIdentifiers(flags, flagsplugin.Prefix("ids", prefix))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("created-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("updated-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("format", prefix), ""))
	AddSetFlagsForApplicationPubSub_NATSProvider(flags, flagsplugin.Prefix("provider.nats", prefix))
	AddSetFlagsForApplicationPubSub_MQTTProvider(flags, flagsplugin.Prefix("provider.mqtt", prefix))
	AddSetFlagsForApplicationPubSub_AWSIoTProvider(flags, flagsplugin.Prefix("provider.aws-iot", prefix))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("base-topic", prefix), ""))
	AddSetFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-push", prefix))
	AddSetFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-replace", prefix))
	AddSetFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("uplink-message", prefix))
	AddSetFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("join-accept", prefix))
	AddSetFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-ack", prefix))
	AddSetFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-nack", prefix))
	AddSetFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-sent", prefix))
	AddSetFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-failed", prefix))
	AddSetFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-queued", prefix))
	AddSetFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-queue-invalidated", prefix))
	AddSetFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("location-solved", prefix))
	AddSetFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("service-data", prefix))
}

// SetFromFlags sets the ApplicationPubSub message from flags.
func (m *ApplicationPubSub) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	idsSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ids", prefix))
	if idsSet {
		m.Ids = &ApplicationPubSubIdentifiers{}
		if setPaths, err := m.Ids.SetFromFlags(flags, flagsplugin.Prefix("ids", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	createdAt, createdAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("created-at", prefix))
	if err != nil {
		return paths, err
	}
	if createdAtSet {
		m.CreatedAt = gogo.SetTimestamp(createdAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("created-at", prefix)))
	}
	updatedAt, updatedAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("updated-at", prefix))
	if err != nil {
		return paths, err
	}
	if updatedAtSet {
		m.UpdatedAt = gogo.SetTimestamp(updatedAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("updated-at", prefix)))
	}
	format, formatSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("format", prefix))
	if err != nil {
		return paths, err
	}
	if formatSet {
		m.Format = format
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("format", prefix)))
	}
	natsSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("provider.nats", prefix))
	if natsSet {
		ov := &ApplicationPubSub_Nats{}
		ov.Nats = &ApplicationPubSub_NATSProvider{}
		if setPaths, err := ov.Nats.SetFromFlags(flags, flagsplugin.Prefix("provider.nats", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
		m.Provider = ov
	}
	mqttSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("provider.mqtt", prefix))
	if mqttSet {
		ov := &ApplicationPubSub_Mqtt{}
		ov.Mqtt = &ApplicationPubSub_MQTTProvider{}
		if setPaths, err := ov.Mqtt.SetFromFlags(flags, flagsplugin.Prefix("provider.mqtt", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
		m.Provider = ov
	}
	awsIotSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("provider.aws-iot", prefix))
	if awsIotSet {
		ov := &ApplicationPubSub_AwsIot{}
		ov.AwsIot = &ApplicationPubSub_AWSIoTProvider{}
		if setPaths, err := ov.AwsIot.SetFromFlags(flags, flagsplugin.Prefix("provider.aws-iot", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
		m.Provider = ov
	}
	baseTopic, baseTopicSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("base-topic", prefix))
	if err != nil {
		return paths, err
	}
	if baseTopicSet {
		m.BaseTopic = baseTopic
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("base-topic", prefix)))
	}
	downlinkPushSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink-push", prefix))
	if downlinkPushSet {
		m.DownlinkPush = &ApplicationPubSub_Message{}
		if setPaths, err := m.DownlinkPush.SetFromFlags(flags, flagsplugin.Prefix("downlink-push", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	downlinkReplaceSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink-replace", prefix))
	if downlinkReplaceSet {
		m.DownlinkReplace = &ApplicationPubSub_Message{}
		if setPaths, err := m.DownlinkReplace.SetFromFlags(flags, flagsplugin.Prefix("downlink-replace", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	uplinkMessageSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("uplink-message", prefix))
	if uplinkMessageSet {
		m.UplinkMessage = &ApplicationPubSub_Message{}
		if setPaths, err := m.UplinkMessage.SetFromFlags(flags, flagsplugin.Prefix("uplink-message", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	joinAcceptSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("join-accept", prefix))
	if joinAcceptSet {
		m.JoinAccept = &ApplicationPubSub_Message{}
		if setPaths, err := m.JoinAccept.SetFromFlags(flags, flagsplugin.Prefix("join-accept", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	downlinkAckSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink-ack", prefix))
	if downlinkAckSet {
		m.DownlinkAck = &ApplicationPubSub_Message{}
		if setPaths, err := m.DownlinkAck.SetFromFlags(flags, flagsplugin.Prefix("downlink-ack", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	downlinkNackSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink-nack", prefix))
	if downlinkNackSet {
		m.DownlinkNack = &ApplicationPubSub_Message{}
		if setPaths, err := m.DownlinkNack.SetFromFlags(flags, flagsplugin.Prefix("downlink-nack", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	downlinkSentSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink-sent", prefix))
	if downlinkSentSet {
		m.DownlinkSent = &ApplicationPubSub_Message{}
		if setPaths, err := m.DownlinkSent.SetFromFlags(flags, flagsplugin.Prefix("downlink-sent", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	downlinkFailedSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink-failed", prefix))
	if downlinkFailedSet {
		m.DownlinkFailed = &ApplicationPubSub_Message{}
		if setPaths, err := m.DownlinkFailed.SetFromFlags(flags, flagsplugin.Prefix("downlink-failed", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	downlinkQueuedSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink-queued", prefix))
	if downlinkQueuedSet {
		m.DownlinkQueued = &ApplicationPubSub_Message{}
		if setPaths, err := m.DownlinkQueued.SetFromFlags(flags, flagsplugin.Prefix("downlink-queued", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	downlinkQueueInvalidatedSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink-queue-invalidated", prefix))
	if downlinkQueueInvalidatedSet {
		m.DownlinkQueueInvalidated = &ApplicationPubSub_Message{}
		if setPaths, err := m.DownlinkQueueInvalidated.SetFromFlags(flags, flagsplugin.Prefix("downlink-queue-invalidated", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	locationSolvedSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("location-solved", prefix))
	if locationSolvedSet {
		m.LocationSolved = &ApplicationPubSub_Message{}
		if setPaths, err := m.LocationSolved.SetFromFlags(flags, flagsplugin.Prefix("location-solved", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	serviceDataSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("service-data", prefix))
	if serviceDataSet {
		m.ServiceData = &ApplicationPubSub_Message{}
		if setPaths, err := m.ServiceData.SetFromFlags(flags, flagsplugin.Prefix("service-data", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	return paths, nil
}

// AddSetFlagsForListApplicationPubSubsRequest adds flags to select fields in ListApplicationPubSubsRequest.
func AddSetFlagsForListApplicationPubSubsRequest(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("application-ids", prefix))
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("field-mask", prefix), ""))
}

// SetFromFlags sets the ListApplicationPubSubsRequest message from flags.
func (m *ListApplicationPubSubsRequest) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	applicationIdsSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("application-ids", prefix))
	if applicationIdsSet {
		m.ApplicationIds = &ApplicationIdentifiers{}
		if setPaths, err := m.ApplicationIds.SetFromFlags(flags, flagsplugin.Prefix("application-ids", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	fieldMask, fieldMaskSet, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("field-mask", prefix))
	if err != nil {
		return paths, err
	}
	if fieldMaskSet {
		m.FieldMask = gogo.SetFieldMask(fieldMask)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("field-mask", prefix)))
	}
	return paths, nil
}
