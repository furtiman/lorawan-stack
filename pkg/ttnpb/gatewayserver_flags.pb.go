// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v0.0.0-dev
// - protoc              v3.17.3
// source: lorawan-stack/api/gatewayserver.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	gogo "github.com/TheThingsIndustries/protoc-gen-go-flags/gogo"
	pflag "github.com/spf13/pflag"
)

// AddSelectFlagsForGatewayUp adds flags to select fields in GatewayUp.
func AddSelectFlagsForGatewayUp(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("uplink-messages", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("uplink-messages", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("gateway-status", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("gateway-status", prefix), true)))
	AddSelectFlagsForGatewayStatus(flags, flagsplugin.Prefix("gateway-status", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("tx-acknowledgment", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("tx-acknowledgment", prefix), true)))
	AddSelectFlagsForTxAcknowledgment(flags, flagsplugin.Prefix("tx-acknowledgment", prefix))
}

// SelectFromFlags outputs the fieldmask paths forGatewayUp message from select flags.
func PathsFromSelectFlagsForGatewayUp(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("uplink_messages", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("uplink_messages", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("gateway_status", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("gateway_status", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForGatewayStatus(flags, flagsplugin.Prefix("gateway_status", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("tx_acknowledgment", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("tx_acknowledgment", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForTxAcknowledgment(flags, flagsplugin.Prefix("tx_acknowledgment", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSetFlagsForGatewayUp adds flags to select fields in GatewayUp.
func AddSetFlagsForGatewayUp(flags *pflag.FlagSet, prefix string) {
	// FIXME: Skipping UplinkMessages because repeated messages are currently not supported.
	AddSetFlagsForGatewayStatus(flags, flagsplugin.Prefix("gateway-status", prefix))
	AddSetFlagsForTxAcknowledgment(flags, flagsplugin.Prefix("tx-acknowledgment", prefix))
}

// SetFromFlags sets the GatewayUp message from flags.
func (m *GatewayUp) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	// FIXME: Skipping UplinkMessages because it does not seem to implement AddSetFlags.
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("gateway_status", prefix)); selected {
		m.GatewayStatus = &GatewayStatus{}
		if setPaths, err := m.GatewayStatus.SetFromFlags(flags, flagsplugin.Prefix("gateway_status", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("tx_acknowledgment", prefix)); selected {
		m.TxAcknowledgment = &TxAcknowledgment{}
		if setPaths, err := m.TxAcknowledgment.SetFromFlags(flags, flagsplugin.Prefix("tx_acknowledgment", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	return paths, nil
}

// AddSelectFlagsForGatewayDown adds flags to select fields in GatewayDown.
func AddSelectFlagsForGatewayDown(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-message", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-message", prefix), true)))
	AddSelectFlagsForDownlinkMessage(flags, flagsplugin.Prefix("downlink-message", prefix))
}

// SelectFromFlags outputs the fieldmask paths forGatewayDown message from select flags.
func PathsFromSelectFlagsForGatewayDown(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink_message", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("downlink_message", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForDownlinkMessage(flags, flagsplugin.Prefix("downlink_message", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSetFlagsForGatewayDown adds flags to select fields in GatewayDown.
func AddSetFlagsForGatewayDown(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForDownlinkMessage(flags, flagsplugin.Prefix("downlink-message", prefix))
}

// SetFromFlags sets the GatewayDown message from flags.
func (m *GatewayDown) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink_message", prefix)); selected {
		m.DownlinkMessage = &DownlinkMessage{}
		if setPaths, err := m.DownlinkMessage.SetFromFlags(flags, flagsplugin.Prefix("downlink_message", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	return paths, nil
}

// AddSelectFlagsForScheduleDownlinkResponse adds flags to select fields in ScheduleDownlinkResponse.
func AddSelectFlagsForScheduleDownlinkResponse(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("delay", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("delay", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-path", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-path", prefix), true)))
	AddSelectFlagsForDownlinkPath(flags, flagsplugin.Prefix("downlink-path", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx1", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx1", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx2", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx2", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forScheduleDownlinkResponse message from select flags.
func PathsFromSelectFlagsForScheduleDownlinkResponse(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("delay", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("delay", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink_path", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("downlink_path", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForDownlinkPath(flags, flagsplugin.Prefix("downlink_path", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx1", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rx1", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx2", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rx2", prefix))
	}
	return paths, nil
}

// AddSetFlagsForScheduleDownlinkResponse adds flags to select fields in ScheduleDownlinkResponse.
func AddSetFlagsForScheduleDownlinkResponse(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewDurationFlag(flagsplugin.Prefix("delay", prefix), ""))
	AddSetFlagsForDownlinkPath(flags, flagsplugin.Prefix("downlink-path", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx1", prefix), ""))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx2", prefix), ""))
}

// SetFromFlags sets the ScheduleDownlinkResponse message from flags.
func (m *ScheduleDownlinkResponse) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetDuration(flags, flagsplugin.Prefix("delay", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.Delay = gogo.SetDuration(val)
		paths = append(paths, flagsplugin.Prefix("delay", prefix))
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink_path", prefix)); selected {
		m.DownlinkPath = &DownlinkPath{}
		if setPaths, err := m.DownlinkPath.SetFromFlags(flags, flagsplugin.Prefix("downlink_path", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx1", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.Rx1 = val
		paths = append(paths, flagsplugin.Prefix("rx1", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx2", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.Rx2 = val
		paths = append(paths, flagsplugin.Prefix("rx2", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForScheduleDownlinkErrorDetails adds flags to select fields in ScheduleDownlinkErrorDetails.
func AddSelectFlagsForScheduleDownlinkErrorDetails(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("path-errors", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("path-errors", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forScheduleDownlinkErrorDetails message from select flags.
func PathsFromSelectFlagsForScheduleDownlinkErrorDetails(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("path_errors", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("path_errors", prefix))
	}
	return paths, nil
}
