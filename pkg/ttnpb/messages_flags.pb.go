// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v0.0.0-dev
// - protoc              v3.17.3
// source: lorawan-stack/api/messages.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	gogo "github.com/TheThingsIndustries/protoc-gen-go-flags/gogo"
	pflag "github.com/spf13/pflag"
)

// AddSelectFlagsForApplicationUplink adds flags to select fields in ApplicationUplink.
func AddSelectFlagsForApplicationUplink(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("session-key-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("session-key-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("f-port", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("f-port", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("f-cnt", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("f-cnt", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("frm-payload", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("frm-payload", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("decoded-payload", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("decoded-payload", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("decoded-payload-warnings", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("decoded-payload-warnings", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx-metadata", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx-metadata", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("settings", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("settings", prefix), true)))
	AddSelectFlagsForTxSettings(flags, flagsplugin.Prefix("settings", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("received-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("received-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("app-s-key", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("app-s-key", prefix), true)))
	AddSelectFlagsForKeyEnvelope(flags, flagsplugin.Prefix("app-s-key", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-a-f-cnt-down", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-a-f-cnt-down", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("confirmed", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("confirmed", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("consumed-airtime", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("consumed-airtime", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("locations", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("locations", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("version-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("version-ids", prefix), true)))
	AddSelectFlagsForEndDeviceVersionIdentifiers(flags, flagsplugin.Prefix("version-ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("network-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("network-ids", prefix), true)))
	AddSelectFlagsForNetworkIdentifiers(flags, flagsplugin.Prefix("network-ids", prefix))
}

// SelectFromFlags outputs the fieldmask paths forApplicationUplink message from select flags.
func PathsFromSelectFlagsForApplicationUplink(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	sessionKeyId, sessionKeyIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("session-key-id", prefix))
	if err != nil {
		return paths, err
	}
	if sessionKeyIdSelect && sessionKeyId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("session-key-id", prefix)))
	}
	fPort, fPortSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("f-port", prefix))
	if err != nil {
		return paths, err
	}
	if fPortSelect && fPort {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("f-port", prefix)))
	}
	fCnt, fCntSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("f-cnt", prefix))
	if err != nil {
		return paths, err
	}
	if fCntSelect && fCnt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("f-cnt", prefix)))
	}
	frmPayload, frmPayloadSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("frm-payload", prefix))
	if err != nil {
		return paths, err
	}
	if frmPayloadSelect && frmPayload {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("frm-payload", prefix)))
	}
	decodedPayload, decodedPayloadSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("decoded-payload", prefix))
	if err != nil {
		return paths, err
	}
	if decodedPayloadSelect && decodedPayload {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("decoded-payload", prefix)))
	}
	decodedPayloadWarnings, decodedPayloadWarningsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("decoded-payload-warnings", prefix))
	if err != nil {
		return paths, err
	}
	if decodedPayloadWarningsSelect && decodedPayloadWarnings {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("decoded-payload-warnings", prefix)))
	}
	rxMetadata, rxMetadataSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx-metadata", prefix))
	if err != nil {
		return paths, err
	}
	if rxMetadataSelect && rxMetadata {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rx-metadata", prefix)))
	}
	settings, settingsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("settings", prefix))
	if err != nil {
		return paths, err
	}
	if settingsSelect && settings {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("settings", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForTxSettings(flags, flagsplugin.Prefix("settings", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	receivedAt, receivedAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("received-at", prefix))
	if err != nil {
		return paths, err
	}
	if receivedAtSelect && receivedAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("received-at", prefix)))
	}
	appSKey, appSKeySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("app-s-key", prefix))
	if err != nil {
		return paths, err
	}
	if appSKeySelect && appSKey {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("app-s-key", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForKeyEnvelope(flags, flagsplugin.Prefix("app-s-key", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	lastAFCntDown, lastAFCntDownSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last-a-f-cnt-down", prefix))
	if err != nil {
		return paths, err
	}
	if lastAFCntDownSelect && lastAFCntDown {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("last-a-f-cnt-down", prefix)))
	}
	confirmed, confirmedSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("confirmed", prefix))
	if err != nil {
		return paths, err
	}
	if confirmedSelect && confirmed {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("confirmed", prefix)))
	}
	consumedAirtime, consumedAirtimeSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("consumed-airtime", prefix))
	if err != nil {
		return paths, err
	}
	if consumedAirtimeSelect && consumedAirtime {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("consumed-airtime", prefix)))
	}
	locations, locationsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("locations", prefix))
	if err != nil {
		return paths, err
	}
	if locationsSelect && locations {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("locations", prefix)))
	}
	versionIds, versionIdsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("version-ids", prefix))
	if err != nil {
		return paths, err
	}
	if versionIdsSelect && versionIds {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("version-ids", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForEndDeviceVersionIdentifiers(flags, flagsplugin.Prefix("version-ids", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	networkIds, networkIdsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("network-ids", prefix))
	if err != nil {
		return paths, err
	}
	if networkIdsSelect && networkIds {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("network-ids", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForNetworkIdentifiers(flags, flagsplugin.Prefix("network-ids", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSelectFlagsForApplicationLocation adds flags to select fields in ApplicationLocation.
func AddSelectFlagsForApplicationLocation(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("service", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("service", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("location", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("location", prefix), true)))
	AddSelectFlagsForLocation(flags, flagsplugin.Prefix("location", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("attributes", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("attributes", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationLocation message from select flags.
func PathsFromSelectFlagsForApplicationLocation(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	service, serviceSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("service", prefix))
	if err != nil {
		return paths, err
	}
	if serviceSelect && service {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("service", prefix)))
	}
	location, locationSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("location", prefix))
	if err != nil {
		return paths, err
	}
	if locationSelect && location {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("location", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForLocation(flags, flagsplugin.Prefix("location", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	attributes, attributesSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("attributes", prefix))
	if err != nil {
		return paths, err
	}
	if attributesSelect && attributes {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("attributes", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationJoinAccept adds flags to select fields in ApplicationJoinAccept.
func AddSelectFlagsForApplicationJoinAccept(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("session-key-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("session-key-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("app-s-key", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("app-s-key", prefix), true)))
	AddSelectFlagsForKeyEnvelope(flags, flagsplugin.Prefix("app-s-key", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("invalidated-downlinks", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("invalidated-downlinks", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("pending-session", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("pending-session", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("received-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("received-at", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationJoinAccept message from select flags.
func PathsFromSelectFlagsForApplicationJoinAccept(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	sessionKeyId, sessionKeyIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("session-key-id", prefix))
	if err != nil {
		return paths, err
	}
	if sessionKeyIdSelect && sessionKeyId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("session-key-id", prefix)))
	}
	appSKey, appSKeySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("app-s-key", prefix))
	if err != nil {
		return paths, err
	}
	if appSKeySelect && appSKey {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("app-s-key", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForKeyEnvelope(flags, flagsplugin.Prefix("app-s-key", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	invalidatedDownlinks, invalidatedDownlinksSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("invalidated-downlinks", prefix))
	if err != nil {
		return paths, err
	}
	if invalidatedDownlinksSelect && invalidatedDownlinks {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("invalidated-downlinks", prefix)))
	}
	pendingSession, pendingSessionSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("pending-session", prefix))
	if err != nil {
		return paths, err
	}
	if pendingSessionSelect && pendingSession {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("pending-session", prefix)))
	}
	receivedAt, receivedAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("received-at", prefix))
	if err != nil {
		return paths, err
	}
	if receivedAtSelect && receivedAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("received-at", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationDownlink_ClassBC adds flags to select fields in ApplicationDownlink_ClassBC.
func AddSelectFlagsForApplicationDownlink_ClassBC(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("gateways", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("gateways", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("absolute-time", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("absolute-time", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationDownlink_ClassBC message from select flags.
func PathsFromSelectFlagsForApplicationDownlink_ClassBC(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	gateways, gatewaysSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("gateways", prefix))
	if err != nil {
		return paths, err
	}
	if gatewaysSelect && gateways {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("gateways", prefix)))
	}
	absoluteTime, absoluteTimeSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("absolute-time", prefix))
	if err != nil {
		return paths, err
	}
	if absoluteTimeSelect && absoluteTime {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("absolute-time", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForApplicationDownlink_ClassBC adds flags to select fields in ApplicationDownlink_ClassBC.
func AddSetFlagsForApplicationDownlink_ClassBC(flags *pflag.FlagSet, prefix string) {
	// FIXME: Skipping Gateways because repeated messages are currently not supported.
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("absolute-time", prefix), ""))
}

// SetFromFlags sets the ApplicationDownlink_ClassBC message from flags.
func (m *ApplicationDownlink_ClassBC) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	// FIXME: Skipping Gateways because it does not seem to implement AddSetFlags.
	absoluteTime, absoluteTimeSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("absolute-time", prefix))
	if err != nil {
		return paths, err
	}
	if absoluteTimeSet {
		m.AbsoluteTime = gogo.SetTimestamp(absoluteTime)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("absolute-time", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationDownlink adds flags to select fields in ApplicationDownlink.
func AddSelectFlagsForApplicationDownlink(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("session-key-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("session-key-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("f-port", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("f-port", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("f-cnt", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("f-cnt", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("frm-payload", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("frm-payload", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("decoded-payload", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("decoded-payload", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("decoded-payload-warnings", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("decoded-payload-warnings", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("confirmed", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("confirmed", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("class-b-c", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("class-b-c", prefix), true)))
	AddSelectFlagsForApplicationDownlink_ClassBC(flags, flagsplugin.Prefix("class-b-c", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("priority", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("priority", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("correlation-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("correlation-ids", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationDownlink message from select flags.
func PathsFromSelectFlagsForApplicationDownlink(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	sessionKeyId, sessionKeyIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("session-key-id", prefix))
	if err != nil {
		return paths, err
	}
	if sessionKeyIdSelect && sessionKeyId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("session-key-id", prefix)))
	}
	fPort, fPortSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("f-port", prefix))
	if err != nil {
		return paths, err
	}
	if fPortSelect && fPort {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("f-port", prefix)))
	}
	fCnt, fCntSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("f-cnt", prefix))
	if err != nil {
		return paths, err
	}
	if fCntSelect && fCnt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("f-cnt", prefix)))
	}
	frmPayload, frmPayloadSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("frm-payload", prefix))
	if err != nil {
		return paths, err
	}
	if frmPayloadSelect && frmPayload {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("frm-payload", prefix)))
	}
	decodedPayload, decodedPayloadSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("decoded-payload", prefix))
	if err != nil {
		return paths, err
	}
	if decodedPayloadSelect && decodedPayload {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("decoded-payload", prefix)))
	}
	decodedPayloadWarnings, decodedPayloadWarningsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("decoded-payload-warnings", prefix))
	if err != nil {
		return paths, err
	}
	if decodedPayloadWarningsSelect && decodedPayloadWarnings {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("decoded-payload-warnings", prefix)))
	}
	confirmed, confirmedSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("confirmed", prefix))
	if err != nil {
		return paths, err
	}
	if confirmedSelect && confirmed {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("confirmed", prefix)))
	}
	classBC, classBCSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("class-b-c", prefix))
	if err != nil {
		return paths, err
	}
	if classBCSelect && classBC {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("class-b-c", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationDownlink_ClassBC(flags, flagsplugin.Prefix("class-b-c", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	priority, prioritySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("priority", prefix))
	if err != nil {
		return paths, err
	}
	if prioritySelect && priority {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("priority", prefix)))
	}
	correlationIds, correlationIdsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("correlation-ids", prefix))
	if err != nil {
		return paths, err
	}
	if correlationIdsSelect && correlationIds {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("correlation-ids", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForApplicationDownlink adds flags to select fields in ApplicationDownlink.
func AddSetFlagsForApplicationDownlink(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewHexBytesFlag(flagsplugin.Prefix("session-key-id", prefix), ""))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("f-port", prefix), ""))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("f-cnt", prefix), ""))
	flags.AddFlag(flagsplugin.NewHexBytesFlag(flagsplugin.Prefix("frm-payload", prefix), ""))
	// FIXME: Skipping DecodedPayload because this WKT is currently not supported.
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("decoded-payload-warnings", prefix), ""))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("confirmed", prefix), ""))
	AddSetFlagsForApplicationDownlink_ClassBC(flags, flagsplugin.Prefix("class-b-c", prefix))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("priority", prefix), flagsplugin.EnumValueDesc(TxSchedulePriority_value)))
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("correlation-ids", prefix), ""))
}

// SetFromFlags sets the ApplicationDownlink message from flags.
func (m *ApplicationDownlink) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	sessionKeyId, sessionKeyIdSet, err := flagsplugin.GetBytes(flags, flagsplugin.Prefix("session-key-id", prefix))
	if err != nil {
		return paths, err
	}
	if sessionKeyIdSet {
		m.SessionKeyId = sessionKeyId
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("session-key-id", prefix)))
	}
	fPort, fPortSet, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("f-port", prefix))
	if err != nil {
		return paths, err
	}
	if fPortSet {
		m.FPort = fPort
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("f-port", prefix)))
	}
	fCnt, fCntSet, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("f-cnt", prefix))
	if err != nil {
		return paths, err
	}
	if fCntSet {
		m.FCnt = fCnt
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("f-cnt", prefix)))
	}
	frmPayload, frmPayloadSet, err := flagsplugin.GetBytes(flags, flagsplugin.Prefix("frm-payload", prefix))
	if err != nil {
		return paths, err
	}
	if frmPayloadSet {
		m.FrmPayload = frmPayload
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("frm-payload", prefix)))
	}
	// FIXME: Skipping DecodedPayload because this WKT is not supported.
	decodedPayloadWarnings, decodedPayloadWarningsSet, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("decoded-payload-warnings", prefix))
	if err != nil {
		return paths, err
	}
	if decodedPayloadWarningsSet {
		m.DecodedPayloadWarnings = decodedPayloadWarnings
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("decoded-payload-warnings", prefix)))
	}
	confirmed, confirmedSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("confirmed", prefix))
	if err != nil {
		return paths, err
	}
	if confirmedSet {
		m.Confirmed = confirmed
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("confirmed", prefix)))
	}
	classBCSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("class-b-c", prefix))
	if classBCSet {
		m.ClassBC = &ApplicationDownlink_ClassBC{}
		if setPaths, err := m.ClassBC.SetFromFlags(flags, flagsplugin.Prefix("class-b-c", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	priority, prioritySet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("priority", prefix))
	if err != nil {
		return paths, err
	}
	if prioritySet {
		enumValue, err := flagsplugin.SetEnumString(priority, TxSchedulePriority_value)
		if err != nil {
			return paths, err
		}
		m.Priority = TxSchedulePriority(enumValue)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("priority", prefix)))
	}
	correlationIds, correlationIdsSet, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("correlation-ids", prefix))
	if err != nil {
		return paths, err
	}
	if correlationIdsSet {
		m.CorrelationIds = correlationIds
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("correlation-ids", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationDownlinkFailed adds flags to select fields in ApplicationDownlinkFailed.
func AddSelectFlagsForApplicationDownlinkFailed(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink", prefix), true)))
	AddSelectFlagsForApplicationDownlink(flags, flagsplugin.Prefix("downlink", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("error", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("error", prefix), true)))
	AddSelectFlagsForErrorDetails(flags, flagsplugin.Prefix("error", prefix))
}

// SelectFromFlags outputs the fieldmask paths forApplicationDownlinkFailed message from select flags.
func PathsFromSelectFlagsForApplicationDownlinkFailed(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	downlink, downlinkSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkSelect && downlink {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("downlink", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationDownlink(flags, flagsplugin.Prefix("downlink", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	error, errorSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("error", prefix))
	if err != nil {
		return paths, err
	}
	if errorSelect && error {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("error", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForErrorDetails(flags, flagsplugin.Prefix("error", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSelectFlagsForApplicationInvalidatedDownlinks adds flags to select fields in ApplicationInvalidatedDownlinks.
func AddSelectFlagsForApplicationInvalidatedDownlinks(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlinks", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlinks", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-f-cnt-down", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-f-cnt-down", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("session-key-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("session-key-id", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationInvalidatedDownlinks message from select flags.
func PathsFromSelectFlagsForApplicationInvalidatedDownlinks(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	downlinks, downlinksSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlinks", prefix))
	if err != nil {
		return paths, err
	}
	if downlinksSelect && downlinks {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("downlinks", prefix)))
	}
	lastFCntDown, lastFCntDownSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last-f-cnt-down", prefix))
	if err != nil {
		return paths, err
	}
	if lastFCntDownSelect && lastFCntDown {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("last-f-cnt-down", prefix)))
	}
	sessionKeyId, sessionKeyIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("session-key-id", prefix))
	if err != nil {
		return paths, err
	}
	if sessionKeyIdSelect && sessionKeyId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("session-key-id", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationServiceData adds flags to select fields in ApplicationServiceData.
func AddSelectFlagsForApplicationServiceData(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("service", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("service", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("data", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("data", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationServiceData message from select flags.
func PathsFromSelectFlagsForApplicationServiceData(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	service, serviceSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("service", prefix))
	if err != nil {
		return paths, err
	}
	if serviceSelect && service {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("service", prefix)))
	}
	data, dataSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("data", prefix))
	if err != nil {
		return paths, err
	}
	if dataSelect && data {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("data", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationUp adds flags to select fields in ApplicationUp.
func AddSelectFlagsForApplicationUp(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("end-device-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("end-device-ids", prefix), true)))
	AddSelectFlagsForEndDeviceIdentifiers(flags, flagsplugin.Prefix("end-device-ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("correlation-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("correlation-ids", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("received-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("received-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("up.uplink-message", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("up.uplink-message", prefix), true)))
	AddSelectFlagsForApplicationUplink(flags, flagsplugin.Prefix("up.uplink-message", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("up.join-accept", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("up.join-accept", prefix), true)))
	AddSelectFlagsForApplicationJoinAccept(flags, flagsplugin.Prefix("up.join-accept", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("up.downlink-ack", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("up.downlink-ack", prefix), true)))
	AddSelectFlagsForApplicationDownlink(flags, flagsplugin.Prefix("up.downlink-ack", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("up.downlink-nack", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("up.downlink-nack", prefix), true)))
	AddSelectFlagsForApplicationDownlink(flags, flagsplugin.Prefix("up.downlink-nack", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("up.downlink-sent", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("up.downlink-sent", prefix), true)))
	AddSelectFlagsForApplicationDownlink(flags, flagsplugin.Prefix("up.downlink-sent", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("up.downlink-failed", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("up.downlink-failed", prefix), true)))
	AddSelectFlagsForApplicationDownlinkFailed(flags, flagsplugin.Prefix("up.downlink-failed", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("up.downlink-queued", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("up.downlink-queued", prefix), true)))
	AddSelectFlagsForApplicationDownlink(flags, flagsplugin.Prefix("up.downlink-queued", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("up.downlink-queue-invalidated", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("up.downlink-queue-invalidated", prefix), true)))
	AddSelectFlagsForApplicationInvalidatedDownlinks(flags, flagsplugin.Prefix("up.downlink-queue-invalidated", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("up.location-solved", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("up.location-solved", prefix), true)))
	AddSelectFlagsForApplicationLocation(flags, flagsplugin.Prefix("up.location-solved", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("up.service-data", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("up.service-data", prefix), true)))
	AddSelectFlagsForApplicationServiceData(flags, flagsplugin.Prefix("up.service-data", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("simulated", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("simulated", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationUp message from select flags.
func PathsFromSelectFlagsForApplicationUp(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	endDeviceIds, endDeviceIdsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("end-device-ids", prefix))
	if err != nil {
		return paths, err
	}
	if endDeviceIdsSelect && endDeviceIds {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("end-device-ids", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForEndDeviceIdentifiers(flags, flagsplugin.Prefix("end-device-ids", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	correlationIds, correlationIdsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("correlation-ids", prefix))
	if err != nil {
		return paths, err
	}
	if correlationIdsSelect && correlationIds {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("correlation-ids", prefix)))
	}
	receivedAt, receivedAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("received-at", prefix))
	if err != nil {
		return paths, err
	}
	if receivedAtSelect && receivedAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("received-at", prefix)))
	}
	uplinkMessage, uplinkMessageSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("up.uplink-message", prefix))
	if err != nil {
		return paths, err
	}
	if uplinkMessageSelect && uplinkMessage {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("up.uplink-message", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationUplink(flags, flagsplugin.Prefix("up.uplink-message", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	joinAccept, joinAcceptSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("up.join-accept", prefix))
	if err != nil {
		return paths, err
	}
	if joinAcceptSelect && joinAccept {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("up.join-accept", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationJoinAccept(flags, flagsplugin.Prefix("up.join-accept", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	downlinkAck, downlinkAckSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("up.downlink-ack", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkAckSelect && downlinkAck {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("up.downlink-ack", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationDownlink(flags, flagsplugin.Prefix("up.downlink-ack", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	downlinkNack, downlinkNackSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("up.downlink-nack", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkNackSelect && downlinkNack {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("up.downlink-nack", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationDownlink(flags, flagsplugin.Prefix("up.downlink-nack", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	downlinkSent, downlinkSentSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("up.downlink-sent", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkSentSelect && downlinkSent {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("up.downlink-sent", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationDownlink(flags, flagsplugin.Prefix("up.downlink-sent", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	downlinkFailed, downlinkFailedSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("up.downlink-failed", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkFailedSelect && downlinkFailed {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("up.downlink-failed", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationDownlinkFailed(flags, flagsplugin.Prefix("up.downlink-failed", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	downlinkQueued, downlinkQueuedSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("up.downlink-queued", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkQueuedSelect && downlinkQueued {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("up.downlink-queued", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationDownlink(flags, flagsplugin.Prefix("up.downlink-queued", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	downlinkQueueInvalidated, downlinkQueueInvalidatedSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("up.downlink-queue-invalidated", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkQueueInvalidatedSelect && downlinkQueueInvalidated {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("up.downlink-queue-invalidated", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationInvalidatedDownlinks(flags, flagsplugin.Prefix("up.downlink-queue-invalidated", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	locationSolved, locationSolvedSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("up.location-solved", prefix))
	if err != nil {
		return paths, err
	}
	if locationSolvedSelect && locationSolved {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("up.location-solved", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationLocation(flags, flagsplugin.Prefix("up.location-solved", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	serviceData, serviceDataSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("up.service-data", prefix))
	if err != nil {
		return paths, err
	}
	if serviceDataSelect && serviceData {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("up.service-data", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationServiceData(flags, flagsplugin.Prefix("up.service-data", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	simulated, simulatedSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("simulated", prefix))
	if err != nil {
		return paths, err
	}
	if simulatedSelect && simulated {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("simulated", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForMessagePayloadFormatters adds flags to select fields in MessagePayloadFormatters.
func AddSelectFlagsForMessagePayloadFormatters(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("up-formatter", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("up-formatter", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("up-formatter-parameter", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("up-formatter-parameter", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("down-formatter", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("down-formatter", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("down-formatter-parameter", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("down-formatter-parameter", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forMessagePayloadFormatters message from select flags.
func PathsFromSelectFlagsForMessagePayloadFormatters(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	upFormatter, upFormatterSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("up-formatter", prefix))
	if err != nil {
		return paths, err
	}
	if upFormatterSelect && upFormatter {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("up-formatter", prefix)))
	}
	upFormatterParameter, upFormatterParameterSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("up-formatter-parameter", prefix))
	if err != nil {
		return paths, err
	}
	if upFormatterParameterSelect && upFormatterParameter {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("up-formatter-parameter", prefix)))
	}
	downFormatter, downFormatterSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("down-formatter", prefix))
	if err != nil {
		return paths, err
	}
	if downFormatterSelect && downFormatter {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("down-formatter", prefix)))
	}
	downFormatterParameter, downFormatterParameterSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("down-formatter-parameter", prefix))
	if err != nil {
		return paths, err
	}
	if downFormatterParameterSelect && downFormatterParameter {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("down-formatter-parameter", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForMessagePayloadFormatters adds flags to select fields in MessagePayloadFormatters.
func AddSetFlagsForMessagePayloadFormatters(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("up-formatter", prefix), flagsplugin.EnumValueDesc(PayloadFormatter_value)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("up-formatter-parameter", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("down-formatter", prefix), flagsplugin.EnumValueDesc(PayloadFormatter_value)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("down-formatter-parameter", prefix), ""))
}

// SetFromFlags sets the MessagePayloadFormatters message from flags.
func (m *MessagePayloadFormatters) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	upFormatter, upFormatterSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("up-formatter", prefix))
	if err != nil {
		return paths, err
	}
	if upFormatterSet {
		enumValue, err := flagsplugin.SetEnumString(upFormatter, PayloadFormatter_value)
		if err != nil {
			return paths, err
		}
		m.UpFormatter = PayloadFormatter(enumValue)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("up-formatter", prefix)))
	}
	upFormatterParameter, upFormatterParameterSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("up-formatter-parameter", prefix))
	if err != nil {
		return paths, err
	}
	if upFormatterParameterSet {
		m.UpFormatterParameter = upFormatterParameter
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("up-formatter-parameter", prefix)))
	}
	downFormatter, downFormatterSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("down-formatter", prefix))
	if err != nil {
		return paths, err
	}
	if downFormatterSet {
		enumValue, err := flagsplugin.SetEnumString(downFormatter, PayloadFormatter_value)
		if err != nil {
			return paths, err
		}
		m.DownFormatter = PayloadFormatter(enumValue)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("down-formatter", prefix)))
	}
	downFormatterParameter, downFormatterParameterSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("down-formatter-parameter", prefix))
	if err != nil {
		return paths, err
	}
	if downFormatterParameterSet {
		m.DownFormatterParameter = downFormatterParameter
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("down-formatter-parameter", prefix)))
	}
	return paths, nil
}
