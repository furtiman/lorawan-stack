// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v0.0.0-dev
// - protoc              v3.17.3
// source: lorawan-stack/api/identifiers.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	pflag "github.com/spf13/pflag"
	custom_flags "go.thethings.network/lorawan-stack/v3/cmd/ttn-lw-cli/custom_flags"
)

// AddSelectFlagsForApplicationIdentifiers adds flags to select fields in ApplicationIdentifiers.
func AddSelectFlagsForApplicationIdentifiers(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("application-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("application-id", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationIdentifiers message from select flags.
func PathsFromSelectFlagsForApplicationIdentifiers(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	applicationId, applicationIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("application-id", prefix))
	if err != nil {
		return paths, err
	}
	if applicationIdSelect && applicationId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("application-id", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForApplicationIdentifiers adds flags to select fields in ApplicationIdentifiers.
func AddSetFlagsForApplicationIdentifiers(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("application-id", prefix), ""))
}

// SetFromFlags sets the ApplicationIdentifiers message from flags.
func (m *ApplicationIdentifiers) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	applicationId, applicationIdSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("application-id", prefix))
	if err != nil {
		return paths, err
	}
	if applicationIdSet {
		m.ApplicationId = applicationId
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("application-id", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForClientIdentifiers adds flags to select fields in ClientIdentifiers.
func AddSelectFlagsForClientIdentifiers(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("client-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("client-id", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forClientIdentifiers message from select flags.
func PathsFromSelectFlagsForClientIdentifiers(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	clientId, clientIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("client-id", prefix))
	if err != nil {
		return paths, err
	}
	if clientIdSelect && clientId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("client-id", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForClientIdentifiers adds flags to select fields in ClientIdentifiers.
func AddSetFlagsForClientIdentifiers(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("client-id", prefix), ""))
}

// SetFromFlags sets the ClientIdentifiers message from flags.
func (m *ClientIdentifiers) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	clientId, clientIdSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("client-id", prefix))
	if err != nil {
		return paths, err
	}
	if clientIdSet {
		m.ClientId = clientId
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("client-id", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForEndDeviceIdentifiers adds flags to select fields in EndDeviceIdentifiers.
func AddSelectFlagsForEndDeviceIdentifiers(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("device-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("device-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("application-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("application-ids", prefix), true)))
	AddSelectFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("application-ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("dev-eui", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("dev-eui", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("join-eui", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("join-eui", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("dev-addr", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("dev-addr", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forEndDeviceIdentifiers message from select flags.
func PathsFromSelectFlagsForEndDeviceIdentifiers(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	deviceId, deviceIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("device-id", prefix))
	if err != nil {
		return paths, err
	}
	if deviceIdSelect && deviceId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("device-id", prefix)))
	}
	applicationIds, applicationIdsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("application-ids", prefix))
	if err != nil {
		return paths, err
	}
	if applicationIdsSelect && applicationIds {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("application-ids", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("application-ids", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	devEui, devEuiSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("dev-eui", prefix))
	if err != nil {
		return paths, err
	}
	if devEuiSelect && devEui {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("dev-eui", prefix)))
	}
	joinEui, joinEuiSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("join-eui", prefix))
	if err != nil {
		return paths, err
	}
	if joinEuiSelect && joinEui {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("join-eui", prefix)))
	}
	devAddr, devAddrSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("dev-addr", prefix))
	if err != nil {
		return paths, err
	}
	if devAddrSelect && devAddr {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("dev-addr", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForEndDeviceIdentifiers adds flags to select fields in EndDeviceIdentifiers.
func AddSetFlagsForEndDeviceIdentifiers(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("device-id", prefix), ""))
	AddSetFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("application-ids", prefix))
	flags.AddFlag(custom_flags.New8BytesFlag(flagsplugin.Prefix("dev-eui", prefix), ""))
	flags.AddFlag(custom_flags.New8BytesFlag(flagsplugin.Prefix("join-eui", prefix), ""))
	flags.AddFlag(custom_flags.New4BytesFlag(flagsplugin.Prefix("dev-addr", prefix), ""))
}

// SetFromFlags sets the EndDeviceIdentifiers message from flags.
func (m *EndDeviceIdentifiers) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	deviceId, deviceIdSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("device-id", prefix))
	if err != nil {
		return paths, err
	}
	if deviceIdSet {
		m.DeviceId = deviceId
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("device-id", prefix)))
	}
	applicationIdsSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("application-ids", prefix))
	if applicationIdsSet {
		m.ApplicationIds = &ApplicationIdentifiers{}
		if setPaths, err := m.ApplicationIds.SetFromFlags(flags, flagsplugin.Prefix("application-ids", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	devEui, devEuiSet, err := custom_flags.GetEUI64(flags, flagsplugin.Prefix("dev-eui", prefix))
	if err != nil {
		return paths, err
	}
	if devEuiSet {
		m.DevEui = &devEui
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("dev-eui", prefix)))
	}
	joinEui, joinEuiSet, err := custom_flags.GetEUI64(flags, flagsplugin.Prefix("join-eui", prefix))
	if err != nil {
		return paths, err
	}
	if joinEuiSet {
		m.JoinEui = &joinEui
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("join-eui", prefix)))
	}
	devAddr, devAddrSet, err := custom_flags.GetDevAddr(flags, flagsplugin.Prefix("dev-addr", prefix))
	if err != nil {
		return paths, err
	}
	if devAddrSet {
		m.DevAddr = &devAddr
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("dev-addr", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForGatewayIdentifiers adds flags to select fields in GatewayIdentifiers.
func AddSelectFlagsForGatewayIdentifiers(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("gateway-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("gateway-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("eui", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("eui", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forGatewayIdentifiers message from select flags.
func PathsFromSelectFlagsForGatewayIdentifiers(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	gatewayId, gatewayIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("gateway-id", prefix))
	if err != nil {
		return paths, err
	}
	if gatewayIdSelect && gatewayId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("gateway-id", prefix)))
	}
	eui, euiSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("eui", prefix))
	if err != nil {
		return paths, err
	}
	if euiSelect && eui {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("eui", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForGatewayIdentifiers adds flags to select fields in GatewayIdentifiers.
func AddSetFlagsForGatewayIdentifiers(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("gateway-id", prefix), ""))
	flags.AddFlag(custom_flags.New8BytesFlag(flagsplugin.Prefix("eui", prefix), ""))
}

// SetFromFlags sets the GatewayIdentifiers message from flags.
func (m *GatewayIdentifiers) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	gatewayId, gatewayIdSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("gateway-id", prefix))
	if err != nil {
		return paths, err
	}
	if gatewayIdSet {
		m.GatewayId = gatewayId
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("gateway-id", prefix)))
	}
	eui, euiSet, err := custom_flags.GetEUI64(flags, flagsplugin.Prefix("eui", prefix))
	if err != nil {
		return paths, err
	}
	if euiSet {
		m.Eui = &eui
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("eui", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForOrganizationIdentifiers adds flags to select fields in OrganizationIdentifiers.
func AddSelectFlagsForOrganizationIdentifiers(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("organization-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("organization-id", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forOrganizationIdentifiers message from select flags.
func PathsFromSelectFlagsForOrganizationIdentifiers(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	organizationId, organizationIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("organization-id", prefix))
	if err != nil {
		return paths, err
	}
	if organizationIdSelect && organizationId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("organization-id", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForOrganizationIdentifiers adds flags to select fields in OrganizationIdentifiers.
func AddSetFlagsForOrganizationIdentifiers(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("organization-id", prefix), ""))
}

// SetFromFlags sets the OrganizationIdentifiers message from flags.
func (m *OrganizationIdentifiers) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	organizationId, organizationIdSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("organization-id", prefix))
	if err != nil {
		return paths, err
	}
	if organizationIdSet {
		m.OrganizationId = organizationId
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("organization-id", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForUserIdentifiers adds flags to select fields in UserIdentifiers.
func AddSelectFlagsForUserIdentifiers(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("user-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("user-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("email", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("email", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forUserIdentifiers message from select flags.
func PathsFromSelectFlagsForUserIdentifiers(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	userId, userIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("user-id", prefix))
	if err != nil {
		return paths, err
	}
	if userIdSelect && userId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("user-id", prefix)))
	}
	email, emailSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("email", prefix))
	if err != nil {
		return paths, err
	}
	if emailSelect && email {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("email", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForUserIdentifiers adds flags to select fields in UserIdentifiers.
func AddSetFlagsForUserIdentifiers(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("user-id", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("email", prefix), ""))
}

// SetFromFlags sets the UserIdentifiers message from flags.
func (m *UserIdentifiers) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	userId, userIdSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("user-id", prefix))
	if err != nil {
		return paths, err
	}
	if userIdSet {
		m.UserId = userId
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("user-id", prefix)))
	}
	email, emailSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("email", prefix))
	if err != nil {
		return paths, err
	}
	if emailSet {
		m.Email = email
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("email", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForOrganizationOrUserIdentifiers adds flags to select fields in OrganizationOrUserIdentifiers.
func AddSelectFlagsForOrganizationOrUserIdentifiers(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ids.organization-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ids.organization-ids", prefix), true)))
	AddSelectFlagsForOrganizationIdentifiers(flags, flagsplugin.Prefix("ids.organization-ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ids.user-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ids.user-ids", prefix), true)))
	AddSelectFlagsForUserIdentifiers(flags, flagsplugin.Prefix("ids.user-ids", prefix))
}

// SelectFromFlags outputs the fieldmask paths forOrganizationOrUserIdentifiers message from select flags.
func PathsFromSelectFlagsForOrganizationOrUserIdentifiers(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	organizationIds, organizationIdsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ids.organization-ids", prefix))
	if err != nil {
		return paths, err
	}
	if organizationIdsSelect && organizationIds {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("ids.organization-ids", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForOrganizationIdentifiers(flags, flagsplugin.Prefix("ids.organization-ids", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	userIds, userIdsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ids.user-ids", prefix))
	if err != nil {
		return paths, err
	}
	if userIdsSelect && userIds {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("ids.user-ids", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForUserIdentifiers(flags, flagsplugin.Prefix("ids.user-ids", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSetFlagsForOrganizationOrUserIdentifiers adds flags to select fields in OrganizationOrUserIdentifiers.
func AddSetFlagsForOrganizationOrUserIdentifiers(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForOrganizationIdentifiers(flags, flagsplugin.Prefix("ids.organization-ids", prefix))
	AddSetFlagsForUserIdentifiers(flags, flagsplugin.Prefix("ids.user-ids", prefix))
}

// SetFromFlags sets the OrganizationOrUserIdentifiers message from flags.
func (m *OrganizationOrUserIdentifiers) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	organizationIdsSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ids.organization-ids", prefix))
	if organizationIdsSet {
		ov := &OrganizationOrUserIdentifiers_OrganizationIds{}
		ov.OrganizationIds = &OrganizationIdentifiers{}
		if setPaths, err := ov.OrganizationIds.SetFromFlags(flags, flagsplugin.Prefix("ids.organization-ids", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
		m.Ids = ov
	}
	userIdsSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ids.user-ids", prefix))
	if userIdsSet {
		ov := &OrganizationOrUserIdentifiers_UserIds{}
		ov.UserIds = &UserIdentifiers{}
		if setPaths, err := ov.UserIds.SetFromFlags(flags, flagsplugin.Prefix("ids.user-ids", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
		m.Ids = ov
	}
	return paths, nil
}

// AddSelectFlagsForEndDeviceVersionIdentifiers adds flags to select fields in EndDeviceVersionIdentifiers.
func AddSelectFlagsForEndDeviceVersionIdentifiers(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("brand-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("brand-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("model-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("model-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("hardware-version", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("hardware-version", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("firmware-version", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("firmware-version", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("band-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("band-id", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forEndDeviceVersionIdentifiers message from select flags.
func PathsFromSelectFlagsForEndDeviceVersionIdentifiers(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	brandId, brandIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("brand-id", prefix))
	if err != nil {
		return paths, err
	}
	if brandIdSelect && brandId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("brand-id", prefix)))
	}
	modelId, modelIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("model-id", prefix))
	if err != nil {
		return paths, err
	}
	if modelIdSelect && modelId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("model-id", prefix)))
	}
	hardwareVersion, hardwareVersionSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("hardware-version", prefix))
	if err != nil {
		return paths, err
	}
	if hardwareVersionSelect && hardwareVersion {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("hardware-version", prefix)))
	}
	firmwareVersion, firmwareVersionSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("firmware-version", prefix))
	if err != nil {
		return paths, err
	}
	if firmwareVersionSelect && firmwareVersion {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("firmware-version", prefix)))
	}
	bandId, bandIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("band-id", prefix))
	if err != nil {
		return paths, err
	}
	if bandIdSelect && bandId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("band-id", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForEndDeviceVersionIdentifiers adds flags to select fields in EndDeviceVersionIdentifiers.
func AddSetFlagsForEndDeviceVersionIdentifiers(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("brand-id", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("model-id", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("hardware-version", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("firmware-version", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("band-id", prefix), ""))
}

// SetFromFlags sets the EndDeviceVersionIdentifiers message from flags.
func (m *EndDeviceVersionIdentifiers) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	brandId, brandIdSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("brand-id", prefix))
	if err != nil {
		return paths, err
	}
	if brandIdSet {
		m.BrandId = brandId
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("brand-id", prefix)))
	}
	modelId, modelIdSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("model-id", prefix))
	if err != nil {
		return paths, err
	}
	if modelIdSet {
		m.ModelId = modelId
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("model-id", prefix)))
	}
	hardwareVersion, hardwareVersionSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("hardware-version", prefix))
	if err != nil {
		return paths, err
	}
	if hardwareVersionSet {
		m.HardwareVersion = hardwareVersion
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("hardware-version", prefix)))
	}
	firmwareVersion, firmwareVersionSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("firmware-version", prefix))
	if err != nil {
		return paths, err
	}
	if firmwareVersionSet {
		m.FirmwareVersion = firmwareVersion
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("firmware-version", prefix)))
	}
	bandId, bandIdSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("band-id", prefix))
	if err != nil {
		return paths, err
	}
	if bandIdSet {
		m.BandId = bandId
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("band-id", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForNetworkIdentifiers adds flags to select fields in NetworkIdentifiers.
func AddSelectFlagsForNetworkIdentifiers(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("net-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("net-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("tenant-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("tenant-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("cluster-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("cluster-id", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forNetworkIdentifiers message from select flags.
func PathsFromSelectFlagsForNetworkIdentifiers(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	netId, netIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("net-id", prefix))
	if err != nil {
		return paths, err
	}
	if netIdSelect && netId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("net-id", prefix)))
	}
	tenantId, tenantIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("tenant-id", prefix))
	if err != nil {
		return paths, err
	}
	if tenantIdSelect && tenantId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("tenant-id", prefix)))
	}
	clusterId, clusterIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("cluster-id", prefix))
	if err != nil {
		return paths, err
	}
	if clusterIdSelect && clusterId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("cluster-id", prefix)))
	}
	return paths, nil
}
