// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v0.0.0-dev
// - protoc              v3.17.3
// source: lorawan-stack/api/rights.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	gogo "github.com/TheThingsIndustries/protoc-gen-go-flags/gogo"
	pflag "github.com/spf13/pflag"
)

// AddSelectFlagsForAPIKey adds flags to select fields in APIKey.
func AddSelectFlagsForAPIKey(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("key", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("key", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("name", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("name", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rights", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rights", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("created-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("created-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("updated-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("updated-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("expires-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("expires-at", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forAPIKey message from select flags.
func PathsFromSelectFlagsForAPIKey(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	id, idSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("id", prefix))
	if err != nil {
		return paths, err
	}
	if idSelect && id {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("id", prefix)))
	}
	key, keySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("key", prefix))
	if err != nil {
		return paths, err
	}
	if keySelect && key {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("key", prefix)))
	}
	name, nameSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("name", prefix))
	if err != nil {
		return paths, err
	}
	if nameSelect && name {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("name", prefix)))
	}
	rights, rightsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rights", prefix))
	if err != nil {
		return paths, err
	}
	if rightsSelect && rights {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rights", prefix)))
	}
	createdAt, createdAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("created-at", prefix))
	if err != nil {
		return paths, err
	}
	if createdAtSelect && createdAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("created-at", prefix)))
	}
	updatedAt, updatedAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("updated-at", prefix))
	if err != nil {
		return paths, err
	}
	if updatedAtSelect && updatedAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("updated-at", prefix)))
	}
	expiresAt, expiresAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("expires-at", prefix))
	if err != nil {
		return paths, err
	}
	if expiresAtSelect && expiresAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("expires-at", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForAPIKey adds flags to select fields in APIKey.
func AddSetFlagsForAPIKey(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("id", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("key", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("name", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("rights", prefix), ""))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("created-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("updated-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("expires-at", prefix), ""))
}

// SetFromFlags sets the APIKey message from flags.
func (m *APIKey) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	id, idSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("id", prefix))
	if err != nil {
		return paths, err
	}
	if idSet {
		m.Id = id
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("id", prefix)))
	}
	key, keySet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("key", prefix))
	if err != nil {
		return paths, err
	}
	if keySet {
		m.Key = key
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("key", prefix)))
	}
	name, nameSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("name", prefix))
	if err != nil {
		return paths, err
	}
	if nameSet {
		m.Name = name
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("name", prefix)))
	}
	rights, rightsSet, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("rights", prefix))
	if err != nil {
		return paths, err
	}
	if rightsSet {
		for _, v := range rights {
			enumValue, err := flagsplugin.SetEnumString(v, Right_value)
			if err != nil {
				return paths, err
			}
			m.Rights = append(m.Rights, Right(enumValue))
		}
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rights", prefix)))
	}
	createdAt, createdAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("created-at", prefix))
	if err != nil {
		return paths, err
	}
	if createdAtSet {
		m.CreatedAt = gogo.SetTimestamp(createdAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("created-at", prefix)))
	}
	updatedAt, updatedAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("updated-at", prefix))
	if err != nil {
		return paths, err
	}
	if updatedAtSet {
		m.UpdatedAt = gogo.SetTimestamp(updatedAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("updated-at", prefix)))
	}
	expiresAt, expiresAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("expires-at", prefix))
	if err != nil {
		return paths, err
	}
	if expiresAtSet {
		m.ExpiresAt = gogo.SetTimestamp(expiresAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("expires-at", prefix)))
	}
	return paths, nil
}
