// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v0.0.0-dev
// - protoc              v3.17.3
// source: lorawan-stack/api/join.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	gogo "github.com/TheThingsIndustries/protoc-gen-go-flags/gogo"
	pflag "github.com/spf13/pflag"
)

// AddSelectFlagsForJoinResponse adds flags to select fields in JoinResponse.
func AddSelectFlagsForJoinResponse(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("raw-payload", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("raw-payload", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("session-keys", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("session-keys", prefix), true)))
	AddSelectFlagsForSessionKeys(flags, flagsplugin.Prefix("session-keys", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("lifetime", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("lifetime", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("correlation-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("correlation-ids", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forJoinResponse message from select flags.
func PathsFromSelectFlagsForJoinResponse(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("raw_payload", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("raw_payload", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("session_keys", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("session_keys", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForSessionKeys(flags, flagsplugin.Prefix("session_keys", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("lifetime", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("lifetime", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("correlation_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("correlation_ids", prefix))
	}
	return paths, nil
}

// AddSetFlagsForJoinResponse adds flags to select fields in JoinResponse.
func AddSetFlagsForJoinResponse(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBytesFlag(flagsplugin.Prefix("raw-payload", prefix), ""))
	AddSetFlagsForSessionKeys(flags, flagsplugin.Prefix("session-keys", prefix))
	flags.AddFlag(flagsplugin.NewDurationFlag(flagsplugin.Prefix("lifetime", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("correlation-ids", prefix), ""))
}

// SetFromFlags sets the JoinResponse message from flags.
func (m *JoinResponse) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBytes(flags, flagsplugin.Prefix("raw_payload", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.RawPayload = val
		paths = append(paths, flagsplugin.Prefix("raw_payload", prefix))
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("session_keys", prefix)); selected {
		m.SessionKeys = &SessionKeys{}
		if setPaths, err := m.SessionKeys.SetFromFlags(flags, flagsplugin.Prefix("session_keys", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, selected, err := flagsplugin.GetDuration(flags, flagsplugin.Prefix("lifetime", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.Lifetime = gogo.SetDuration(val)
		paths = append(paths, flagsplugin.Prefix("lifetime", prefix))
	}
	if val, selected, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("correlation_ids", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.CorrelationIds = val
		paths = append(paths, flagsplugin.Prefix("correlation_ids", prefix))
	}
	return paths, nil
}
