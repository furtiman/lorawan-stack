// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v0.0.0-dev
// - protoc              v3.17.3
// source: lorawan-stack/api/client.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	gogo "github.com/TheThingsIndustries/protoc-gen-go-flags/gogo"
	pflag "github.com/spf13/pflag"
)

// AddSelectFlagsForClient adds flags to select fields in Client.
func AddSelectFlagsForClient(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ids", prefix), true)))
	AddSelectFlagsForClientIdentifiers(flags, flagsplugin.Prefix("ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("created-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("created-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("updated-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("updated-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("deleted-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("deleted-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("name", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("name", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("description", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("description", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("attributes", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("attributes", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("contact-info", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("contact-info", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("administrative-contact", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("administrative-contact", prefix), true)))
	AddSelectFlagsForOrganizationOrUserIdentifiers(flags, flagsplugin.Prefix("administrative-contact", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("technical-contact", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("technical-contact", prefix), true)))
	AddSelectFlagsForOrganizationOrUserIdentifiers(flags, flagsplugin.Prefix("technical-contact", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("secret", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("secret", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("redirect-uris", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("redirect-uris", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("logout-redirect-uris", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("logout-redirect-uris", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("state", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("state", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("state-description", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("state-description", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("skip-authorization", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("skip-authorization", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("endorsed", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("endorsed", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("grants", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("grants", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rights", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rights", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forClient message from select flags.
func PathsFromSelectFlagsForClient(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	ids, idsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ids", prefix))
	if err != nil {
		return paths, err
	}
	if idsSelect && ids {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("ids", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForClientIdentifiers(flags, flagsplugin.Prefix("ids", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	createdAt, createdAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("created-at", prefix))
	if err != nil {
		return paths, err
	}
	if createdAtSelect && createdAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("created-at", prefix)))
	}
	updatedAt, updatedAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("updated-at", prefix))
	if err != nil {
		return paths, err
	}
	if updatedAtSelect && updatedAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("updated-at", prefix)))
	}
	deletedAt, deletedAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("deleted-at", prefix))
	if err != nil {
		return paths, err
	}
	if deletedAtSelect && deletedAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("deleted-at", prefix)))
	}
	name, nameSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("name", prefix))
	if err != nil {
		return paths, err
	}
	if nameSelect && name {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("name", prefix)))
	}
	description, descriptionSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("description", prefix))
	if err != nil {
		return paths, err
	}
	if descriptionSelect && description {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("description", prefix)))
	}
	attributes, attributesSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("attributes", prefix))
	if err != nil {
		return paths, err
	}
	if attributesSelect && attributes {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("attributes", prefix)))
	}
	contactInfo, contactInfoSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("contact-info", prefix))
	if err != nil {
		return paths, err
	}
	if contactInfoSelect && contactInfo {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("contact-info", prefix)))
	}
	administrativeContact, administrativeContactSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("administrative-contact", prefix))
	if err != nil {
		return paths, err
	}
	if administrativeContactSelect && administrativeContact {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("administrative-contact", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForOrganizationOrUserIdentifiers(flags, flagsplugin.Prefix("administrative-contact", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	technicalContact, technicalContactSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("technical-contact", prefix))
	if err != nil {
		return paths, err
	}
	if technicalContactSelect && technicalContact {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("technical-contact", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForOrganizationOrUserIdentifiers(flags, flagsplugin.Prefix("technical-contact", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	secret, secretSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("secret", prefix))
	if err != nil {
		return paths, err
	}
	if secretSelect && secret {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("secret", prefix)))
	}
	redirectUris, redirectUrisSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("redirect-uris", prefix))
	if err != nil {
		return paths, err
	}
	if redirectUrisSelect && redirectUris {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("redirect-uris", prefix)))
	}
	logoutRedirectUris, logoutRedirectUrisSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("logout-redirect-uris", prefix))
	if err != nil {
		return paths, err
	}
	if logoutRedirectUrisSelect && logoutRedirectUris {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("logout-redirect-uris", prefix)))
	}
	state, stateSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("state", prefix))
	if err != nil {
		return paths, err
	}
	if stateSelect && state {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("state", prefix)))
	}
	stateDescription, stateDescriptionSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("state-description", prefix))
	if err != nil {
		return paths, err
	}
	if stateDescriptionSelect && stateDescription {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("state-description", prefix)))
	}
	skipAuthorization, skipAuthorizationSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("skip-authorization", prefix))
	if err != nil {
		return paths, err
	}
	if skipAuthorizationSelect && skipAuthorization {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("skip-authorization", prefix)))
	}
	endorsed, endorsedSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("endorsed", prefix))
	if err != nil {
		return paths, err
	}
	if endorsedSelect && endorsed {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("endorsed", prefix)))
	}
	grants, grantsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("grants", prefix))
	if err != nil {
		return paths, err
	}
	if grantsSelect && grants {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("grants", prefix)))
	}
	rights, rightsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rights", prefix))
	if err != nil {
		return paths, err
	}
	if rightsSelect && rights {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rights", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForClient adds flags to select fields in Client.
func AddSetFlagsForClient(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForClientIdentifiers(flags, flagsplugin.Prefix("ids", prefix))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("created-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("updated-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("deleted-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("name", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("description", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringStringMapFlag(flagsplugin.Prefix("attributes", prefix), ""))
	// FIXME: Skipping ContactInfo because repeated messages are currently not supported.
	AddSetFlagsForOrganizationOrUserIdentifiers(flags, flagsplugin.Prefix("administrative-contact", prefix))
	AddSetFlagsForOrganizationOrUserIdentifiers(flags, flagsplugin.Prefix("technical-contact", prefix))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("secret", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("redirect-uris", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("logout-redirect-uris", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("state", prefix), flagsplugin.EnumValueDesc(State_value)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("state-description", prefix), ""))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("skip-authorization", prefix), ""))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("endorsed", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("grants", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("rights", prefix), ""))
}

// SetFromFlags sets the Client message from flags.
func (m *Client) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	idsSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ids", prefix))
	if idsSet {
		m.Ids = &ClientIdentifiers{}
		if setPaths, err := m.Ids.SetFromFlags(flags, flagsplugin.Prefix("ids", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	createdAt, createdAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("created-at", prefix))
	if err != nil {
		return paths, err
	}
	if createdAtSet {
		m.CreatedAt = gogo.SetTimestamp(createdAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("created-at", prefix)))
	}
	updatedAt, updatedAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("updated-at", prefix))
	if err != nil {
		return paths, err
	}
	if updatedAtSet {
		m.UpdatedAt = gogo.SetTimestamp(updatedAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("updated-at", prefix)))
	}
	deletedAt, deletedAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("deleted-at", prefix))
	if err != nil {
		return paths, err
	}
	if deletedAtSet {
		m.DeletedAt = gogo.SetTimestamp(deletedAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("deleted-at", prefix)))
	}
	name, nameSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("name", prefix))
	if err != nil {
		return paths, err
	}
	if nameSet {
		m.Name = name
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("name", prefix)))
	}
	description, descriptionSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("description", prefix))
	if err != nil {
		return paths, err
	}
	if descriptionSet {
		m.Description = description
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("description", prefix)))
	}
	attributes, attributesSet, err := flagsplugin.GetStringStringMap(flags, flagsplugin.Prefix("attributes", prefix))
	if err != nil {
		return paths, err
	}
	if attributesSet {
		m.Attributes = attributes
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("attributes", prefix)))
	}
	// FIXME: Skipping ContactInfo because it does not seem to implement AddSetFlags.
	administrativeContactSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("administrative-contact", prefix))
	if administrativeContactSet {
		m.AdministrativeContact = &OrganizationOrUserIdentifiers{}
		if setPaths, err := m.AdministrativeContact.SetFromFlags(flags, flagsplugin.Prefix("administrative-contact", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	technicalContactSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("technical-contact", prefix))
	if technicalContactSet {
		m.TechnicalContact = &OrganizationOrUserIdentifiers{}
		if setPaths, err := m.TechnicalContact.SetFromFlags(flags, flagsplugin.Prefix("technical-contact", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	secret, secretSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("secret", prefix))
	if err != nil {
		return paths, err
	}
	if secretSet {
		m.Secret = secret
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("secret", prefix)))
	}
	redirectUris, redirectUrisSet, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("redirect-uris", prefix))
	if err != nil {
		return paths, err
	}
	if redirectUrisSet {
		m.RedirectUris = redirectUris
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("redirect-uris", prefix)))
	}
	logoutRedirectUris, logoutRedirectUrisSet, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("logout-redirect-uris", prefix))
	if err != nil {
		return paths, err
	}
	if logoutRedirectUrisSet {
		m.LogoutRedirectUris = logoutRedirectUris
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("logout-redirect-uris", prefix)))
	}
	state, stateSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("state", prefix))
	if err != nil {
		return paths, err
	}
	if stateSet {
		enumValue, err := flagsplugin.SetEnumString(state, State_value)
		if err != nil {
			return paths, err
		}
		m.State = State(enumValue)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("state", prefix)))
	}
	stateDescription, stateDescriptionSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("state-description", prefix))
	if err != nil {
		return paths, err
	}
	if stateDescriptionSet {
		m.StateDescription = stateDescription
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("state-description", prefix)))
	}
	skipAuthorization, skipAuthorizationSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("skip-authorization", prefix))
	if err != nil {
		return paths, err
	}
	if skipAuthorizationSet {
		m.SkipAuthorization = skipAuthorization
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("skip-authorization", prefix)))
	}
	endorsed, endorsedSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("endorsed", prefix))
	if err != nil {
		return paths, err
	}
	if endorsedSet {
		m.Endorsed = endorsed
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("endorsed", prefix)))
	}
	grants, grantsSet, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("grants", prefix))
	if err != nil {
		return paths, err
	}
	if grantsSet {
		for _, v := range grants {
			enumValue, err := flagsplugin.SetEnumString(v, GrantType_value)
			if err != nil {
				return paths, err
			}
			m.Grants = append(m.Grants, GrantType(enumValue))
		}
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("grants", prefix)))
	}
	rights, rightsSet, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("rights", prefix))
	if err != nil {
		return paths, err
	}
	if rightsSet {
		for _, v := range rights {
			enumValue, err := flagsplugin.SetEnumString(v, Right_value)
			if err != nil {
				return paths, err
			}
			m.Rights = append(m.Rights, Right(enumValue))
		}
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rights", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForListClientsRequest adds flags to select fields in ListClientsRequest.
func AddSelectFlagsForListClientsRequest(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("collaborator", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("collaborator", prefix), true)))
	AddSelectFlagsForOrganizationOrUserIdentifiers(flags, flagsplugin.Prefix("collaborator", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("field-mask", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("field-mask", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("order", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("order", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("limit", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("limit", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("page", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("page", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("deleted", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("deleted", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forListClientsRequest message from select flags.
func PathsFromSelectFlagsForListClientsRequest(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	collaborator, collaboratorSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("collaborator", prefix))
	if err != nil {
		return paths, err
	}
	if collaboratorSelect && collaborator {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("collaborator", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForOrganizationOrUserIdentifiers(flags, flagsplugin.Prefix("collaborator", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	fieldMask, fieldMaskSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("field-mask", prefix))
	if err != nil {
		return paths, err
	}
	if fieldMaskSelect && fieldMask {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("field-mask", prefix)))
	}
	order, orderSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("order", prefix))
	if err != nil {
		return paths, err
	}
	if orderSelect && order {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("order", prefix)))
	}
	limit, limitSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("limit", prefix))
	if err != nil {
		return paths, err
	}
	if limitSelect && limit {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("limit", prefix)))
	}
	page, pageSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("page", prefix))
	if err != nil {
		return paths, err
	}
	if pageSelect && page {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("page", prefix)))
	}
	deleted, deletedSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("deleted", prefix))
	if err != nil {
		return paths, err
	}
	if deletedSelect && deleted {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("deleted", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForListClientsRequest adds flags to select fields in ListClientsRequest.
func AddSetFlagsForListClientsRequest(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForOrganizationOrUserIdentifiers(flags, flagsplugin.Prefix("collaborator", prefix))
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("field-mask", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("order", prefix), ""))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("limit", prefix), ""))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("page", prefix), ""))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("deleted", prefix), ""))
}

// SetFromFlags sets the ListClientsRequest message from flags.
func (m *ListClientsRequest) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	collaboratorSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("collaborator", prefix))
	if collaboratorSet {
		m.Collaborator = &OrganizationOrUserIdentifiers{}
		if setPaths, err := m.Collaborator.SetFromFlags(flags, flagsplugin.Prefix("collaborator", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	fieldMask, fieldMaskSet, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("field-mask", prefix))
	if err != nil {
		return paths, err
	}
	if fieldMaskSet {
		m.FieldMask = gogo.SetFieldMask(fieldMask)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("field-mask", prefix)))
	}
	order, orderSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("order", prefix))
	if err != nil {
		return paths, err
	}
	if orderSet {
		m.Order = order
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("order", prefix)))
	}
	limit, limitSet, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("limit", prefix))
	if err != nil {
		return paths, err
	}
	if limitSet {
		m.Limit = limit
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("limit", prefix)))
	}
	page, pageSet, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("page", prefix))
	if err != nil {
		return paths, err
	}
	if pageSet {
		m.Page = page
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("page", prefix)))
	}
	deleted, deletedSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("deleted", prefix))
	if err != nil {
		return paths, err
	}
	if deletedSet {
		m.Deleted = deleted
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("deleted", prefix)))
	}
	return paths, nil
}
