// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v0.0.0-dev
// - protoc              v3.17.3
// source: lorawan-stack/api/applicationserver.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	types "github.com/gogo/protobuf/types"
	pflag "github.com/spf13/pflag"
)

// AddSelectFlagsForApplicationLink adds flags to select fields in ApplicationLink.
func AddSelectFlagsForApplicationLink(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("default-formatters", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("default-formatters", prefix), true)))
	AddSelectFlagsForMessagePayloadFormatters(flags, flagsplugin.Prefix("default-formatters", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("skip-payload-crypto", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("skip-payload-crypto", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationLink message from select flags.
func PathsFromSelectFlagsForApplicationLink(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	defaultFormatters, defaultFormattersSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("default-formatters", prefix))
	if err != nil {
		return paths, err
	}
	if defaultFormattersSelect && defaultFormatters {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("default-formatters", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForMessagePayloadFormatters(flags, flagsplugin.Prefix("default-formatters", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	skipPayloadCrypto, skipPayloadCryptoSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("skip-payload-crypto", prefix))
	if err != nil {
		return paths, err
	}
	if skipPayloadCryptoSelect && skipPayloadCrypto {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("skip-payload-crypto", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForApplicationLink adds flags to select fields in ApplicationLink.
func AddSetFlagsForApplicationLink(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForMessagePayloadFormatters(flags, flagsplugin.Prefix("default-formatters", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("skip-payload-crypto", prefix), ""))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("skip-payload-crypto", prefix), flagsplugin.Prefix("skip-payload-crypto.value", prefix))
}

// SetFromFlags sets the ApplicationLink message from flags.
func (m *ApplicationLink) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	defaultFormattersSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("default-formatters", prefix))
	if defaultFormattersSet {
		m.DefaultFormatters = &MessagePayloadFormatters{}
		if setPaths, err := m.DefaultFormatters.SetFromFlags(flags, flagsplugin.Prefix("default-formatters", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	skipPayloadCrypto, skipPayloadCryptoSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("skip-payload-crypto", prefix))
	if err != nil {
		return paths, err
	}
	if skipPayloadCryptoSet {
		m.SkipPayloadCrypto = &types.BoolValue{Value: skipPayloadCrypto}
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("skip-payload-crypto", prefix)))
	}
	return paths, nil
}
