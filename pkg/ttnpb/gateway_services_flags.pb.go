// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v0.0.0-dev
// - protoc              v3.17.3
// source: lorawan-stack/api/gateway_services.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	gogo "github.com/TheThingsIndustries/protoc-gen-go-flags/gogo"
	pflag "github.com/spf13/pflag"
)

// AddSelectFlagsForPullGatewayConfigurationRequest adds flags to select fields in PullGatewayConfigurationRequest.
func AddSelectFlagsForPullGatewayConfigurationRequest(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("gateway-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("gateway-ids", prefix), true)))
	AddSelectFlagsForGatewayIdentifiers(flags, flagsplugin.Prefix("gateway-ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("field-mask", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("field-mask", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forPullGatewayConfigurationRequest message from select flags.
func PathsFromSelectFlagsForPullGatewayConfigurationRequest(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("gateway_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("gateway_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForGatewayIdentifiers(flags, flagsplugin.Prefix("gateway_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("field_mask", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("field_mask", prefix))
	}
	return paths, nil
}

// AddSetFlagsForPullGatewayConfigurationRequest adds flags to select fields in PullGatewayConfigurationRequest.
func AddSetFlagsForPullGatewayConfigurationRequest(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForGatewayIdentifiers(flags, flagsplugin.Prefix("gateway-ids", prefix))
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("field-mask", prefix), ""))
}

// SetFromFlags sets the PullGatewayConfigurationRequest message from flags.
func (m *PullGatewayConfigurationRequest) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("gateway_ids", prefix)); selected {
		m.GatewayIds = &GatewayIdentifiers{}
		if setPaths, err := m.GatewayIds.SetFromFlags(flags, flagsplugin.Prefix("gateway_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, selected, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("field_mask", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.FieldMask = gogo.SetFieldMask(val)
		paths = append(paths, flagsplugin.Prefix("field_mask", prefix))
	}
	return paths, nil
}
