// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

func (dst *QRCodeFormat) SetFields(src *QRCodeFormat, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "name":
			if len(subs) > 0 {
				return fmt.Errorf("'name' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Name = src.Name
			} else {
				var zero string
				dst.Name = zero
			}
		case "description":
			if len(subs) > 0 {
				return fmt.Errorf("'description' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Description = src.Description
			} else {
				var zero string
				dst.Description = zero
			}
		case "field_mask":
			if len(subs) > 0 {
				return fmt.Errorf("'field_mask' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FieldMask = src.FieldMask
			} else {
				dst.FieldMask = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *QRCodeFormats) SetFields(src *QRCodeFormats, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "formats":
			if len(subs) > 0 {
				return fmt.Errorf("'formats' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Formats = src.Formats
			} else {
				dst.Formats = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *GetQRCodeFormatRequest) SetFields(src *GetQRCodeFormatRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "format_id":
			if len(subs) > 0 {
				return fmt.Errorf("'format_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FormatId = src.FormatId
			} else {
				var zero string
				dst.FormatId = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *GenerateEndDeviceQRCodeRequest) SetFields(src *GenerateEndDeviceQRCodeRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "format_id":
			if len(subs) > 0 {
				return fmt.Errorf("'format_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FormatId = src.FormatId
			} else {
				var zero string
				dst.FormatId = zero
			}
		case "end_device":
			if len(subs) > 0 {
				var newDst, newSrc *EndDevice
				if (src == nil || src.EndDevice == nil) && dst.EndDevice == nil {
					continue
				}
				if src != nil {
					newSrc = src.EndDevice
				}
				if dst.EndDevice != nil {
					newDst = dst.EndDevice
				} else {
					newDst = &EndDevice{}
					dst.EndDevice = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.EndDevice = src.EndDevice
				} else {
					dst.EndDevice = nil
				}
			}
		case "image":
			if len(subs) > 0 {
				var newDst, newSrc *GenerateEndDeviceQRCodeRequest_Image
				if (src == nil || src.Image == nil) && dst.Image == nil {
					continue
				}
				if src != nil {
					newSrc = src.Image
				}
				if dst.Image != nil {
					newDst = dst.Image
				} else {
					newDst = &GenerateEndDeviceQRCodeRequest_Image{}
					dst.Image = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Image = src.Image
				} else {
					dst.Image = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *GenerateQRCodeResponse) SetFields(src *GenerateQRCodeResponse, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "text":
			if len(subs) > 0 {
				return fmt.Errorf("'text' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Text = src.Text
			} else {
				var zero string
				dst.Text = zero
			}
		case "image":
			if len(subs) > 0 {
				var newDst, newSrc *Picture
				if (src == nil || src.Image == nil) && dst.Image == nil {
					continue
				}
				if src != nil {
					newSrc = src.Image
				}
				if dst.Image != nil {
					newDst = dst.Image
				} else {
					newDst = &Picture{}
					dst.Image = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Image = src.Image
				} else {
					dst.Image = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *EndDeviceOnboardingData) SetFields(src *EndDeviceOnboardingData, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "join_eui":
			if len(subs) > 0 {
				return fmt.Errorf("'join_eui' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.JoinEui = src.JoinEui
			} else {
				dst.JoinEui = nil
			}
		case "dev_eui":
			if len(subs) > 0 {
				return fmt.Errorf("'dev_eui' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DevEui = src.DevEui
			} else {
				dst.DevEui = nil
			}
		case "claim_authentication_code":
			if len(subs) > 0 {
				return fmt.Errorf("'claim_authentication_code' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ClaimAuthenticationCode = src.ClaimAuthenticationCode
			} else {
				var zero string
				dst.ClaimAuthenticationCode = zero
			}
		case "vendor_id":
			if len(subs) > 0 {
				return fmt.Errorf("'vendor_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.VendorId = src.VendorId
			} else {
				dst.VendorId = nil
			}
		case "model_id":
			if len(subs) > 0 {
				return fmt.Errorf("'model_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ModelId = src.ModelId
			} else {
				dst.ModelId = nil
			}
		case "checksum":
			if len(subs) > 0 {
				return fmt.Errorf("'checksum' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Checksum = src.Checksum
			} else {
				var zero string
				dst.Checksum = zero
			}
		case "serial_number":
			if len(subs) > 0 {
				return fmt.Errorf("'serial_number' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.SerialNumber = src.SerialNumber
			} else {
				var zero string
				dst.SerialNumber = zero
			}
		case "proprietary":
			if len(subs) > 0 {
				return fmt.Errorf("'proprietary' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Proprietary = src.Proprietary
			} else {
				var zero string
				dst.Proprietary = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *EntityOnboardingData) SetFields(src *EntityOnboardingData, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "format_id":
			if len(subs) > 0 {
				return fmt.Errorf("'format_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FormatId = src.FormatId
			} else {
				var zero string
				dst.FormatId = zero
			}

		case "data":
			if len(subs) == 0 && src == nil {
				dst.Data = nil
				continue
			} else if len(subs) == 0 {
				dst.Data = src.Data
				continue
			}

			subPathMap := _processPaths(subs)
			if len(subPathMap) > 1 {
				return fmt.Errorf("more than one field specified for oneof field '%s'", name)
			}
			for oneofName, oneofSubs := range subPathMap {
				switch oneofName {
				case "end_device_onboarding_data":
					_, srcOk := src.Data.(*EntityOnboardingData_EndDeviceOnboardingData)
					if !srcOk && src.Data != nil {
						return fmt.Errorf("attempt to set oneof 'end_device_onboarding_data', while different oneof is set in source")
					}
					_, dstOk := dst.Data.(*EntityOnboardingData_EndDeviceOnboardingData)
					if !dstOk && dst.Data != nil {
						return fmt.Errorf("attempt to set oneof 'end_device_onboarding_data', while different oneof is set in destination")
					}
					if len(oneofSubs) > 0 {
						var newDst, newSrc *EndDeviceOnboardingData
						if !srcOk && !dstOk {
							continue
						}
						if srcOk {
							newSrc = src.Data.(*EntityOnboardingData_EndDeviceOnboardingData).EndDeviceOnboardingData
						}
						if dstOk {
							newDst = dst.Data.(*EntityOnboardingData_EndDeviceOnboardingData).EndDeviceOnboardingData
						} else {
							newDst = &EndDeviceOnboardingData{}
							dst.Data = &EntityOnboardingData_EndDeviceOnboardingData{EndDeviceOnboardingData: newDst}
						}
						if err := newDst.SetFields(newSrc, oneofSubs...); err != nil {
							return err
						}
					} else {
						if src != nil {
							dst.Data = src.Data
						} else {
							dst.Data = nil
						}
					}

				default:
					return fmt.Errorf("invalid oneof field: '%s.%s'", name, oneofName)
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ParseQRCodeRequest) SetFields(src *ParseQRCodeRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "format_id":
			if len(subs) > 0 {
				return fmt.Errorf("'format_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FormatId = src.FormatId
			} else {
				var zero string
				dst.FormatId = zero
			}
		case "qr_code":
			if len(subs) > 0 {
				return fmt.Errorf("'qr_code' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.QrCode = src.QrCode
			} else {
				dst.QrCode = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ParseQRCodeResponse) SetFields(src *ParseQRCodeResponse, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "entity_onboarding_data":
			if len(subs) > 0 {
				var newDst, newSrc *EntityOnboardingData
				if (src == nil || src.EntityOnboardingData == nil) && dst.EntityOnboardingData == nil {
					continue
				}
				if src != nil {
					newSrc = src.EntityOnboardingData
				}
				if dst.EntityOnboardingData != nil {
					newDst = dst.EntityOnboardingData
				} else {
					newDst = &EntityOnboardingData{}
					dst.EntityOnboardingData = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.EntityOnboardingData = src.EntityOnboardingData
				} else {
					dst.EntityOnboardingData = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *GenerateEndDeviceQRCodeRequest_Image) SetFields(src *GenerateEndDeviceQRCodeRequest_Image, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "image_size":
			if len(subs) > 0 {
				return fmt.Errorf("'image_size' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ImageSize = src.ImageSize
			} else {
				var zero uint32
				dst.ImageSize = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}
