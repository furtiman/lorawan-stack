// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v0.0.0-dev
// - protoc              v3.17.3
// source: lorawan-stack/api/applicationserver_packages.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	gogo "github.com/TheThingsIndustries/protoc-gen-go-flags/gogo"
	pflag "github.com/spf13/pflag"
)

// AddSelectFlagsForApplicationPackageAssociationIdentifiers adds flags to select fields in ApplicationPackageAssociationIdentifiers.
func AddSelectFlagsForApplicationPackageAssociationIdentifiers(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("end-device-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("end-device-ids", prefix), true)))
	AddSelectFlagsForEndDeviceIdentifiers(flags, flagsplugin.Prefix("end-device-ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("f-port", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("f-port", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationPackageAssociationIdentifiers message from select flags.
func PathsFromSelectFlagsForApplicationPackageAssociationIdentifiers(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	endDeviceIds, endDeviceIdsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("end-device-ids", prefix))
	if err != nil {
		return paths, err
	}
	if endDeviceIdsSelect && endDeviceIds {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("end-device-ids", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForEndDeviceIdentifiers(flags, flagsplugin.Prefix("end-device-ids", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	fPort, fPortSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("f-port", prefix))
	if err != nil {
		return paths, err
	}
	if fPortSelect && fPort {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("f-port", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForApplicationPackageAssociationIdentifiers adds flags to select fields in ApplicationPackageAssociationIdentifiers.
func AddSetFlagsForApplicationPackageAssociationIdentifiers(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForEndDeviceIdentifiers(flags, flagsplugin.Prefix("end-device-ids", prefix))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("f-port", prefix), ""))
}

// SetFromFlags sets the ApplicationPackageAssociationIdentifiers message from flags.
func (m *ApplicationPackageAssociationIdentifiers) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	endDeviceIdsSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("end-device-ids", prefix))
	if endDeviceIdsSet {
		m.EndDeviceIds = &EndDeviceIdentifiers{}
		if setPaths, err := m.EndDeviceIds.SetFromFlags(flags, flagsplugin.Prefix("end-device-ids", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	fPort, fPortSet, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("f-port", prefix))
	if err != nil {
		return paths, err
	}
	if fPortSet {
		m.FPort = fPort
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("f-port", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationPackageAssociation adds flags to select fields in ApplicationPackageAssociation.
func AddSelectFlagsForApplicationPackageAssociation(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ids", prefix), true)))
	AddSelectFlagsForApplicationPackageAssociationIdentifiers(flags, flagsplugin.Prefix("ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("created-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("created-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("updated-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("updated-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("package-name", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("package-name", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("data", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("data", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationPackageAssociation message from select flags.
func PathsFromSelectFlagsForApplicationPackageAssociation(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	ids, idsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ids", prefix))
	if err != nil {
		return paths, err
	}
	if idsSelect && ids {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("ids", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPackageAssociationIdentifiers(flags, flagsplugin.Prefix("ids", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	createdAt, createdAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("created-at", prefix))
	if err != nil {
		return paths, err
	}
	if createdAtSelect && createdAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("created-at", prefix)))
	}
	updatedAt, updatedAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("updated-at", prefix))
	if err != nil {
		return paths, err
	}
	if updatedAtSelect && updatedAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("updated-at", prefix)))
	}
	packageName, packageNameSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("package-name", prefix))
	if err != nil {
		return paths, err
	}
	if packageNameSelect && packageName {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("package-name", prefix)))
	}
	data, dataSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("data", prefix))
	if err != nil {
		return paths, err
	}
	if dataSelect && data {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("data", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForApplicationPackageAssociation adds flags to select fields in ApplicationPackageAssociation.
func AddSetFlagsForApplicationPackageAssociation(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForApplicationPackageAssociationIdentifiers(flags, flagsplugin.Prefix("ids", prefix))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("created-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("updated-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("package-name", prefix), ""))
	// FIXME: Skipping Data because this WKT is currently not supported.
}

// SetFromFlags sets the ApplicationPackageAssociation message from flags.
func (m *ApplicationPackageAssociation) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	idsSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ids", prefix))
	if idsSet {
		m.Ids = &ApplicationPackageAssociationIdentifiers{}
		if setPaths, err := m.Ids.SetFromFlags(flags, flagsplugin.Prefix("ids", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	createdAt, createdAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("created-at", prefix))
	if err != nil {
		return paths, err
	}
	if createdAtSet {
		m.CreatedAt = gogo.SetTimestamp(createdAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("created-at", prefix)))
	}
	updatedAt, updatedAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("updated-at", prefix))
	if err != nil {
		return paths, err
	}
	if updatedAtSet {
		m.UpdatedAt = gogo.SetTimestamp(updatedAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("updated-at", prefix)))
	}
	packageName, packageNameSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("package-name", prefix))
	if err != nil {
		return paths, err
	}
	if packageNameSet {
		m.PackageName = packageName
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("package-name", prefix)))
	}
	// FIXME: Skipping Data because this WKT is not supported.
	return paths, nil
}

// AddSelectFlagsForApplicationPackageDefaultAssociationIdentifiers adds flags to select fields in ApplicationPackageDefaultAssociationIdentifiers.
func AddSelectFlagsForApplicationPackageDefaultAssociationIdentifiers(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("application-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("application-ids", prefix), true)))
	AddSelectFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("application-ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("f-port", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("f-port", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationPackageDefaultAssociationIdentifiers message from select flags.
func PathsFromSelectFlagsForApplicationPackageDefaultAssociationIdentifiers(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	applicationIds, applicationIdsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("application-ids", prefix))
	if err != nil {
		return paths, err
	}
	if applicationIdsSelect && applicationIds {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("application-ids", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("application-ids", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	fPort, fPortSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("f-port", prefix))
	if err != nil {
		return paths, err
	}
	if fPortSelect && fPort {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("f-port", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForApplicationPackageDefaultAssociationIdentifiers adds flags to select fields in ApplicationPackageDefaultAssociationIdentifiers.
func AddSetFlagsForApplicationPackageDefaultAssociationIdentifiers(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("application-ids", prefix))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("f-port", prefix), ""))
}

// SetFromFlags sets the ApplicationPackageDefaultAssociationIdentifiers message from flags.
func (m *ApplicationPackageDefaultAssociationIdentifiers) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	applicationIdsSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("application-ids", prefix))
	if applicationIdsSet {
		m.ApplicationIds = &ApplicationIdentifiers{}
		if setPaths, err := m.ApplicationIds.SetFromFlags(flags, flagsplugin.Prefix("application-ids", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	fPort, fPortSet, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("f-port", prefix))
	if err != nil {
		return paths, err
	}
	if fPortSet {
		m.FPort = fPort
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("f-port", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationPackageDefaultAssociation adds flags to select fields in ApplicationPackageDefaultAssociation.
func AddSelectFlagsForApplicationPackageDefaultAssociation(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ids", prefix), true)))
	AddSelectFlagsForApplicationPackageDefaultAssociationIdentifiers(flags, flagsplugin.Prefix("ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("created-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("created-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("updated-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("updated-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("package-name", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("package-name", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("data", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("data", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationPackageDefaultAssociation message from select flags.
func PathsFromSelectFlagsForApplicationPackageDefaultAssociation(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	ids, idsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ids", prefix))
	if err != nil {
		return paths, err
	}
	if idsSelect && ids {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("ids", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPackageDefaultAssociationIdentifiers(flags, flagsplugin.Prefix("ids", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	createdAt, createdAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("created-at", prefix))
	if err != nil {
		return paths, err
	}
	if createdAtSelect && createdAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("created-at", prefix)))
	}
	updatedAt, updatedAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("updated-at", prefix))
	if err != nil {
		return paths, err
	}
	if updatedAtSelect && updatedAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("updated-at", prefix)))
	}
	packageName, packageNameSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("package-name", prefix))
	if err != nil {
		return paths, err
	}
	if packageNameSelect && packageName {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("package-name", prefix)))
	}
	data, dataSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("data", prefix))
	if err != nil {
		return paths, err
	}
	if dataSelect && data {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("data", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForApplicationPackageDefaultAssociation adds flags to select fields in ApplicationPackageDefaultAssociation.
func AddSetFlagsForApplicationPackageDefaultAssociation(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForApplicationPackageDefaultAssociationIdentifiers(flags, flagsplugin.Prefix("ids", prefix))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("created-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("updated-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("package-name", prefix), ""))
	// FIXME: Skipping Data because this WKT is currently not supported.
}

// SetFromFlags sets the ApplicationPackageDefaultAssociation message from flags.
func (m *ApplicationPackageDefaultAssociation) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	idsSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ids", prefix))
	if idsSet {
		m.Ids = &ApplicationPackageDefaultAssociationIdentifiers{}
		if setPaths, err := m.Ids.SetFromFlags(flags, flagsplugin.Prefix("ids", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	createdAt, createdAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("created-at", prefix))
	if err != nil {
		return paths, err
	}
	if createdAtSet {
		m.CreatedAt = gogo.SetTimestamp(createdAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("created-at", prefix)))
	}
	updatedAt, updatedAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("updated-at", prefix))
	if err != nil {
		return paths, err
	}
	if updatedAtSet {
		m.UpdatedAt = gogo.SetTimestamp(updatedAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("updated-at", prefix)))
	}
	packageName, packageNameSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("package-name", prefix))
	if err != nil {
		return paths, err
	}
	if packageNameSet {
		m.PackageName = packageName
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("package-name", prefix)))
	}
	// FIXME: Skipping Data because this WKT is not supported.
	return paths, nil
}
