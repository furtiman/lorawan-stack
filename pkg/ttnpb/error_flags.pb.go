// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v0.0.0-dev
// - protoc              v3.17.3
// source: lorawan-stack/api/error.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	pflag "github.com/spf13/pflag"
)

// AddSelectFlagsForErrorDetails adds flags to select fields in ErrorDetails.
func AddSelectFlagsForErrorDetails(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("namespace", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("namespace", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("name", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("name", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("message-format", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("message-format", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("attributes", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("attributes", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("correlation-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("correlation-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("cause", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("cause", prefix), true)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("code", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("code", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("details", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("details", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forErrorDetails message from select flags.
func PathsFromSelectFlagsForErrorDetails(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	namespace, namespaceSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("namespace", prefix))
	if err != nil {
		return paths, err
	}
	if namespaceSelect && namespace {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("namespace", prefix)))
	}
	name, nameSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("name", prefix))
	if err != nil {
		return paths, err
	}
	if nameSelect && name {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("name", prefix)))
	}
	messageFormat, messageFormatSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("message-format", prefix))
	if err != nil {
		return paths, err
	}
	if messageFormatSelect && messageFormat {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("message-format", prefix)))
	}
	attributes, attributesSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("attributes", prefix))
	if err != nil {
		return paths, err
	}
	if attributesSelect && attributes {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("attributes", prefix)))
	}
	correlationId, correlationIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("correlation-id", prefix))
	if err != nil {
		return paths, err
	}
	if correlationIdSelect && correlationId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("correlation-id", prefix)))
	}
	cause, causeSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("cause", prefix))
	if err != nil {
		return paths, err
	}
	if causeSelect && cause {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("cause", prefix)))
	}
	code, codeSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("code", prefix))
	if err != nil {
		return paths, err
	}
	if codeSelect && code {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("code", prefix)))
	}
	details, detailsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("details", prefix))
	if err != nil {
		return paths, err
	}
	if detailsSelect && details {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("details", prefix)))
	}
	return paths, nil
}
