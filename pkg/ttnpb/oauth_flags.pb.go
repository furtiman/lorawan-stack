// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v0.0.0-dev
// - protoc              v3.17.3
// source: lorawan-stack/api/oauth.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	gogo "github.com/TheThingsIndustries/protoc-gen-go-flags/gogo"
	pflag "github.com/spf13/pflag"
)

// AddSelectFlagsForOAuthClientAuthorizationIdentifiers adds flags to select fields in OAuthClientAuthorizationIdentifiers.
func AddSelectFlagsForOAuthClientAuthorizationIdentifiers(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("user-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("user-ids", prefix), true)))
	AddSelectFlagsForUserIdentifiers(flags, flagsplugin.Prefix("user-ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("client-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("client-ids", prefix), true)))
	AddSelectFlagsForClientIdentifiers(flags, flagsplugin.Prefix("client-ids", prefix))
}

// SelectFromFlags outputs the fieldmask paths forOAuthClientAuthorizationIdentifiers message from select flags.
func PathsFromSelectFlagsForOAuthClientAuthorizationIdentifiers(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("user_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("user_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForUserIdentifiers(flags, flagsplugin.Prefix("user_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("client_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("client_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForClientIdentifiers(flags, flagsplugin.Prefix("client_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSetFlagsForOAuthClientAuthorizationIdentifiers adds flags to select fields in OAuthClientAuthorizationIdentifiers.
func AddSetFlagsForOAuthClientAuthorizationIdentifiers(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForUserIdentifiers(flags, flagsplugin.Prefix("user-ids", prefix))
	AddSetFlagsForClientIdentifiers(flags, flagsplugin.Prefix("client-ids", prefix))
}

// SetFromFlags sets the OAuthClientAuthorizationIdentifiers message from flags.
func (m *OAuthClientAuthorizationIdentifiers) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("user_ids", prefix)); selected {
		m.UserIds = &UserIdentifiers{}
		if setPaths, err := m.UserIds.SetFromFlags(flags, flagsplugin.Prefix("user_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("client_ids", prefix)); selected {
		m.ClientIds = &ClientIdentifiers{}
		if setPaths, err := m.ClientIds.SetFromFlags(flags, flagsplugin.Prefix("client_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	return paths, nil
}

// AddSelectFlagsForOAuthClientAuthorization adds flags to select fields in OAuthClientAuthorization.
func AddSelectFlagsForOAuthClientAuthorization(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("user-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("user-ids", prefix), true)))
	AddSelectFlagsForUserIdentifiers(flags, flagsplugin.Prefix("user-ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("client-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("client-ids", prefix), true)))
	AddSelectFlagsForClientIdentifiers(flags, flagsplugin.Prefix("client-ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rights", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rights", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("created-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("created-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("updated-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("updated-at", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forOAuthClientAuthorization message from select flags.
func PathsFromSelectFlagsForOAuthClientAuthorization(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("user_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("user_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForUserIdentifiers(flags, flagsplugin.Prefix("user_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("client_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("client_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForClientIdentifiers(flags, flagsplugin.Prefix("client_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rights", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rights", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("created_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("created_at", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("updated_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("updated_at", prefix))
	}
	return paths, nil
}

// AddSetFlagsForOAuthClientAuthorization adds flags to select fields in OAuthClientAuthorization.
func AddSetFlagsForOAuthClientAuthorization(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForUserIdentifiers(flags, flagsplugin.Prefix("user-ids", prefix))
	AddSetFlagsForClientIdentifiers(flags, flagsplugin.Prefix("client-ids", prefix))
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("rights", prefix), ""))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("created-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("updated-at", prefix), ""))
}

// SetFromFlags sets the OAuthClientAuthorization message from flags.
func (m *OAuthClientAuthorization) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("user_ids", prefix)); selected {
		m.UserIds = &UserIdentifiers{}
		if setPaths, err := m.UserIds.SetFromFlags(flags, flagsplugin.Prefix("user_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("client_ids", prefix)); selected {
		m.ClientIds = &ClientIdentifiers{}
		if setPaths, err := m.ClientIds.SetFromFlags(flags, flagsplugin.Prefix("client_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, selected, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("rights", prefix)); err != nil {
		return nil, err
	} else if selected {
		for _, v := range val {
			enumValue, err := flagsplugin.SetEnumString(v, Right_value)
			if err != nil {
				return nil, err
			}
			m.Rights = append(m.Rights, Right(enumValue))
		}
		paths = append(paths, flagsplugin.Prefix("rights", prefix))
	}
	if val, selected, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("created_at", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.CreatedAt = gogo.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("created_at", prefix))
	}
	if val, selected, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("updated_at", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.UpdatedAt = gogo.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("updated_at", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForOAuthClientAuthorizations adds flags to select fields in OAuthClientAuthorizations.
func AddSelectFlagsForOAuthClientAuthorizations(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("authorizations", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("authorizations", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forOAuthClientAuthorizations message from select flags.
func PathsFromSelectFlagsForOAuthClientAuthorizations(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("authorizations", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("authorizations", prefix))
	}
	return paths, nil
}

// AddSetFlagsForOAuthClientAuthorizations adds flags to select fields in OAuthClientAuthorizations.
func AddSetFlagsForOAuthClientAuthorizations(flags *pflag.FlagSet, prefix string) {
	// FIXME: Skipping Authorizations because repeated messages are currently not supported.
}

// SetFromFlags sets the OAuthClientAuthorizations message from flags.
func (m *OAuthClientAuthorizations) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	// FIXME: Skipping Authorizations because it does not seem to implement AddSetFlags.
	return paths, nil
}

// AddSelectFlagsForListOAuthClientAuthorizationsRequest adds flags to select fields in ListOAuthClientAuthorizationsRequest.
func AddSelectFlagsForListOAuthClientAuthorizationsRequest(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("user-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("user-ids", prefix), true)))
	AddSelectFlagsForUserIdentifiers(flags, flagsplugin.Prefix("user-ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("order", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("order", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("limit", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("limit", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("page", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("page", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forListOAuthClientAuthorizationsRequest message from select flags.
func PathsFromSelectFlagsForListOAuthClientAuthorizationsRequest(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("user_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("user_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForUserIdentifiers(flags, flagsplugin.Prefix("user_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("order", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("order", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("limit", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("limit", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("page", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("page", prefix))
	}
	return paths, nil
}

// AddSetFlagsForListOAuthClientAuthorizationsRequest adds flags to select fields in ListOAuthClientAuthorizationsRequest.
func AddSetFlagsForListOAuthClientAuthorizationsRequest(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForUserIdentifiers(flags, flagsplugin.Prefix("user-ids", prefix))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("order", prefix), ""))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("limit", prefix), ""))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("page", prefix), ""))
}

// SetFromFlags sets the ListOAuthClientAuthorizationsRequest message from flags.
func (m *ListOAuthClientAuthorizationsRequest) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("user_ids", prefix)); selected {
		m.UserIds = &UserIdentifiers{}
		if setPaths, err := m.UserIds.SetFromFlags(flags, flagsplugin.Prefix("user_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("order", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.Order = val
		paths = append(paths, flagsplugin.Prefix("order", prefix))
	}
	if val, selected, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("limit", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.Limit = val
		paths = append(paths, flagsplugin.Prefix("limit", prefix))
	}
	if val, selected, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("page", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.Page = val
		paths = append(paths, flagsplugin.Prefix("page", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForOAuthAuthorizationCode adds flags to select fields in OAuthAuthorizationCode.
func AddSelectFlagsForOAuthAuthorizationCode(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("user-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("user-ids", prefix), true)))
	AddSelectFlagsForUserIdentifiers(flags, flagsplugin.Prefix("user-ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("user-session-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("user-session-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("client-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("client-ids", prefix), true)))
	AddSelectFlagsForClientIdentifiers(flags, flagsplugin.Prefix("client-ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rights", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rights", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("code", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("code", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("redirect-uri", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("redirect-uri", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("state", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("state", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("created-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("created-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("expires-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("expires-at", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forOAuthAuthorizationCode message from select flags.
func PathsFromSelectFlagsForOAuthAuthorizationCode(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("user_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("user_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForUserIdentifiers(flags, flagsplugin.Prefix("user_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("user_session_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("user_session_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("client_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("client_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForClientIdentifiers(flags, flagsplugin.Prefix("client_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rights", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rights", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("code", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("code", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("redirect_uri", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("redirect_uri", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("state", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("state", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("created_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("created_at", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("expires_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("expires_at", prefix))
	}
	return paths, nil
}

// AddSetFlagsForOAuthAuthorizationCode adds flags to select fields in OAuthAuthorizationCode.
func AddSetFlagsForOAuthAuthorizationCode(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForUserIdentifiers(flags, flagsplugin.Prefix("user-ids", prefix))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("user-session-id", prefix), ""))
	AddSetFlagsForClientIdentifiers(flags, flagsplugin.Prefix("client-ids", prefix))
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("rights", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("code", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("redirect-uri", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("state", prefix), ""))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("created-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("expires-at", prefix), ""))
}

// SetFromFlags sets the OAuthAuthorizationCode message from flags.
func (m *OAuthAuthorizationCode) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("user_ids", prefix)); selected {
		m.UserIds = &UserIdentifiers{}
		if setPaths, err := m.UserIds.SetFromFlags(flags, flagsplugin.Prefix("user_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("user_session_id", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.UserSessionId = val
		paths = append(paths, flagsplugin.Prefix("user_session_id", prefix))
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("client_ids", prefix)); selected {
		m.ClientIds = &ClientIdentifiers{}
		if setPaths, err := m.ClientIds.SetFromFlags(flags, flagsplugin.Prefix("client_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, selected, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("rights", prefix)); err != nil {
		return nil, err
	} else if selected {
		for _, v := range val {
			enumValue, err := flagsplugin.SetEnumString(v, Right_value)
			if err != nil {
				return nil, err
			}
			m.Rights = append(m.Rights, Right(enumValue))
		}
		paths = append(paths, flagsplugin.Prefix("rights", prefix))
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("code", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.Code = val
		paths = append(paths, flagsplugin.Prefix("code", prefix))
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("redirect_uri", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.RedirectUri = val
		paths = append(paths, flagsplugin.Prefix("redirect_uri", prefix))
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("state", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.State = val
		paths = append(paths, flagsplugin.Prefix("state", prefix))
	}
	if val, selected, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("created_at", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.CreatedAt = gogo.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("created_at", prefix))
	}
	if val, selected, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("expires_at", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.ExpiresAt = gogo.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("expires_at", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForOAuthAccessTokenIdentifiers adds flags to select fields in OAuthAccessTokenIdentifiers.
func AddSelectFlagsForOAuthAccessTokenIdentifiers(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("user-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("user-ids", prefix), true)))
	AddSelectFlagsForUserIdentifiers(flags, flagsplugin.Prefix("user-ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("client-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("client-ids", prefix), true)))
	AddSelectFlagsForClientIdentifiers(flags, flagsplugin.Prefix("client-ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("id", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forOAuthAccessTokenIdentifiers message from select flags.
func PathsFromSelectFlagsForOAuthAccessTokenIdentifiers(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("user_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("user_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForUserIdentifiers(flags, flagsplugin.Prefix("user_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("client_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("client_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForClientIdentifiers(flags, flagsplugin.Prefix("client_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("id", prefix))
	}
	return paths, nil
}

// AddSetFlagsForOAuthAccessTokenIdentifiers adds flags to select fields in OAuthAccessTokenIdentifiers.
func AddSetFlagsForOAuthAccessTokenIdentifiers(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForUserIdentifiers(flags, flagsplugin.Prefix("user-ids", prefix))
	AddSetFlagsForClientIdentifiers(flags, flagsplugin.Prefix("client-ids", prefix))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("id", prefix), ""))
}

// SetFromFlags sets the OAuthAccessTokenIdentifiers message from flags.
func (m *OAuthAccessTokenIdentifiers) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("user_ids", prefix)); selected {
		m.UserIds = &UserIdentifiers{}
		if setPaths, err := m.UserIds.SetFromFlags(flags, flagsplugin.Prefix("user_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("client_ids", prefix)); selected {
		m.ClientIds = &ClientIdentifiers{}
		if setPaths, err := m.ClientIds.SetFromFlags(flags, flagsplugin.Prefix("client_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("id", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.Id = val
		paths = append(paths, flagsplugin.Prefix("id", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForOAuthAccessToken adds flags to select fields in OAuthAccessToken.
func AddSelectFlagsForOAuthAccessToken(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("user-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("user-ids", prefix), true)))
	AddSelectFlagsForUserIdentifiers(flags, flagsplugin.Prefix("user-ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("user-session-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("user-session-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("client-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("client-ids", prefix), true)))
	AddSelectFlagsForClientIdentifiers(flags, flagsplugin.Prefix("client-ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("access-token", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("access-token", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("refresh-token", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("refresh-token", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rights", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rights", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("created-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("created-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("expires-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("expires-at", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forOAuthAccessToken message from select flags.
func PathsFromSelectFlagsForOAuthAccessToken(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("user_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("user_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForUserIdentifiers(flags, flagsplugin.Prefix("user_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("user_session_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("user_session_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("client_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("client_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForClientIdentifiers(flags, flagsplugin.Prefix("client_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("access_token", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("access_token", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("refresh_token", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("refresh_token", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rights", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rights", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("created_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("created_at", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("expires_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("expires_at", prefix))
	}
	return paths, nil
}

// AddSetFlagsForOAuthAccessToken adds flags to select fields in OAuthAccessToken.
func AddSetFlagsForOAuthAccessToken(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForUserIdentifiers(flags, flagsplugin.Prefix("user-ids", prefix))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("user-session-id", prefix), ""))
	AddSetFlagsForClientIdentifiers(flags, flagsplugin.Prefix("client-ids", prefix))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("id", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("access-token", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("refresh-token", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("rights", prefix), ""))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("created-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("expires-at", prefix), ""))
}

// SetFromFlags sets the OAuthAccessToken message from flags.
func (m *OAuthAccessToken) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("user_ids", prefix)); selected {
		m.UserIds = &UserIdentifiers{}
		if setPaths, err := m.UserIds.SetFromFlags(flags, flagsplugin.Prefix("user_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("user_session_id", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.UserSessionId = val
		paths = append(paths, flagsplugin.Prefix("user_session_id", prefix))
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("client_ids", prefix)); selected {
		m.ClientIds = &ClientIdentifiers{}
		if setPaths, err := m.ClientIds.SetFromFlags(flags, flagsplugin.Prefix("client_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("id", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.Id = val
		paths = append(paths, flagsplugin.Prefix("id", prefix))
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("access_token", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.AccessToken = val
		paths = append(paths, flagsplugin.Prefix("access_token", prefix))
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("refresh_token", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.RefreshToken = val
		paths = append(paths, flagsplugin.Prefix("refresh_token", prefix))
	}
	if val, selected, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("rights", prefix)); err != nil {
		return nil, err
	} else if selected {
		for _, v := range val {
			enumValue, err := flagsplugin.SetEnumString(v, Right_value)
			if err != nil {
				return nil, err
			}
			m.Rights = append(m.Rights, Right(enumValue))
		}
		paths = append(paths, flagsplugin.Prefix("rights", prefix))
	}
	if val, selected, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("created_at", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.CreatedAt = gogo.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("created_at", prefix))
	}
	if val, selected, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("expires_at", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.ExpiresAt = gogo.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("expires_at", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForOAuthAccessTokens adds flags to select fields in OAuthAccessTokens.
func AddSelectFlagsForOAuthAccessTokens(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("tokens", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("tokens", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forOAuthAccessTokens message from select flags.
func PathsFromSelectFlagsForOAuthAccessTokens(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("tokens", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("tokens", prefix))
	}
	return paths, nil
}

// AddSetFlagsForOAuthAccessTokens adds flags to select fields in OAuthAccessTokens.
func AddSetFlagsForOAuthAccessTokens(flags *pflag.FlagSet, prefix string) {
	// FIXME: Skipping Tokens because repeated messages are currently not supported.
}

// SetFromFlags sets the OAuthAccessTokens message from flags.
func (m *OAuthAccessTokens) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	// FIXME: Skipping Tokens because it does not seem to implement AddSetFlags.
	return paths, nil
}

// AddSelectFlagsForListOAuthAccessTokensRequest adds flags to select fields in ListOAuthAccessTokensRequest.
func AddSelectFlagsForListOAuthAccessTokensRequest(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("user-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("user-ids", prefix), true)))
	AddSelectFlagsForUserIdentifiers(flags, flagsplugin.Prefix("user-ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("client-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("client-ids", prefix), true)))
	AddSelectFlagsForClientIdentifiers(flags, flagsplugin.Prefix("client-ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("order", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("order", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("limit", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("limit", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("page", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("page", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forListOAuthAccessTokensRequest message from select flags.
func PathsFromSelectFlagsForListOAuthAccessTokensRequest(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("user_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("user_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForUserIdentifiers(flags, flagsplugin.Prefix("user_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("client_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("client_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForClientIdentifiers(flags, flagsplugin.Prefix("client_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("order", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("order", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("limit", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("limit", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("page", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("page", prefix))
	}
	return paths, nil
}

// AddSetFlagsForListOAuthAccessTokensRequest adds flags to select fields in ListOAuthAccessTokensRequest.
func AddSetFlagsForListOAuthAccessTokensRequest(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForUserIdentifiers(flags, flagsplugin.Prefix("user-ids", prefix))
	AddSetFlagsForClientIdentifiers(flags, flagsplugin.Prefix("client-ids", prefix))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("order", prefix), ""))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("limit", prefix), ""))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("page", prefix), ""))
}

// SetFromFlags sets the ListOAuthAccessTokensRequest message from flags.
func (m *ListOAuthAccessTokensRequest) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("user_ids", prefix)); selected {
		m.UserIds = &UserIdentifiers{}
		if setPaths, err := m.UserIds.SetFromFlags(flags, flagsplugin.Prefix("user_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("client_ids", prefix)); selected {
		m.ClientIds = &ClientIdentifiers{}
		if setPaths, err := m.ClientIds.SetFromFlags(flags, flagsplugin.Prefix("client_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("order", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.Order = val
		paths = append(paths, flagsplugin.Prefix("order", prefix))
	}
	if val, selected, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("limit", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.Limit = val
		paths = append(paths, flagsplugin.Prefix("limit", prefix))
	}
	if val, selected, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("page", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.Page = val
		paths = append(paths, flagsplugin.Prefix("page", prefix))
	}
	return paths, nil
}
