// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v0.0.0-dev
// - protoc              v3.17.3
// source: lorawan-stack/api/gateway.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	gogo "github.com/TheThingsIndustries/protoc-gen-go-flags/gogo"
	pflag "github.com/spf13/pflag"
)

// AddSelectFlagsForGatewayVersionIdentifiers adds flags to select fields in GatewayVersionIdentifiers.
func AddSelectFlagsForGatewayVersionIdentifiers(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("brand-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("brand-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("model-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("model-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("hardware-version", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("hardware-version", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("firmware-version", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("firmware-version", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forGatewayVersionIdentifiers message from select flags.
func PathsFromSelectFlagsForGatewayVersionIdentifiers(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	brandId, brandIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("brand-id", prefix))
	if err != nil {
		return paths, err
	}
	if brandIdSelect && brandId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("brand-id", prefix)))
	}
	modelId, modelIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("model-id", prefix))
	if err != nil {
		return paths, err
	}
	if modelIdSelect && modelId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("model-id", prefix)))
	}
	hardwareVersion, hardwareVersionSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("hardware-version", prefix))
	if err != nil {
		return paths, err
	}
	if hardwareVersionSelect && hardwareVersion {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("hardware-version", prefix)))
	}
	firmwareVersion, firmwareVersionSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("firmware-version", prefix))
	if err != nil {
		return paths, err
	}
	if firmwareVersionSelect && firmwareVersion {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("firmware-version", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForGatewayVersionIdentifiers adds flags to select fields in GatewayVersionIdentifiers.
func AddSetFlagsForGatewayVersionIdentifiers(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("brand-id", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("model-id", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("hardware-version", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("firmware-version", prefix), ""))
}

// SetFromFlags sets the GatewayVersionIdentifiers message from flags.
func (m *GatewayVersionIdentifiers) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	brandId, brandIdSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("brand-id", prefix))
	if err != nil {
		return paths, err
	}
	if brandIdSet {
		m.BrandId = brandId
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("brand-id", prefix)))
	}
	modelId, modelIdSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("model-id", prefix))
	if err != nil {
		return paths, err
	}
	if modelIdSet {
		m.ModelId = modelId
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("model-id", prefix)))
	}
	hardwareVersion, hardwareVersionSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("hardware-version", prefix))
	if err != nil {
		return paths, err
	}
	if hardwareVersionSet {
		m.HardwareVersion = hardwareVersion
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("hardware-version", prefix)))
	}
	firmwareVersion, firmwareVersionSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("firmware-version", prefix))
	if err != nil {
		return paths, err
	}
	if firmwareVersionSet {
		m.FirmwareVersion = firmwareVersion
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("firmware-version", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForGatewayClaimAuthenticationCode adds flags to select fields in GatewayClaimAuthenticationCode.
func AddSelectFlagsForGatewayClaimAuthenticationCode(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("secret", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("secret", prefix), true)))
	AddSelectFlagsForSecret(flags, flagsplugin.Prefix("secret", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("valid-from", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("valid-from", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("valid-to", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("valid-to", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forGatewayClaimAuthenticationCode message from select flags.
func PathsFromSelectFlagsForGatewayClaimAuthenticationCode(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	secret, secretSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("secret", prefix))
	if err != nil {
		return paths, err
	}
	if secretSelect && secret {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("secret", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForSecret(flags, flagsplugin.Prefix("secret", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	validFrom, validFromSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("valid-from", prefix))
	if err != nil {
		return paths, err
	}
	if validFromSelect && validFrom {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("valid-from", prefix)))
	}
	validTo, validToSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("valid-to", prefix))
	if err != nil {
		return paths, err
	}
	if validToSelect && validTo {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("valid-to", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForGatewayClaimAuthenticationCode adds flags to select fields in GatewayClaimAuthenticationCode.
func AddSetFlagsForGatewayClaimAuthenticationCode(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForSecret(flags, flagsplugin.Prefix("secret", prefix))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("valid-from", prefix), ""))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("valid-to", prefix), ""))
}

// SetFromFlags sets the GatewayClaimAuthenticationCode message from flags.
func (m *GatewayClaimAuthenticationCode) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	secretSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("secret", prefix))
	if secretSet {
		m.Secret = &Secret{}
		if setPaths, err := m.Secret.SetFromFlags(flags, flagsplugin.Prefix("secret", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	validFrom, validFromSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("valid-from", prefix))
	if err != nil {
		return paths, err
	}
	if validFromSet {
		m.ValidFrom = gogo.SetTimestamp(validFrom)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("valid-from", prefix)))
	}
	validTo, validToSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("valid-to", prefix))
	if err != nil {
		return paths, err
	}
	if validToSet {
		m.ValidTo = gogo.SetTimestamp(validTo)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("valid-to", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForGateway_LRFHSS adds flags to select fields in Gateway_LRFHSS.
func AddSelectFlagsForGateway_LRFHSS(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("supported", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("supported", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forGateway_LRFHSS message from select flags.
func PathsFromSelectFlagsForGateway_LRFHSS(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	supported, supportedSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("supported", prefix))
	if err != nil {
		return paths, err
	}
	if supportedSelect && supported {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("supported", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForGateway_LRFHSS adds flags to select fields in Gateway_LRFHSS.
func AddSetFlagsForGateway_LRFHSS(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("supported", prefix), ""))
}

// SetFromFlags sets the Gateway_LRFHSS message from flags.
func (m *Gateway_LRFHSS) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	supported, supportedSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("supported", prefix))
	if err != nil {
		return paths, err
	}
	if supportedSet {
		m.Supported = supported
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("supported", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForGateway adds flags to select fields in Gateway.
func AddSelectFlagsForGateway(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ids", prefix), true)))
	AddSelectFlagsForGatewayIdentifiers(flags, flagsplugin.Prefix("ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("created-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("created-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("updated-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("updated-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("deleted-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("deleted-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("name", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("name", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("description", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("description", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("attributes", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("attributes", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("contact-info", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("contact-info", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("administrative-contact", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("administrative-contact", prefix), true)))
	AddSelectFlagsForOrganizationOrUserIdentifiers(flags, flagsplugin.Prefix("administrative-contact", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("technical-contact", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("technical-contact", prefix), true)))
	AddSelectFlagsForOrganizationOrUserIdentifiers(flags, flagsplugin.Prefix("technical-contact", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("version-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("version-ids", prefix), true)))
	AddSelectFlagsForGatewayVersionIdentifiers(flags, flagsplugin.Prefix("version-ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("gateway-server-address", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("gateway-server-address", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("auto-update", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("auto-update", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("update-channel", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("update-channel", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("frequency-plan-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("frequency-plan-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("frequency-plan-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("frequency-plan-ids", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("antennas", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("antennas", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("status-public", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("status-public", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("location-public", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("location-public", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("schedule-downlink-late", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("schedule-downlink-late", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("enforce-duty-cycle", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("enforce-duty-cycle", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-path-constraint", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-path-constraint", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("schedule-anytime-delay", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("schedule-anytime-delay", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("update-location-from-status", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("update-location-from-status", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("lbs-lns-secret", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("lbs-lns-secret", prefix), true)))
	AddSelectFlagsForSecret(flags, flagsplugin.Prefix("lbs-lns-secret", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("claim-authentication-code", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("claim-authentication-code", prefix), true)))
	AddSelectFlagsForGatewayClaimAuthenticationCode(flags, flagsplugin.Prefix("claim-authentication-code", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("target-cups-uri", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("target-cups-uri", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("target-cups-key", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("target-cups-key", prefix), true)))
	AddSelectFlagsForSecret(flags, flagsplugin.Prefix("target-cups-key", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("require-authenticated-connection", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("require-authenticated-connection", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("lrfhss", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("lrfhss", prefix), true)))
	AddSelectFlagsForGateway_LRFHSS(flags, flagsplugin.Prefix("lrfhss", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("disable-packet-broker-forwarding", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("disable-packet-broker-forwarding", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forGateway message from select flags.
func PathsFromSelectFlagsForGateway(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	ids, idsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ids", prefix))
	if err != nil {
		return paths, err
	}
	if idsSelect && ids {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("ids", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForGatewayIdentifiers(flags, flagsplugin.Prefix("ids", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	createdAt, createdAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("created-at", prefix))
	if err != nil {
		return paths, err
	}
	if createdAtSelect && createdAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("created-at", prefix)))
	}
	updatedAt, updatedAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("updated-at", prefix))
	if err != nil {
		return paths, err
	}
	if updatedAtSelect && updatedAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("updated-at", prefix)))
	}
	deletedAt, deletedAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("deleted-at", prefix))
	if err != nil {
		return paths, err
	}
	if deletedAtSelect && deletedAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("deleted-at", prefix)))
	}
	name, nameSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("name", prefix))
	if err != nil {
		return paths, err
	}
	if nameSelect && name {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("name", prefix)))
	}
	description, descriptionSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("description", prefix))
	if err != nil {
		return paths, err
	}
	if descriptionSelect && description {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("description", prefix)))
	}
	attributes, attributesSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("attributes", prefix))
	if err != nil {
		return paths, err
	}
	if attributesSelect && attributes {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("attributes", prefix)))
	}
	contactInfo, contactInfoSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("contact-info", prefix))
	if err != nil {
		return paths, err
	}
	if contactInfoSelect && contactInfo {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("contact-info", prefix)))
	}
	administrativeContact, administrativeContactSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("administrative-contact", prefix))
	if err != nil {
		return paths, err
	}
	if administrativeContactSelect && administrativeContact {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("administrative-contact", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForOrganizationOrUserIdentifiers(flags, flagsplugin.Prefix("administrative-contact", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	technicalContact, technicalContactSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("technical-contact", prefix))
	if err != nil {
		return paths, err
	}
	if technicalContactSelect && technicalContact {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("technical-contact", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForOrganizationOrUserIdentifiers(flags, flagsplugin.Prefix("technical-contact", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	versionIds, versionIdsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("version-ids", prefix))
	if err != nil {
		return paths, err
	}
	if versionIdsSelect && versionIds {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("version-ids", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForGatewayVersionIdentifiers(flags, flagsplugin.Prefix("version-ids", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	gatewayServerAddress, gatewayServerAddressSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("gateway-server-address", prefix))
	if err != nil {
		return paths, err
	}
	if gatewayServerAddressSelect && gatewayServerAddress {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("gateway-server-address", prefix)))
	}
	autoUpdate, autoUpdateSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("auto-update", prefix))
	if err != nil {
		return paths, err
	}
	if autoUpdateSelect && autoUpdate {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("auto-update", prefix)))
	}
	updateChannel, updateChannelSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("update-channel", prefix))
	if err != nil {
		return paths, err
	}
	if updateChannelSelect && updateChannel {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("update-channel", prefix)))
	}
	frequencyPlanId, frequencyPlanIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("frequency-plan-id", prefix))
	if err != nil {
		return paths, err
	}
	if frequencyPlanIdSelect && frequencyPlanId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("frequency-plan-id", prefix)))
	}
	frequencyPlanIds, frequencyPlanIdsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("frequency-plan-ids", prefix))
	if err != nil {
		return paths, err
	}
	if frequencyPlanIdsSelect && frequencyPlanIds {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("frequency-plan-ids", prefix)))
	}
	antennas, antennasSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("antennas", prefix))
	if err != nil {
		return paths, err
	}
	if antennasSelect && antennas {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("antennas", prefix)))
	}
	statusPublic, statusPublicSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("status-public", prefix))
	if err != nil {
		return paths, err
	}
	if statusPublicSelect && statusPublic {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("status-public", prefix)))
	}
	locationPublic, locationPublicSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("location-public", prefix))
	if err != nil {
		return paths, err
	}
	if locationPublicSelect && locationPublic {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("location-public", prefix)))
	}
	scheduleDownlinkLate, scheduleDownlinkLateSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("schedule-downlink-late", prefix))
	if err != nil {
		return paths, err
	}
	if scheduleDownlinkLateSelect && scheduleDownlinkLate {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("schedule-downlink-late", prefix)))
	}
	enforceDutyCycle, enforceDutyCycleSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("enforce-duty-cycle", prefix))
	if err != nil {
		return paths, err
	}
	if enforceDutyCycleSelect && enforceDutyCycle {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("enforce-duty-cycle", prefix)))
	}
	downlinkPathConstraint, downlinkPathConstraintSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink-path-constraint", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkPathConstraintSelect && downlinkPathConstraint {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("downlink-path-constraint", prefix)))
	}
	scheduleAnytimeDelay, scheduleAnytimeDelaySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("schedule-anytime-delay", prefix))
	if err != nil {
		return paths, err
	}
	if scheduleAnytimeDelaySelect && scheduleAnytimeDelay {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("schedule-anytime-delay", prefix)))
	}
	updateLocationFromStatus, updateLocationFromStatusSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("update-location-from-status", prefix))
	if err != nil {
		return paths, err
	}
	if updateLocationFromStatusSelect && updateLocationFromStatus {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("update-location-from-status", prefix)))
	}
	lbsLnsSecret, lbsLnsSecretSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("lbs-lns-secret", prefix))
	if err != nil {
		return paths, err
	}
	if lbsLnsSecretSelect && lbsLnsSecret {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("lbs-lns-secret", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForSecret(flags, flagsplugin.Prefix("lbs-lns-secret", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	claimAuthenticationCode, claimAuthenticationCodeSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("claim-authentication-code", prefix))
	if err != nil {
		return paths, err
	}
	if claimAuthenticationCodeSelect && claimAuthenticationCode {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("claim-authentication-code", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForGatewayClaimAuthenticationCode(flags, flagsplugin.Prefix("claim-authentication-code", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	targetCupsUri, targetCupsUriSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("target-cups-uri", prefix))
	if err != nil {
		return paths, err
	}
	if targetCupsUriSelect && targetCupsUri {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("target-cups-uri", prefix)))
	}
	targetCupsKey, targetCupsKeySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("target-cups-key", prefix))
	if err != nil {
		return paths, err
	}
	if targetCupsKeySelect && targetCupsKey {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("target-cups-key", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForSecret(flags, flagsplugin.Prefix("target-cups-key", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	requireAuthenticatedConnection, requireAuthenticatedConnectionSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("require-authenticated-connection", prefix))
	if err != nil {
		return paths, err
	}
	if requireAuthenticatedConnectionSelect && requireAuthenticatedConnection {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("require-authenticated-connection", prefix)))
	}
	lrfhss, lrfhssSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("lrfhss", prefix))
	if err != nil {
		return paths, err
	}
	if lrfhssSelect && lrfhss {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("lrfhss", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForGateway_LRFHSS(flags, flagsplugin.Prefix("lrfhss", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	disablePacketBrokerForwarding, disablePacketBrokerForwardingSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("disable-packet-broker-forwarding", prefix))
	if err != nil {
		return paths, err
	}
	if disablePacketBrokerForwardingSelect && disablePacketBrokerForwarding {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("disable-packet-broker-forwarding", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForGateway adds flags to select fields in Gateway.
func AddSetFlagsForGateway(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForGatewayIdentifiers(flags, flagsplugin.Prefix("ids", prefix))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("created-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("updated-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("deleted-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("name", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("description", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringStringMapFlag(flagsplugin.Prefix("attributes", prefix), ""))
	// FIXME: Skipping ContactInfo because repeated messages are currently not supported.
	AddSetFlagsForOrganizationOrUserIdentifiers(flags, flagsplugin.Prefix("administrative-contact", prefix))
	AddSetFlagsForOrganizationOrUserIdentifiers(flags, flagsplugin.Prefix("technical-contact", prefix))
	AddSetFlagsForGatewayVersionIdentifiers(flags, flagsplugin.Prefix("version-ids", prefix))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("gateway-server-address", prefix), ""))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("auto-update", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("update-channel", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("frequency-plan-id", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("frequency-plan-ids", prefix), ""))
	// FIXME: Skipping Antennas because repeated messages are currently not supported.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("status-public", prefix), ""))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("location-public", prefix), ""))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("schedule-downlink-late", prefix), ""))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("enforce-duty-cycle", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("downlink-path-constraint", prefix), flagsplugin.EnumValueDesc(DownlinkPathConstraint_value)))
	flags.AddFlag(flagsplugin.NewDurationFlag(flagsplugin.Prefix("schedule-anytime-delay", prefix), ""))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("update-location-from-status", prefix), ""))
	AddSetFlagsForSecret(flags, flagsplugin.Prefix("lbs-lns-secret", prefix))
	AddSetFlagsForGatewayClaimAuthenticationCode(flags, flagsplugin.Prefix("claim-authentication-code", prefix))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("target-cups-uri", prefix), ""))
	AddSetFlagsForSecret(flags, flagsplugin.Prefix("target-cups-key", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("require-authenticated-connection", prefix), ""))
	AddSetFlagsForGateway_LRFHSS(flags, flagsplugin.Prefix("lrfhss", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("disable-packet-broker-forwarding", prefix), ""))
}

// SetFromFlags sets the Gateway message from flags.
func (m *Gateway) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	idsSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ids", prefix))
	if idsSet {
		m.Ids = &GatewayIdentifiers{}
		if setPaths, err := m.Ids.SetFromFlags(flags, flagsplugin.Prefix("ids", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	createdAt, createdAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("created-at", prefix))
	if err != nil {
		return paths, err
	}
	if createdAtSet {
		m.CreatedAt = gogo.SetTimestamp(createdAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("created-at", prefix)))
	}
	updatedAt, updatedAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("updated-at", prefix))
	if err != nil {
		return paths, err
	}
	if updatedAtSet {
		m.UpdatedAt = gogo.SetTimestamp(updatedAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("updated-at", prefix)))
	}
	deletedAt, deletedAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("deleted-at", prefix))
	if err != nil {
		return paths, err
	}
	if deletedAtSet {
		m.DeletedAt = gogo.SetTimestamp(deletedAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("deleted-at", prefix)))
	}
	name, nameSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("name", prefix))
	if err != nil {
		return paths, err
	}
	if nameSet {
		m.Name = name
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("name", prefix)))
	}
	description, descriptionSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("description", prefix))
	if err != nil {
		return paths, err
	}
	if descriptionSet {
		m.Description = description
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("description", prefix)))
	}
	attributes, attributesSet, err := flagsplugin.GetStringStringMap(flags, flagsplugin.Prefix("attributes", prefix))
	if err != nil {
		return paths, err
	}
	if attributesSet {
		m.Attributes = attributes
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("attributes", prefix)))
	}
	// FIXME: Skipping ContactInfo because it does not seem to implement AddSetFlags.
	administrativeContactSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("administrative-contact", prefix))
	if administrativeContactSet {
		m.AdministrativeContact = &OrganizationOrUserIdentifiers{}
		if setPaths, err := m.AdministrativeContact.SetFromFlags(flags, flagsplugin.Prefix("administrative-contact", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	technicalContactSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("technical-contact", prefix))
	if technicalContactSet {
		m.TechnicalContact = &OrganizationOrUserIdentifiers{}
		if setPaths, err := m.TechnicalContact.SetFromFlags(flags, flagsplugin.Prefix("technical-contact", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	versionIdsSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("version-ids", prefix))
	if versionIdsSet {
		m.VersionIds = &GatewayVersionIdentifiers{}
		if setPaths, err := m.VersionIds.SetFromFlags(flags, flagsplugin.Prefix("version-ids", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	gatewayServerAddress, gatewayServerAddressSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("gateway-server-address", prefix))
	if err != nil {
		return paths, err
	}
	if gatewayServerAddressSet {
		m.GatewayServerAddress = gatewayServerAddress
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("gateway-server-address", prefix)))
	}
	autoUpdate, autoUpdateSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("auto-update", prefix))
	if err != nil {
		return paths, err
	}
	if autoUpdateSet {
		m.AutoUpdate = autoUpdate
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("auto-update", prefix)))
	}
	updateChannel, updateChannelSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("update-channel", prefix))
	if err != nil {
		return paths, err
	}
	if updateChannelSet {
		m.UpdateChannel = updateChannel
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("update-channel", prefix)))
	}
	frequencyPlanId, frequencyPlanIdSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("frequency-plan-id", prefix))
	if err != nil {
		return paths, err
	}
	if frequencyPlanIdSet {
		m.FrequencyPlanId = frequencyPlanId
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("frequency-plan-id", prefix)))
	}
	frequencyPlanIds, frequencyPlanIdsSet, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("frequency-plan-ids", prefix))
	if err != nil {
		return paths, err
	}
	if frequencyPlanIdsSet {
		m.FrequencyPlanIds = frequencyPlanIds
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("frequency-plan-ids", prefix)))
	}
	// FIXME: Skipping Antennas because it does not seem to implement AddSetFlags.
	statusPublic, statusPublicSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("status-public", prefix))
	if err != nil {
		return paths, err
	}
	if statusPublicSet {
		m.StatusPublic = statusPublic
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("status-public", prefix)))
	}
	locationPublic, locationPublicSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("location-public", prefix))
	if err != nil {
		return paths, err
	}
	if locationPublicSet {
		m.LocationPublic = locationPublic
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("location-public", prefix)))
	}
	scheduleDownlinkLate, scheduleDownlinkLateSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("schedule-downlink-late", prefix))
	if err != nil {
		return paths, err
	}
	if scheduleDownlinkLateSet {
		m.ScheduleDownlinkLate = scheduleDownlinkLate
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("schedule-downlink-late", prefix)))
	}
	enforceDutyCycle, enforceDutyCycleSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("enforce-duty-cycle", prefix))
	if err != nil {
		return paths, err
	}
	if enforceDutyCycleSet {
		m.EnforceDutyCycle = enforceDutyCycle
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("enforce-duty-cycle", prefix)))
	}
	downlinkPathConstraint, downlinkPathConstraintSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("downlink-path-constraint", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkPathConstraintSet {
		enumValue, err := flagsplugin.SetEnumString(downlinkPathConstraint, DownlinkPathConstraint_value)
		if err != nil {
			return paths, err
		}
		m.DownlinkPathConstraint = DownlinkPathConstraint(enumValue)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("downlink-path-constraint", prefix)))
	}
	scheduleAnytimeDelay, scheduleAnytimeDelaySet, err := flagsplugin.GetDuration(flags, flagsplugin.Prefix("schedule-anytime-delay", prefix))
	if err != nil {
		return paths, err
	}
	if scheduleAnytimeDelaySet {
		m.ScheduleAnytimeDelay = gogo.SetDuration(scheduleAnytimeDelay)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("schedule-anytime-delay", prefix)))
	}
	updateLocationFromStatus, updateLocationFromStatusSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("update-location-from-status", prefix))
	if err != nil {
		return paths, err
	}
	if updateLocationFromStatusSet {
		m.UpdateLocationFromStatus = updateLocationFromStatus
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("update-location-from-status", prefix)))
	}
	lbsLnsSecretSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("lbs-lns-secret", prefix))
	if lbsLnsSecretSet {
		m.LbsLnsSecret = &Secret{}
		if setPaths, err := m.LbsLnsSecret.SetFromFlags(flags, flagsplugin.Prefix("lbs-lns-secret", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	claimAuthenticationCodeSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("claim-authentication-code", prefix))
	if claimAuthenticationCodeSet {
		m.ClaimAuthenticationCode = &GatewayClaimAuthenticationCode{}
		if setPaths, err := m.ClaimAuthenticationCode.SetFromFlags(flags, flagsplugin.Prefix("claim-authentication-code", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	targetCupsUri, targetCupsUriSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("target-cups-uri", prefix))
	if err != nil {
		return paths, err
	}
	if targetCupsUriSet {
		m.TargetCupsUri = targetCupsUri
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("target-cups-uri", prefix)))
	}
	targetCupsKeySet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("target-cups-key", prefix))
	if targetCupsKeySet {
		m.TargetCupsKey = &Secret{}
		if setPaths, err := m.TargetCupsKey.SetFromFlags(flags, flagsplugin.Prefix("target-cups-key", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	requireAuthenticatedConnection, requireAuthenticatedConnectionSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("require-authenticated-connection", prefix))
	if err != nil {
		return paths, err
	}
	if requireAuthenticatedConnectionSet {
		m.RequireAuthenticatedConnection = requireAuthenticatedConnection
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("require-authenticated-connection", prefix)))
	}
	lrfhssSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("lrfhss", prefix))
	if lrfhssSet {
		m.Lrfhss = &Gateway_LRFHSS{}
		if setPaths, err := m.Lrfhss.SetFromFlags(flags, flagsplugin.Prefix("lrfhss", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	disablePacketBrokerForwarding, disablePacketBrokerForwardingSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("disable-packet-broker-forwarding", prefix))
	if err != nil {
		return paths, err
	}
	if disablePacketBrokerForwardingSet {
		m.DisablePacketBrokerForwarding = disablePacketBrokerForwarding
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("disable-packet-broker-forwarding", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForListGatewaysRequest adds flags to select fields in ListGatewaysRequest.
func AddSetFlagsForListGatewaysRequest(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForOrganizationOrUserIdentifiers(flags, flagsplugin.Prefix("collaborator", prefix))
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("field-mask", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("order", prefix), ""))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("limit", prefix), ""))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("page", prefix), ""))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("deleted", prefix), ""))
}

// SetFromFlags sets the ListGatewaysRequest message from flags.
func (m *ListGatewaysRequest) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	collaboratorSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("collaborator", prefix))
	if collaboratorSet {
		m.Collaborator = &OrganizationOrUserIdentifiers{}
		if setPaths, err := m.Collaborator.SetFromFlags(flags, flagsplugin.Prefix("collaborator", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	fieldMask, fieldMaskSet, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("field-mask", prefix))
	if err != nil {
		return paths, err
	}
	if fieldMaskSet {
		m.FieldMask = gogo.SetFieldMask(fieldMask)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("field-mask", prefix)))
	}
	order, orderSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("order", prefix))
	if err != nil {
		return paths, err
	}
	if orderSet {
		m.Order = order
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("order", prefix)))
	}
	limit, limitSet, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("limit", prefix))
	if err != nil {
		return paths, err
	}
	if limitSet {
		m.Limit = limit
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("limit", prefix)))
	}
	page, pageSet, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("page", prefix))
	if err != nil {
		return paths, err
	}
	if pageSet {
		m.Page = page
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("page", prefix)))
	}
	deleted, deletedSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("deleted", prefix))
	if err != nil {
		return paths, err
	}
	if deletedSet {
		m.Deleted = deleted
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("deleted", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForGatewayAntenna adds flags to select fields in GatewayAntenna.
func AddSelectFlagsForGatewayAntenna(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("gain", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("gain", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("location", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("location", prefix), true)))
	AddSelectFlagsForLocation(flags, flagsplugin.Prefix("location", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("attributes", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("attributes", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("placement", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("placement", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forGatewayAntenna message from select flags.
func PathsFromSelectFlagsForGatewayAntenna(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	gain, gainSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("gain", prefix))
	if err != nil {
		return paths, err
	}
	if gainSelect && gain {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("gain", prefix)))
	}
	location, locationSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("location", prefix))
	if err != nil {
		return paths, err
	}
	if locationSelect && location {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("location", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForLocation(flags, flagsplugin.Prefix("location", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	attributes, attributesSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("attributes", prefix))
	if err != nil {
		return paths, err
	}
	if attributesSelect && attributes {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("attributes", prefix)))
	}
	placement, placementSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("placement", prefix))
	if err != nil {
		return paths, err
	}
	if placementSelect && placement {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("placement", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForGatewayAntenna adds flags to select fields in GatewayAntenna.
func AddSetFlagsForGatewayAntenna(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewFloat32Flag(flagsplugin.Prefix("gain", prefix), ""))
	AddSetFlagsForLocation(flags, flagsplugin.Prefix("location", prefix))
	flags.AddFlag(flagsplugin.NewStringStringMapFlag(flagsplugin.Prefix("attributes", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("placement", prefix), flagsplugin.EnumValueDesc(GatewayAntennaPlacement_value)))
}

// SetFromFlags sets the GatewayAntenna message from flags.
func (m *GatewayAntenna) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	gain, gainSet, err := flagsplugin.GetFloat32(flags, flagsplugin.Prefix("gain", prefix))
	if err != nil {
		return paths, err
	}
	if gainSet {
		m.Gain = gain
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("gain", prefix)))
	}
	locationSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("location", prefix))
	if locationSet {
		m.Location = &Location{}
		if setPaths, err := m.Location.SetFromFlags(flags, flagsplugin.Prefix("location", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	attributes, attributesSet, err := flagsplugin.GetStringStringMap(flags, flagsplugin.Prefix("attributes", prefix))
	if err != nil {
		return paths, err
	}
	if attributesSet {
		m.Attributes = attributes
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("attributes", prefix)))
	}
	placement, placementSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("placement", prefix))
	if err != nil {
		return paths, err
	}
	if placementSet {
		enumValue, err := flagsplugin.SetEnumString(placement, GatewayAntennaPlacement_value)
		if err != nil {
			return paths, err
		}
		m.Placement = GatewayAntennaPlacement(enumValue)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("placement", prefix)))
	}
	return paths, nil
}
