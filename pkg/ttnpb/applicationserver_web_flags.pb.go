// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v0.0.0-dev
// - protoc              v3.17.3
// source: lorawan-stack/api/applicationserver_web.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	gogo "github.com/TheThingsIndustries/protoc-gen-go-flags/gogo"
	pflag "github.com/spf13/pflag"
)

// AddSelectFlagsForApplicationWebhookIdentifiers adds flags to select fields in ApplicationWebhookIdentifiers.
func AddSelectFlagsForApplicationWebhookIdentifiers(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("application-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("application-ids", prefix), true)))
	AddSelectFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("application-ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("webhook-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("webhook-id", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationWebhookIdentifiers message from select flags.
func PathsFromSelectFlagsForApplicationWebhookIdentifiers(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	applicationIds, applicationIdsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("application-ids", prefix))
	if err != nil {
		return paths, err
	}
	if applicationIdsSelect && applicationIds {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("application-ids", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("application-ids", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	webhookId, webhookIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("webhook-id", prefix))
	if err != nil {
		return paths, err
	}
	if webhookIdSelect && webhookId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("webhook-id", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForApplicationWebhookIdentifiers adds flags to select fields in ApplicationWebhookIdentifiers.
func AddSetFlagsForApplicationWebhookIdentifiers(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("application-ids", prefix))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("webhook-id", prefix), ""))
}

// SetFromFlags sets the ApplicationWebhookIdentifiers message from flags.
func (m *ApplicationWebhookIdentifiers) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	applicationIdsSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("application-ids", prefix))
	if applicationIdsSet {
		m.ApplicationIds = &ApplicationIdentifiers{}
		if setPaths, err := m.ApplicationIds.SetFromFlags(flags, flagsplugin.Prefix("application-ids", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	webhookId, webhookIdSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("webhook-id", prefix))
	if err != nil {
		return paths, err
	}
	if webhookIdSet {
		m.WebhookId = webhookId
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("webhook-id", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationWebhookTemplateIdentifiers adds flags to select fields in ApplicationWebhookTemplateIdentifiers.
func AddSelectFlagsForApplicationWebhookTemplateIdentifiers(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("template-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("template-id", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationWebhookTemplateIdentifiers message from select flags.
func PathsFromSelectFlagsForApplicationWebhookTemplateIdentifiers(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	templateId, templateIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("template-id", prefix))
	if err != nil {
		return paths, err
	}
	if templateIdSelect && templateId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("template-id", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForApplicationWebhookTemplateIdentifiers adds flags to select fields in ApplicationWebhookTemplateIdentifiers.
func AddSetFlagsForApplicationWebhookTemplateIdentifiers(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("template-id", prefix), ""))
}

// SetFromFlags sets the ApplicationWebhookTemplateIdentifiers message from flags.
func (m *ApplicationWebhookTemplateIdentifiers) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	templateId, templateIdSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("template-id", prefix))
	if err != nil {
		return paths, err
	}
	if templateIdSet {
		m.TemplateId = templateId
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("template-id", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationWebhookHealth_WebhookHealthStatusHealthy adds flags to select fields in ApplicationWebhookHealth_WebhookHealthStatusHealthy.
func AddSelectFlagsForApplicationWebhookHealth_WebhookHealthStatusHealthy(flags *pflag.FlagSet, prefix string) {
}

// SelectFromFlags outputs the fieldmask paths forApplicationWebhookHealth_WebhookHealthStatusHealthy message from select flags.
func PathsFromSelectFlagsForApplicationWebhookHealth_WebhookHealthStatusHealthy(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	return paths, nil
}

// AddSelectFlagsForApplicationWebhookHealth_WebhookHealthStatusUnhealthy adds flags to select fields in ApplicationWebhookHealth_WebhookHealthStatusUnhealthy.
func AddSelectFlagsForApplicationWebhookHealth_WebhookHealthStatusUnhealthy(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("failed-attempts", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("failed-attempts", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-failed-attempt-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-failed-attempt-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-failed-attempt-details", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-failed-attempt-details", prefix), true)))
	AddSelectFlagsForErrorDetails(flags, flagsplugin.Prefix("last-failed-attempt-details", prefix))
}

// SelectFromFlags outputs the fieldmask paths forApplicationWebhookHealth_WebhookHealthStatusUnhealthy message from select flags.
func PathsFromSelectFlagsForApplicationWebhookHealth_WebhookHealthStatusUnhealthy(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	failedAttempts, failedAttemptsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("failed-attempts", prefix))
	if err != nil {
		return paths, err
	}
	if failedAttemptsSelect && failedAttempts {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("failed-attempts", prefix)))
	}
	lastFailedAttemptAt, lastFailedAttemptAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last-failed-attempt-at", prefix))
	if err != nil {
		return paths, err
	}
	if lastFailedAttemptAtSelect && lastFailedAttemptAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("last-failed-attempt-at", prefix)))
	}
	lastFailedAttemptDetails, lastFailedAttemptDetailsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last-failed-attempt-details", prefix))
	if err != nil {
		return paths, err
	}
	if lastFailedAttemptDetailsSelect && lastFailedAttemptDetails {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("last-failed-attempt-details", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForErrorDetails(flags, flagsplugin.Prefix("last-failed-attempt-details", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSelectFlagsForApplicationWebhookHealth adds flags to select fields in ApplicationWebhookHealth.
func AddSelectFlagsForApplicationWebhookHealth(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("status.healthy", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("status.healthy", prefix), true)))
	AddSelectFlagsForApplicationWebhookHealth_WebhookHealthStatusHealthy(flags, flagsplugin.Prefix("status.healthy", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("status.unhealthy", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("status.unhealthy", prefix), true)))
	AddSelectFlagsForApplicationWebhookHealth_WebhookHealthStatusUnhealthy(flags, flagsplugin.Prefix("status.unhealthy", prefix))
}

// SelectFromFlags outputs the fieldmask paths forApplicationWebhookHealth message from select flags.
func PathsFromSelectFlagsForApplicationWebhookHealth(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	healthy, healthySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("status.healthy", prefix))
	if err != nil {
		return paths, err
	}
	if healthySelect && healthy {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("status.healthy", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationWebhookHealth_WebhookHealthStatusHealthy(flags, flagsplugin.Prefix("status.healthy", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	unhealthy, unhealthySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("status.unhealthy", prefix))
	if err != nil {
		return paths, err
	}
	if unhealthySelect && unhealthy {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("status.unhealthy", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationWebhookHealth_WebhookHealthStatusUnhealthy(flags, flagsplugin.Prefix("status.unhealthy", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSelectFlagsForApplicationWebhook_Message adds flags to select fields in ApplicationWebhook_Message.
func AddSelectFlagsForApplicationWebhook_Message(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("path", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("path", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationWebhook_Message message from select flags.
func PathsFromSelectFlagsForApplicationWebhook_Message(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	path, pathSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("path", prefix))
	if err != nil {
		return paths, err
	}
	if pathSelect && path {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("path", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForApplicationWebhook_Message adds flags to select fields in ApplicationWebhook_Message.
func AddSetFlagsForApplicationWebhook_Message(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("path", prefix), ""))
}

// SetFromFlags sets the ApplicationWebhook_Message message from flags.
func (m *ApplicationWebhook_Message) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	path, pathSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("path", prefix))
	if err != nil {
		return paths, err
	}
	if pathSet {
		m.Path = path
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("path", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationWebhook adds flags to select fields in ApplicationWebhook.
func AddSelectFlagsForApplicationWebhook(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ids", prefix), true)))
	AddSelectFlagsForApplicationWebhookIdentifiers(flags, flagsplugin.Prefix("ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("created-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("created-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("updated-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("updated-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("base-url", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("base-url", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("headers", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("headers", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("format", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("format", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("template-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("template-ids", prefix), true)))
	AddSelectFlagsForApplicationWebhookTemplateIdentifiers(flags, flagsplugin.Prefix("template-ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("template-fields", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("template-fields", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-api-key", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-api-key", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("uplink-message", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("uplink-message", prefix), true)))
	AddSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("uplink-message", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("join-accept", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("join-accept", prefix), true)))
	AddSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("join-accept", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-ack", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-ack", prefix), true)))
	AddSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-ack", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-nack", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-nack", prefix), true)))
	AddSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-nack", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-sent", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-sent", prefix), true)))
	AddSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-sent", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-failed", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-failed", prefix), true)))
	AddSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-failed", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-queued", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-queued", prefix), true)))
	AddSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-queued", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-queue-invalidated", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-queue-invalidated", prefix), true)))
	AddSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-queue-invalidated", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("location-solved", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("location-solved", prefix), true)))
	AddSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("location-solved", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("service-data", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("service-data", prefix), true)))
	AddSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("service-data", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("health-status", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("health-status", prefix), true)))
	AddSelectFlagsForApplicationWebhookHealth(flags, flagsplugin.Prefix("health-status", prefix))
}

// SelectFromFlags outputs the fieldmask paths forApplicationWebhook message from select flags.
func PathsFromSelectFlagsForApplicationWebhook(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	ids, idsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ids", prefix))
	if err != nil {
		return paths, err
	}
	if idsSelect && ids {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("ids", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationWebhookIdentifiers(flags, flagsplugin.Prefix("ids", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	createdAt, createdAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("created-at", prefix))
	if err != nil {
		return paths, err
	}
	if createdAtSelect && createdAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("created-at", prefix)))
	}
	updatedAt, updatedAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("updated-at", prefix))
	if err != nil {
		return paths, err
	}
	if updatedAtSelect && updatedAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("updated-at", prefix)))
	}
	baseUrl, baseUrlSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("base-url", prefix))
	if err != nil {
		return paths, err
	}
	if baseUrlSelect && baseUrl {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("base-url", prefix)))
	}
	headers, headersSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("headers", prefix))
	if err != nil {
		return paths, err
	}
	if headersSelect && headers {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("headers", prefix)))
	}
	format, formatSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("format", prefix))
	if err != nil {
		return paths, err
	}
	if formatSelect && format {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("format", prefix)))
	}
	templateIds, templateIdsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("template-ids", prefix))
	if err != nil {
		return paths, err
	}
	if templateIdsSelect && templateIds {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("template-ids", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationWebhookTemplateIdentifiers(flags, flagsplugin.Prefix("template-ids", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	templateFields, templateFieldsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("template-fields", prefix))
	if err != nil {
		return paths, err
	}
	if templateFieldsSelect && templateFields {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("template-fields", prefix)))
	}
	downlinkApiKey, downlinkApiKeySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink-api-key", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkApiKeySelect && downlinkApiKey {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("downlink-api-key", prefix)))
	}
	uplinkMessage, uplinkMessageSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("uplink-message", prefix))
	if err != nil {
		return paths, err
	}
	if uplinkMessageSelect && uplinkMessage {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("uplink-message", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("uplink-message", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	joinAccept, joinAcceptSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("join-accept", prefix))
	if err != nil {
		return paths, err
	}
	if joinAcceptSelect && joinAccept {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("join-accept", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("join-accept", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	downlinkAck, downlinkAckSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink-ack", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkAckSelect && downlinkAck {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("downlink-ack", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-ack", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	downlinkNack, downlinkNackSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink-nack", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkNackSelect && downlinkNack {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("downlink-nack", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-nack", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	downlinkSent, downlinkSentSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink-sent", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkSentSelect && downlinkSent {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("downlink-sent", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-sent", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	downlinkFailed, downlinkFailedSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink-failed", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkFailedSelect && downlinkFailed {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("downlink-failed", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-failed", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	downlinkQueued, downlinkQueuedSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink-queued", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkQueuedSelect && downlinkQueued {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("downlink-queued", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-queued", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	downlinkQueueInvalidated, downlinkQueueInvalidatedSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink-queue-invalidated", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkQueueInvalidatedSelect && downlinkQueueInvalidated {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("downlink-queue-invalidated", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-queue-invalidated", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	locationSolved, locationSolvedSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("location-solved", prefix))
	if err != nil {
		return paths, err
	}
	if locationSolvedSelect && locationSolved {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("location-solved", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("location-solved", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	serviceData, serviceDataSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("service-data", prefix))
	if err != nil {
		return paths, err
	}
	if serviceDataSelect && serviceData {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("service-data", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("service-data", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	healthStatus, healthStatusSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("health-status", prefix))
	if err != nil {
		return paths, err
	}
	if healthStatusSelect && healthStatus {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("health-status", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationWebhookHealth(flags, flagsplugin.Prefix("health-status", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSetFlagsForApplicationWebhook adds flags to select fields in ApplicationWebhook.
func AddSetFlagsForApplicationWebhook(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForApplicationWebhookIdentifiers(flags, flagsplugin.Prefix("ids", prefix))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("created-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("updated-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("base-url", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringStringMapFlag(flagsplugin.Prefix("headers", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("format", prefix), ""))
	AddSetFlagsForApplicationWebhookTemplateIdentifiers(flags, flagsplugin.Prefix("template-ids", prefix))
	flags.AddFlag(flagsplugin.NewStringStringMapFlag(flagsplugin.Prefix("template-fields", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("downlink-api-key", prefix), ""))
	AddSetFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("uplink-message", prefix))
	AddSetFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("join-accept", prefix))
	AddSetFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-ack", prefix))
	AddSetFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-nack", prefix))
	AddSetFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-sent", prefix))
	AddSetFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-failed", prefix))
	AddSetFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-queued", prefix))
	AddSetFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-queue-invalidated", prefix))
	AddSetFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("location-solved", prefix))
	AddSetFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("service-data", prefix))
	// FIXME: Skipping HealthStatus because it does not seem to implement AddSetFlags.
}

// SetFromFlags sets the ApplicationWebhook message from flags.
func (m *ApplicationWebhook) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	idsSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ids", prefix))
	if idsSet {
		m.Ids = &ApplicationWebhookIdentifiers{}
		if setPaths, err := m.Ids.SetFromFlags(flags, flagsplugin.Prefix("ids", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	createdAt, createdAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("created-at", prefix))
	if err != nil {
		return paths, err
	}
	if createdAtSet {
		m.CreatedAt = gogo.SetTimestamp(createdAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("created-at", prefix)))
	}
	updatedAt, updatedAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("updated-at", prefix))
	if err != nil {
		return paths, err
	}
	if updatedAtSet {
		m.UpdatedAt = gogo.SetTimestamp(updatedAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("updated-at", prefix)))
	}
	baseUrl, baseUrlSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("base-url", prefix))
	if err != nil {
		return paths, err
	}
	if baseUrlSet {
		m.BaseUrl = baseUrl
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("base-url", prefix)))
	}
	headers, headersSet, err := flagsplugin.GetStringStringMap(flags, flagsplugin.Prefix("headers", prefix))
	if err != nil {
		return paths, err
	}
	if headersSet {
		m.Headers = headers
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("headers", prefix)))
	}
	format, formatSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("format", prefix))
	if err != nil {
		return paths, err
	}
	if formatSet {
		m.Format = format
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("format", prefix)))
	}
	templateIdsSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("template-ids", prefix))
	if templateIdsSet {
		m.TemplateIds = &ApplicationWebhookTemplateIdentifiers{}
		if setPaths, err := m.TemplateIds.SetFromFlags(flags, flagsplugin.Prefix("template-ids", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	templateFields, templateFieldsSet, err := flagsplugin.GetStringStringMap(flags, flagsplugin.Prefix("template-fields", prefix))
	if err != nil {
		return paths, err
	}
	if templateFieldsSet {
		m.TemplateFields = templateFields
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("template-fields", prefix)))
	}
	downlinkApiKey, downlinkApiKeySet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("downlink-api-key", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkApiKeySet {
		m.DownlinkApiKey = downlinkApiKey
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("downlink-api-key", prefix)))
	}
	uplinkMessageSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("uplink-message", prefix))
	if uplinkMessageSet {
		m.UplinkMessage = &ApplicationWebhook_Message{}
		if setPaths, err := m.UplinkMessage.SetFromFlags(flags, flagsplugin.Prefix("uplink-message", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	joinAcceptSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("join-accept", prefix))
	if joinAcceptSet {
		m.JoinAccept = &ApplicationWebhook_Message{}
		if setPaths, err := m.JoinAccept.SetFromFlags(flags, flagsplugin.Prefix("join-accept", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	downlinkAckSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink-ack", prefix))
	if downlinkAckSet {
		m.DownlinkAck = &ApplicationWebhook_Message{}
		if setPaths, err := m.DownlinkAck.SetFromFlags(flags, flagsplugin.Prefix("downlink-ack", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	downlinkNackSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink-nack", prefix))
	if downlinkNackSet {
		m.DownlinkNack = &ApplicationWebhook_Message{}
		if setPaths, err := m.DownlinkNack.SetFromFlags(flags, flagsplugin.Prefix("downlink-nack", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	downlinkSentSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink-sent", prefix))
	if downlinkSentSet {
		m.DownlinkSent = &ApplicationWebhook_Message{}
		if setPaths, err := m.DownlinkSent.SetFromFlags(flags, flagsplugin.Prefix("downlink-sent", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	downlinkFailedSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink-failed", prefix))
	if downlinkFailedSet {
		m.DownlinkFailed = &ApplicationWebhook_Message{}
		if setPaths, err := m.DownlinkFailed.SetFromFlags(flags, flagsplugin.Prefix("downlink-failed", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	downlinkQueuedSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink-queued", prefix))
	if downlinkQueuedSet {
		m.DownlinkQueued = &ApplicationWebhook_Message{}
		if setPaths, err := m.DownlinkQueued.SetFromFlags(flags, flagsplugin.Prefix("downlink-queued", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	downlinkQueueInvalidatedSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink-queue-invalidated", prefix))
	if downlinkQueueInvalidatedSet {
		m.DownlinkQueueInvalidated = &ApplicationWebhook_Message{}
		if setPaths, err := m.DownlinkQueueInvalidated.SetFromFlags(flags, flagsplugin.Prefix("downlink-queue-invalidated", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	locationSolvedSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("location-solved", prefix))
	if locationSolvedSet {
		m.LocationSolved = &ApplicationWebhook_Message{}
		if setPaths, err := m.LocationSolved.SetFromFlags(flags, flagsplugin.Prefix("location-solved", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	serviceDataSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("service-data", prefix))
	if serviceDataSet {
		m.ServiceData = &ApplicationWebhook_Message{}
		if setPaths, err := m.ServiceData.SetFromFlags(flags, flagsplugin.Prefix("service-data", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	// FIXME: Skipping HealthStatus because it does not seem to implement AddSetFlags.
	return paths, nil
}
