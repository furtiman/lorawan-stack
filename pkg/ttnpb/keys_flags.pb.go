// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v0.0.0-dev
// - protoc              v3.17.3
// source: lorawan-stack/api/keys.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	pflag "github.com/spf13/pflag"
	custom_flags "go.thethings.network/lorawan-stack/v3/cmd/ttn-lw-cli/custom_flags"
	types "go.thethings.network/lorawan-stack/v3/pkg/types"
)

// AddSelectFlagsForKeyEnvelope adds flags to select fields in KeyEnvelope.
func AddSelectFlagsForKeyEnvelope(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("key", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("key", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("kek-label", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("kek-label", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("encrypted-key", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("encrypted-key", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forKeyEnvelope message from select flags.
func PathsFromSelectFlagsForKeyEnvelope(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("key", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("key", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("kek_label", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("kek_label", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("encrypted_key", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("encrypted_key", prefix))
	}
	return paths, nil
}

// AddSetFlagsForKeyEnvelope adds flags to select fields in KeyEnvelope.
func AddSetFlagsForKeyEnvelope(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(custom_flags.New16BytesFlag(flagsplugin.Prefix("key", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("kek-label", prefix), ""))
	flags.AddFlag(flagsplugin.NewBytesFlag(flagsplugin.Prefix("encrypted-key", prefix), ""))
}

// SetFromFlags sets the KeyEnvelope message from flags.
func (m *KeyEnvelope) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := types.GetAES128Key(flags, flagsplugin.Prefix("key", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.Key = &val
		paths = append(paths, flagsplugin.Prefix("key", prefix))
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("kek_label", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.KekLabel = val
		paths = append(paths, flagsplugin.Prefix("kek_label", prefix))
	}
	if val, selected, err := flagsplugin.GetBytes(flags, flagsplugin.Prefix("encrypted_key", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.EncryptedKey = val
		paths = append(paths, flagsplugin.Prefix("encrypted_key", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForRootKeys adds flags to select fields in RootKeys.
func AddSelectFlagsForRootKeys(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("root-key-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("root-key-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("app-key", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("app-key", prefix), true)))
	AddSelectFlagsForKeyEnvelope(flags, flagsplugin.Prefix("app-key", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("nwk-key", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("nwk-key", prefix), true)))
	AddSelectFlagsForKeyEnvelope(flags, flagsplugin.Prefix("nwk-key", prefix))
}

// SelectFromFlags outputs the fieldmask paths forRootKeys message from select flags.
func PathsFromSelectFlagsForRootKeys(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("root_key_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("root_key_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("app_key", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("app_key", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForKeyEnvelope(flags, flagsplugin.Prefix("app_key", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("nwk_key", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("nwk_key", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForKeyEnvelope(flags, flagsplugin.Prefix("nwk_key", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSetFlagsForRootKeys adds flags to select fields in RootKeys.
func AddSetFlagsForRootKeys(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("root-key-id", prefix), ""))
	AddSetFlagsForKeyEnvelope(flags, flagsplugin.Prefix("app-key", prefix))
	AddSetFlagsForKeyEnvelope(flags, flagsplugin.Prefix("nwk-key", prefix))
}

// SetFromFlags sets the RootKeys message from flags.
func (m *RootKeys) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("root_key_id", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.RootKeyId = val
		paths = append(paths, flagsplugin.Prefix("root_key_id", prefix))
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("app_key", prefix)); selected {
		m.AppKey = &KeyEnvelope{}
		if setPaths, err := m.AppKey.SetFromFlags(flags, flagsplugin.Prefix("app_key", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("nwk_key", prefix)); selected {
		m.NwkKey = &KeyEnvelope{}
		if setPaths, err := m.NwkKey.SetFromFlags(flags, flagsplugin.Prefix("nwk_key", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	return paths, nil
}
