// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v0.0.0-dev
// - protoc              v3.17.3
// source: lorawan-stack/api/contact_info.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	gogo "github.com/TheThingsIndustries/protoc-gen-go-flags/gogo"
	pflag "github.com/spf13/pflag"
)

// AddSelectFlagsForContactInfo adds flags to select fields in ContactInfo.
func AddSelectFlagsForContactInfo(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("contact-type", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("contact-type", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("contact-method", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("contact-method", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("value", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("value", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("public", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("public", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("validated-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("validated-at", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forContactInfo message from select flags.
func PathsFromSelectFlagsForContactInfo(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	contactType, contactTypeSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("contact-type", prefix))
	if err != nil {
		return paths, err
	}
	if contactTypeSelect && contactType {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("contact-type", prefix)))
	}
	contactMethod, contactMethodSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("contact-method", prefix))
	if err != nil {
		return paths, err
	}
	if contactMethodSelect && contactMethod {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("contact-method", prefix)))
	}
	value, valueSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("value", prefix))
	if err != nil {
		return paths, err
	}
	if valueSelect && value {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("value", prefix)))
	}
	public, publicSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("public", prefix))
	if err != nil {
		return paths, err
	}
	if publicSelect && public {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("public", prefix)))
	}
	validatedAt, validatedAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("validated-at", prefix))
	if err != nil {
		return paths, err
	}
	if validatedAtSelect && validatedAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("validated-at", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForContactInfo adds flags to select fields in ContactInfo.
func AddSetFlagsForContactInfo(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("contact-type", prefix), flagsplugin.EnumValueDesc(ContactType_value)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("contact-method", prefix), flagsplugin.EnumValueDesc(ContactMethod_value)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("value", prefix), ""))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("public", prefix), ""))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("validated-at", prefix), ""))
}

// SetFromFlags sets the ContactInfo message from flags.
func (m *ContactInfo) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	contactType, contactTypeSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("contact-type", prefix))
	if err != nil {
		return paths, err
	}
	if contactTypeSet {
		enumValue, err := flagsplugin.SetEnumString(contactType, ContactType_value)
		if err != nil {
			return paths, err
		}
		m.ContactType = ContactType(enumValue)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("contact-type", prefix)))
	}
	contactMethod, contactMethodSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("contact-method", prefix))
	if err != nil {
		return paths, err
	}
	if contactMethodSet {
		enumValue, err := flagsplugin.SetEnumString(contactMethod, ContactMethod_value)
		if err != nil {
			return paths, err
		}
		m.ContactMethod = ContactMethod(enumValue)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("contact-method", prefix)))
	}
	value, valueSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("value", prefix))
	if err != nil {
		return paths, err
	}
	if valueSet {
		m.Value = value
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("value", prefix)))
	}
	public, publicSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("public", prefix))
	if err != nil {
		return paths, err
	}
	if publicSet {
		m.Public = public
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("public", prefix)))
	}
	validatedAt, validatedAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("validated-at", prefix))
	if err != nil {
		return paths, err
	}
	if validatedAtSet {
		m.ValidatedAt = gogo.SetTimestamp(validatedAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("validated-at", prefix)))
	}
	return paths, nil
}
