// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v0.0.0-dev
// - protoc              v3.17.3
// source: lorawan-stack/api/joinserver.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	gogo "github.com/TheThingsIndustries/protoc-gen-go-flags/gogo"
	pflag "github.com/spf13/pflag"
	custom_flags "go.thethings.network/lorawan-stack/v3/cmd/ttn-lw-cli/custom_flags"
)

// AddSelectFlagsForApplicationActivationSettings adds flags to select fields in ApplicationActivationSettings.
func AddSelectFlagsForApplicationActivationSettings(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("kek-label", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("kek-label", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("kek", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("kek", prefix), true)))
	AddSelectFlagsForKeyEnvelope(flags, flagsplugin.Prefix("kek", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("home-net-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("home-net-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("application-server-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("application-server-id", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationActivationSettings message from select flags.
func PathsFromSelectFlagsForApplicationActivationSettings(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	kekLabel, kekLabelSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("kek-label", prefix))
	if err != nil {
		return paths, err
	}
	if kekLabelSelect && kekLabel {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("kek-label", prefix)))
	}
	kek, kekSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("kek", prefix))
	if err != nil {
		return paths, err
	}
	if kekSelect && kek {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("kek", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForKeyEnvelope(flags, flagsplugin.Prefix("kek", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	homeNetId, homeNetIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("home-net-id", prefix))
	if err != nil {
		return paths, err
	}
	if homeNetIdSelect && homeNetId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("home-net-id", prefix)))
	}
	applicationServerId, applicationServerIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("application-server-id", prefix))
	if err != nil {
		return paths, err
	}
	if applicationServerIdSelect && applicationServerId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("application-server-id", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForApplicationActivationSettings adds flags to select fields in ApplicationActivationSettings.
func AddSetFlagsForApplicationActivationSettings(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("kek-label", prefix), ""))
	AddSetFlagsForKeyEnvelope(flags, flagsplugin.Prefix("kek", prefix))
	flags.AddFlag(custom_flags.New3BytesFlag(flagsplugin.Prefix("home-net-id", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("application-server-id", prefix), ""))
}

// SetFromFlags sets the ApplicationActivationSettings message from flags.
func (m *ApplicationActivationSettings) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	kekLabel, kekLabelSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("kek-label", prefix))
	if err != nil {
		return paths, err
	}
	if kekLabelSet {
		m.KekLabel = kekLabel
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("kek-label", prefix)))
	}
	kekSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("kek", prefix))
	if kekSet {
		m.Kek = &KeyEnvelope{}
		if setPaths, err := m.Kek.SetFromFlags(flags, flagsplugin.Prefix("kek", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	homeNetId, homeNetIdSet, err := custom_flags.GetNetID(flags, flagsplugin.Prefix("home-net-id", prefix))
	if err != nil {
		return paths, err
	}
	if homeNetIdSet {
		m.HomeNetId = &homeNetId
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("home-net-id", prefix)))
	}
	applicationServerId, applicationServerIdSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("application-server-id", prefix))
	if err != nil {
		return paths, err
	}
	if applicationServerIdSet {
		m.ApplicationServerId = applicationServerId
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("application-server-id", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForSetApplicationActivationSettingsRequest adds flags to select fields in SetApplicationActivationSettingsRequest.
func AddSelectFlagsForSetApplicationActivationSettingsRequest(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("application-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("application-ids", prefix), true)))
	AddSelectFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("application-ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("settings", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("settings", prefix), true)))
	AddSelectFlagsForApplicationActivationSettings(flags, flagsplugin.Prefix("settings", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("field-mask", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("field-mask", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forSetApplicationActivationSettingsRequest message from select flags.
func PathsFromSelectFlagsForSetApplicationActivationSettingsRequest(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	applicationIds, applicationIdsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("application-ids", prefix))
	if err != nil {
		return paths, err
	}
	if applicationIdsSelect && applicationIds {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("application-ids", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("application-ids", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	settings, settingsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("settings", prefix))
	if err != nil {
		return paths, err
	}
	if settingsSelect && settings {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("settings", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationActivationSettings(flags, flagsplugin.Prefix("settings", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	fieldMask, fieldMaskSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("field-mask", prefix))
	if err != nil {
		return paths, err
	}
	if fieldMaskSelect && fieldMask {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("field-mask", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForSetApplicationActivationSettingsRequest adds flags to select fields in SetApplicationActivationSettingsRequest.
func AddSetFlagsForSetApplicationActivationSettingsRequest(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("application-ids", prefix))
	AddSetFlagsForApplicationActivationSettings(flags, flagsplugin.Prefix("settings", prefix))
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("field-mask", prefix), ""))
}

// SetFromFlags sets the SetApplicationActivationSettingsRequest message from flags.
func (m *SetApplicationActivationSettingsRequest) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	applicationIdsSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("application-ids", prefix))
	if applicationIdsSet {
		m.ApplicationIds = &ApplicationIdentifiers{}
		if setPaths, err := m.ApplicationIds.SetFromFlags(flags, flagsplugin.Prefix("application-ids", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	settingsSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("settings", prefix))
	if settingsSet {
		m.Settings = &ApplicationActivationSettings{}
		if setPaths, err := m.Settings.SetFromFlags(flags, flagsplugin.Prefix("settings", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	fieldMask, fieldMaskSet, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("field-mask", prefix))
	if err != nil {
		return paths, err
	}
	if fieldMaskSet {
		m.FieldMask = gogo.SetFieldMask(fieldMask)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("field-mask", prefix)))
	}
	return paths, nil
}
