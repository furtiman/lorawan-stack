// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v0.0.0-dev
// - protoc              v3.17.3
// source: lorawan-stack/api/metadata.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	pflag "github.com/spf13/pflag"
)

// AddSelectFlagsForLocation adds flags to select fields in Location.
func AddSelectFlagsForLocation(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("latitude", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("latitude", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("longitude", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("longitude", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("altitude", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("altitude", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("accuracy", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("accuracy", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("source", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("source", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forLocation message from select flags.
func PathsFromSelectFlagsForLocation(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	latitude, latitudeSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("latitude", prefix))
	if err != nil {
		return paths, err
	}
	if latitudeSelect && latitude {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("latitude", prefix)))
	}
	longitude, longitudeSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("longitude", prefix))
	if err != nil {
		return paths, err
	}
	if longitudeSelect && longitude {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("longitude", prefix)))
	}
	altitude, altitudeSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("altitude", prefix))
	if err != nil {
		return paths, err
	}
	if altitudeSelect && altitude {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("altitude", prefix)))
	}
	accuracy, accuracySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("accuracy", prefix))
	if err != nil {
		return paths, err
	}
	if accuracySelect && accuracy {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("accuracy", prefix)))
	}
	source, sourceSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("source", prefix))
	if err != nil {
		return paths, err
	}
	if sourceSelect && source {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("source", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForLocation adds flags to select fields in Location.
func AddSetFlagsForLocation(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewFloat64Flag(flagsplugin.Prefix("latitude", prefix), ""))
	flags.AddFlag(flagsplugin.NewFloat64Flag(flagsplugin.Prefix("longitude", prefix), ""))
	flags.AddFlag(flagsplugin.NewInt32Flag(flagsplugin.Prefix("altitude", prefix), ""))
	flags.AddFlag(flagsplugin.NewInt32Flag(flagsplugin.Prefix("accuracy", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("source", prefix), flagsplugin.EnumValueDesc(LocationSource_value)))
}

// SetFromFlags sets the Location message from flags.
func (m *Location) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	latitude, latitudeSet, err := flagsplugin.GetFloat64(flags, flagsplugin.Prefix("latitude", prefix))
	if err != nil {
		return paths, err
	}
	if latitudeSet {
		m.Latitude = latitude
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("latitude", prefix)))
	}
	longitude, longitudeSet, err := flagsplugin.GetFloat64(flags, flagsplugin.Prefix("longitude", prefix))
	if err != nil {
		return paths, err
	}
	if longitudeSet {
		m.Longitude = longitude
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("longitude", prefix)))
	}
	altitude, altitudeSet, err := flagsplugin.GetInt32(flags, flagsplugin.Prefix("altitude", prefix))
	if err != nil {
		return paths, err
	}
	if altitudeSet {
		m.Altitude = altitude
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("altitude", prefix)))
	}
	accuracy, accuracySet, err := flagsplugin.GetInt32(flags, flagsplugin.Prefix("accuracy", prefix))
	if err != nil {
		return paths, err
	}
	if accuracySet {
		m.Accuracy = accuracy
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("accuracy", prefix)))
	}
	source, sourceSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("source", prefix))
	if err != nil {
		return paths, err
	}
	if sourceSet {
		enumValue, err := flagsplugin.SetEnumString(source, LocationSource_value)
		if err != nil {
			return paths, err
		}
		m.Source = LocationSource(enumValue)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("source", prefix)))
	}
	return paths, nil
}
