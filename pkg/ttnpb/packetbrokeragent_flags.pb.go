// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v0.0.0-dev
// - protoc              v3.17.3
// source: lorawan-stack/api/packetbrokeragent.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	types "github.com/gogo/protobuf/types"
	pflag "github.com/spf13/pflag"
)

// AddSetFlagsForPacketBrokerRegisterRequest adds flags to select fields in PacketBrokerRegisterRequest.
func AddSetFlagsForPacketBrokerRegisterRequest(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("listed", prefix), ""))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("listed", prefix), flagsplugin.Prefix("listed.value", prefix))
}

// SetFromFlags sets the PacketBrokerRegisterRequest message from flags.
func (m *PacketBrokerRegisterRequest) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	listed, listedSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("listed", prefix))
	if err != nil {
		return paths, err
	}
	if listedSet {
		m.Listed = &types.BoolValue{Value: listed}
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("listed", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForPacketBrokerGatewayVisibility adds flags to select fields in PacketBrokerGatewayVisibility.
func AddSetFlagsForPacketBrokerGatewayVisibility(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("location", prefix), ""))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("antenna-placement", prefix), ""))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("antenna-count", prefix), ""))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("fine-timestamps", prefix), ""))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("contact-info", prefix), ""))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("status", prefix), ""))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("frequency-plan", prefix), ""))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("packet-rates", prefix), ""))
}

// SetFromFlags sets the PacketBrokerGatewayVisibility message from flags.
func (m *PacketBrokerGatewayVisibility) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	location, locationSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("location", prefix))
	if err != nil {
		return paths, err
	}
	if locationSet {
		m.Location = location
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("location", prefix)))
	}
	antennaPlacement, antennaPlacementSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("antenna-placement", prefix))
	if err != nil {
		return paths, err
	}
	if antennaPlacementSet {
		m.AntennaPlacement = antennaPlacement
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("antenna-placement", prefix)))
	}
	antennaCount, antennaCountSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("antenna-count", prefix))
	if err != nil {
		return paths, err
	}
	if antennaCountSet {
		m.AntennaCount = antennaCount
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("antenna-count", prefix)))
	}
	fineTimestamps, fineTimestampsSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("fine-timestamps", prefix))
	if err != nil {
		return paths, err
	}
	if fineTimestampsSet {
		m.FineTimestamps = fineTimestamps
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("fine-timestamps", prefix)))
	}
	contactInfo, contactInfoSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("contact-info", prefix))
	if err != nil {
		return paths, err
	}
	if contactInfoSet {
		m.ContactInfo = contactInfo
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("contact-info", prefix)))
	}
	status, statusSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("status", prefix))
	if err != nil {
		return paths, err
	}
	if statusSet {
		m.Status = status
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("status", prefix)))
	}
	frequencyPlan, frequencyPlanSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("frequency-plan", prefix))
	if err != nil {
		return paths, err
	}
	if frequencyPlanSet {
		m.FrequencyPlan = frequencyPlan
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("frequency-plan", prefix)))
	}
	packetRates, packetRatesSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("packet-rates", prefix))
	if err != nil {
		return paths, err
	}
	if packetRatesSet {
		m.PacketRates = packetRates
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("packet-rates", prefix)))
	}
	return paths, nil
}
