// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v0.0.0-dev
// - protoc              v3.17.3
// source: lorawan-stack/api/end_device.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	gogo "github.com/TheThingsIndustries/protoc-gen-go-flags/gogo"
	types "github.com/gogo/protobuf/types"
	pflag "github.com/spf13/pflag"
	custom_flags "go.thethings.network/lorawan-stack/v3/cmd/ttn-lw-cli/custom_flags"
)

// AddSelectFlagsForBoolValue adds flags to select fields in BoolValue.
func AddSelectFlagsForBoolValue(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("value", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("value", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forBoolValue message from select flags.
func PathsFromSelectFlagsForBoolValue(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	value, valueSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("value", prefix))
	if err != nil {
		return paths, err
	}
	if valueSelect && value {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("value", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForBoolValue adds flags to select fields in BoolValue.
func AddSetFlagsForBoolValue(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("value", prefix), ""))
}

// SetFromFlags sets the BoolValue message from flags.
func (m *BoolValue) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	value, valueSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("value", prefix))
	if err != nil {
		return paths, err
	}
	if valueSet {
		m.Value = value
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("value", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForMACParameters_Channel adds flags to select fields in MACParameters_Channel.
func AddSelectFlagsForMACParameters_Channel(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("uplink-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("uplink-frequency", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-frequency", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("min-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("min-data-rate-index", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("max-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("max-data-rate-index", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("enable-uplink", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("enable-uplink", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forMACParameters_Channel message from select flags.
func PathsFromSelectFlagsForMACParameters_Channel(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	uplinkFrequency, uplinkFrequencySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("uplink-frequency", prefix))
	if err != nil {
		return paths, err
	}
	if uplinkFrequencySelect && uplinkFrequency {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("uplink-frequency", prefix)))
	}
	downlinkFrequency, downlinkFrequencySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink-frequency", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkFrequencySelect && downlinkFrequency {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("downlink-frequency", prefix)))
	}
	minDataRateIndex, minDataRateIndexSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("min-data-rate-index", prefix))
	if err != nil {
		return paths, err
	}
	if minDataRateIndexSelect && minDataRateIndex {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("min-data-rate-index", prefix)))
	}
	maxDataRateIndex, maxDataRateIndexSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("max-data-rate-index", prefix))
	if err != nil {
		return paths, err
	}
	if maxDataRateIndexSelect && maxDataRateIndex {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("max-data-rate-index", prefix)))
	}
	enableUplink, enableUplinkSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("enable-uplink", prefix))
	if err != nil {
		return paths, err
	}
	if enableUplinkSelect && enableUplink {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("enable-uplink", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForMACParameters_Channel adds flags to select fields in MACParameters_Channel.
func AddSetFlagsForMACParameters_Channel(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewUint64Flag(flagsplugin.Prefix("uplink-frequency", prefix), ""))
	flags.AddFlag(flagsplugin.NewUint64Flag(flagsplugin.Prefix("downlink-frequency", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("min-data-rate-index", prefix), flagsplugin.EnumValueDesc(DataRateIndex_value)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("max-data-rate-index", prefix), flagsplugin.EnumValueDesc(DataRateIndex_value)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("enable-uplink", prefix), ""))
}

// SetFromFlags sets the MACParameters_Channel message from flags.
func (m *MACParameters_Channel) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	uplinkFrequency, uplinkFrequencySet, err := flagsplugin.GetUint64(flags, flagsplugin.Prefix("uplink-frequency", prefix))
	if err != nil {
		return paths, err
	}
	if uplinkFrequencySet {
		m.UplinkFrequency = uplinkFrequency
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("uplink-frequency", prefix)))
	}
	downlinkFrequency, downlinkFrequencySet, err := flagsplugin.GetUint64(flags, flagsplugin.Prefix("downlink-frequency", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkFrequencySet {
		m.DownlinkFrequency = downlinkFrequency
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("downlink-frequency", prefix)))
	}
	minDataRateIndex, minDataRateIndexSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("min-data-rate-index", prefix))
	if err != nil {
		return paths, err
	}
	if minDataRateIndexSet {
		enumValue, err := flagsplugin.SetEnumString(minDataRateIndex, DataRateIndex_value)
		if err != nil {
			return paths, err
		}
		m.MinDataRateIndex = DataRateIndex(enumValue)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("min-data-rate-index", prefix)))
	}
	maxDataRateIndex, maxDataRateIndexSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("max-data-rate-index", prefix))
	if err != nil {
		return paths, err
	}
	if maxDataRateIndexSet {
		enumValue, err := flagsplugin.SetEnumString(maxDataRateIndex, DataRateIndex_value)
		if err != nil {
			return paths, err
		}
		m.MaxDataRateIndex = DataRateIndex(enumValue)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("max-data-rate-index", prefix)))
	}
	enableUplink, enableUplinkSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("enable-uplink", prefix))
	if err != nil {
		return paths, err
	}
	if enableUplinkSet {
		m.EnableUplink = enableUplink
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("enable-uplink", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForMACParameters adds flags to select fields in MACParameters.
func AddSelectFlagsForMACParameters(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("max-eirp", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("max-eirp", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("adr-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("adr-data-rate-index", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("adr-tx-power-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("adr-tx-power-index", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("adr-nb-trans", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("adr-nb-trans", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("adr-ack-limit", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("adr-ack-limit", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("adr-ack-delay", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("adr-ack-delay", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx1-delay", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx1-delay", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx1-data-rate-offset", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx1-data-rate-offset", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx2-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx2-data-rate-index", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx2-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx2-frequency", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("max-duty-cycle", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("max-duty-cycle", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rejoin-time-periodicity", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rejoin-time-periodicity", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rejoin-count-periodicity", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rejoin-count-periodicity", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ping-slot-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ping-slot-frequency", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ping-slot-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ping-slot-data-rate-index", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("beacon-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("beacon-frequency", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("channels", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("channels", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("uplink-dwell-time", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("uplink-dwell-time", prefix), true)))
	AddSelectFlagsForBoolValue(flags, flagsplugin.Prefix("uplink-dwell-time", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-dwell-time", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-dwell-time", prefix), true)))
	AddSelectFlagsForBoolValue(flags, flagsplugin.Prefix("downlink-dwell-time", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("adr-ack-limit-exponent", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("adr-ack-limit-exponent", prefix), true)))
	AddSelectFlagsForADRAckLimitExponentValue(flags, flagsplugin.Prefix("adr-ack-limit-exponent", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("adr-ack-delay-exponent", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("adr-ack-delay-exponent", prefix), true)))
	AddSelectFlagsForADRAckDelayExponentValue(flags, flagsplugin.Prefix("adr-ack-delay-exponent", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ping-slot-data-rate-index-value", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ping-slot-data-rate-index-value", prefix), true)))
	AddSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("ping-slot-data-rate-index-value", prefix))
}

// SelectFromFlags outputs the fieldmask paths forMACParameters message from select flags.
func PathsFromSelectFlagsForMACParameters(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	maxEirp, maxEirpSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("max-eirp", prefix))
	if err != nil {
		return paths, err
	}
	if maxEirpSelect && maxEirp {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("max-eirp", prefix)))
	}
	adrDataRateIndex, adrDataRateIndexSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("adr-data-rate-index", prefix))
	if err != nil {
		return paths, err
	}
	if adrDataRateIndexSelect && adrDataRateIndex {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("adr-data-rate-index", prefix)))
	}
	adrTxPowerIndex, adrTxPowerIndexSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("adr-tx-power-index", prefix))
	if err != nil {
		return paths, err
	}
	if adrTxPowerIndexSelect && adrTxPowerIndex {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("adr-tx-power-index", prefix)))
	}
	adrNbTrans, adrNbTransSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("adr-nb-trans", prefix))
	if err != nil {
		return paths, err
	}
	if adrNbTransSelect && adrNbTrans {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("adr-nb-trans", prefix)))
	}
	adrAckLimit, adrAckLimitSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("adr-ack-limit", prefix))
	if err != nil {
		return paths, err
	}
	if adrAckLimitSelect && adrAckLimit {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("adr-ack-limit", prefix)))
	}
	adrAckDelay, adrAckDelaySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("adr-ack-delay", prefix))
	if err != nil {
		return paths, err
	}
	if adrAckDelaySelect && adrAckDelay {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("adr-ack-delay", prefix)))
	}
	rx1Delay, rx1DelaySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx1-delay", prefix))
	if err != nil {
		return paths, err
	}
	if rx1DelaySelect && rx1Delay {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rx1-delay", prefix)))
	}
	rx1DataRateOffset, rx1DataRateOffsetSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx1-data-rate-offset", prefix))
	if err != nil {
		return paths, err
	}
	if rx1DataRateOffsetSelect && rx1DataRateOffset {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rx1-data-rate-offset", prefix)))
	}
	rx2DataRateIndex, rx2DataRateIndexSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx2-data-rate-index", prefix))
	if err != nil {
		return paths, err
	}
	if rx2DataRateIndexSelect && rx2DataRateIndex {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rx2-data-rate-index", prefix)))
	}
	rx2Frequency, rx2FrequencySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx2-frequency", prefix))
	if err != nil {
		return paths, err
	}
	if rx2FrequencySelect && rx2Frequency {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rx2-frequency", prefix)))
	}
	maxDutyCycle, maxDutyCycleSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("max-duty-cycle", prefix))
	if err != nil {
		return paths, err
	}
	if maxDutyCycleSelect && maxDutyCycle {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("max-duty-cycle", prefix)))
	}
	rejoinTimePeriodicity, rejoinTimePeriodicitySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rejoin-time-periodicity", prefix))
	if err != nil {
		return paths, err
	}
	if rejoinTimePeriodicitySelect && rejoinTimePeriodicity {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rejoin-time-periodicity", prefix)))
	}
	rejoinCountPeriodicity, rejoinCountPeriodicitySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rejoin-count-periodicity", prefix))
	if err != nil {
		return paths, err
	}
	if rejoinCountPeriodicitySelect && rejoinCountPeriodicity {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rejoin-count-periodicity", prefix)))
	}
	pingSlotFrequency, pingSlotFrequencySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ping-slot-frequency", prefix))
	if err != nil {
		return paths, err
	}
	if pingSlotFrequencySelect && pingSlotFrequency {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("ping-slot-frequency", prefix)))
	}
	pingSlotDataRateIndex, pingSlotDataRateIndexSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ping-slot-data-rate-index", prefix))
	if err != nil {
		return paths, err
	}
	if pingSlotDataRateIndexSelect && pingSlotDataRateIndex {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("ping-slot-data-rate-index", prefix)))
	}
	beaconFrequency, beaconFrequencySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("beacon-frequency", prefix))
	if err != nil {
		return paths, err
	}
	if beaconFrequencySelect && beaconFrequency {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("beacon-frequency", prefix)))
	}
	channels, channelsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("channels", prefix))
	if err != nil {
		return paths, err
	}
	if channelsSelect && channels {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("channels", prefix)))
	}
	uplinkDwellTime, uplinkDwellTimeSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("uplink-dwell-time", prefix))
	if err != nil {
		return paths, err
	}
	if uplinkDwellTimeSelect && uplinkDwellTime {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("uplink-dwell-time", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForBoolValue(flags, flagsplugin.Prefix("uplink-dwell-time", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	downlinkDwellTime, downlinkDwellTimeSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink-dwell-time", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkDwellTimeSelect && downlinkDwellTime {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("downlink-dwell-time", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForBoolValue(flags, flagsplugin.Prefix("downlink-dwell-time", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	adrAckLimitExponent, adrAckLimitExponentSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("adr-ack-limit-exponent", prefix))
	if err != nil {
		return paths, err
	}
	if adrAckLimitExponentSelect && adrAckLimitExponent {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("adr-ack-limit-exponent", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRAckLimitExponentValue(flags, flagsplugin.Prefix("adr-ack-limit-exponent", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	adrAckDelayExponent, adrAckDelayExponentSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("adr-ack-delay-exponent", prefix))
	if err != nil {
		return paths, err
	}
	if adrAckDelayExponentSelect && adrAckDelayExponent {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("adr-ack-delay-exponent", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRAckDelayExponentValue(flags, flagsplugin.Prefix("adr-ack-delay-exponent", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	pingSlotDataRateIndexValue, pingSlotDataRateIndexValueSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ping-slot-data-rate-index-value", prefix))
	if err != nil {
		return paths, err
	}
	if pingSlotDataRateIndexValueSelect && pingSlotDataRateIndexValue {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("ping-slot-data-rate-index-value", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("ping-slot-data-rate-index-value", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSetFlagsForMACParameters adds flags to select fields in MACParameters.
func AddSetFlagsForMACParameters(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewFloat32Flag(flagsplugin.Prefix("max-eirp", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("adr-data-rate-index", prefix), flagsplugin.EnumValueDesc(DataRateIndex_value)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("adr-tx-power-index", prefix), ""))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("adr-nb-trans", prefix), ""))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("adr-ack-limit", prefix), ""))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("adr-ack-delay", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("rx1-delay", prefix), flagsplugin.EnumValueDesc(RxDelay_value)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("rx1-data-rate-offset", prefix), flagsplugin.EnumValueDesc(DataRateOffset_value)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("rx2-data-rate-index", prefix), flagsplugin.EnumValueDesc(DataRateIndex_value)))
	flags.AddFlag(flagsplugin.NewUint64Flag(flagsplugin.Prefix("rx2-frequency", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("max-duty-cycle", prefix), flagsplugin.EnumValueDesc(AggregatedDutyCycle_value)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("rejoin-time-periodicity", prefix), flagsplugin.EnumValueDesc(RejoinTimeExponent_value)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("rejoin-count-periodicity", prefix), flagsplugin.EnumValueDesc(RejoinCountExponent_value)))
	flags.AddFlag(flagsplugin.NewUint64Flag(flagsplugin.Prefix("ping-slot-frequency", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("ping-slot-data-rate-index", prefix), flagsplugin.EnumValueDesc(DataRateIndex_value)))
	flags.AddFlag(flagsplugin.NewUint64Flag(flagsplugin.Prefix("beacon-frequency", prefix), ""))
	// FIXME: Skipping Channels because repeated messages are currently not supported.
	AddSetFlagsForBoolValue(flags, flagsplugin.Prefix("uplink-dwell-time", prefix))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("uplink-dwell-time.value", prefix), flagsplugin.Prefix("uplink-dwell-time", prefix))
	AddSetFlagsForBoolValue(flags, flagsplugin.Prefix("downlink-dwell-time", prefix))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("downlink-dwell-time.value", prefix), flagsplugin.Prefix("downlink-dwell-time", prefix))
	AddSetFlagsForADRAckLimitExponentValue(flags, flagsplugin.Prefix("adr-ack-limit-exponent", prefix))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("adr-ack-limit-exponent.value", prefix), flagsplugin.Prefix("adr-ack-limit-exponent", prefix))
	AddSetFlagsForADRAckDelayExponentValue(flags, flagsplugin.Prefix("adr-ack-delay-exponent", prefix))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("adr-ack-delay-exponent.value", prefix), flagsplugin.Prefix("adr-ack-delay-exponent", prefix))
	AddSetFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("ping-slot-data-rate-index-value", prefix))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("ping-slot-data-rate-index-value.value", prefix), flagsplugin.Prefix("ping-slot-data-rate-index-value", prefix))
}

// SetFromFlags sets the MACParameters message from flags.
func (m *MACParameters) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	maxEirp, maxEirpSet, err := flagsplugin.GetFloat32(flags, flagsplugin.Prefix("max-eirp", prefix))
	if err != nil {
		return paths, err
	}
	if maxEirpSet {
		m.MaxEirp = maxEirp
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("max-eirp", prefix)))
	}
	adrDataRateIndex, adrDataRateIndexSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("adr-data-rate-index", prefix))
	if err != nil {
		return paths, err
	}
	if adrDataRateIndexSet {
		enumValue, err := flagsplugin.SetEnumString(adrDataRateIndex, DataRateIndex_value)
		if err != nil {
			return paths, err
		}
		m.AdrDataRateIndex = DataRateIndex(enumValue)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("adr-data-rate-index", prefix)))
	}
	adrTxPowerIndex, adrTxPowerIndexSet, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("adr-tx-power-index", prefix))
	if err != nil {
		return paths, err
	}
	if adrTxPowerIndexSet {
		m.AdrTxPowerIndex = adrTxPowerIndex
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("adr-tx-power-index", prefix)))
	}
	adrNbTrans, adrNbTransSet, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("adr-nb-trans", prefix))
	if err != nil {
		return paths, err
	}
	if adrNbTransSet {
		m.AdrNbTrans = adrNbTrans
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("adr-nb-trans", prefix)))
	}
	adrAckLimit, adrAckLimitSet, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("adr-ack-limit", prefix))
	if err != nil {
		return paths, err
	}
	if adrAckLimitSet {
		m.AdrAckLimit = adrAckLimit
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("adr-ack-limit", prefix)))
	}
	adrAckDelay, adrAckDelaySet, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("adr-ack-delay", prefix))
	if err != nil {
		return paths, err
	}
	if adrAckDelaySet {
		m.AdrAckDelay = adrAckDelay
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("adr-ack-delay", prefix)))
	}
	rx1Delay, rx1DelaySet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("rx1-delay", prefix))
	if err != nil {
		return paths, err
	}
	if rx1DelaySet {
		enumValue, err := flagsplugin.SetEnumString(rx1Delay, RxDelay_value)
		if err != nil {
			return paths, err
		}
		m.Rx1Delay = RxDelay(enumValue)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rx1-delay", prefix)))
	}
	rx1DataRateOffset, rx1DataRateOffsetSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("rx1-data-rate-offset", prefix))
	if err != nil {
		return paths, err
	}
	if rx1DataRateOffsetSet {
		enumValue, err := flagsplugin.SetEnumString(rx1DataRateOffset, DataRateOffset_value)
		if err != nil {
			return paths, err
		}
		m.Rx1DataRateOffset = DataRateOffset(enumValue)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rx1-data-rate-offset", prefix)))
	}
	rx2DataRateIndex, rx2DataRateIndexSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("rx2-data-rate-index", prefix))
	if err != nil {
		return paths, err
	}
	if rx2DataRateIndexSet {
		enumValue, err := flagsplugin.SetEnumString(rx2DataRateIndex, DataRateIndex_value)
		if err != nil {
			return paths, err
		}
		m.Rx2DataRateIndex = DataRateIndex(enumValue)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rx2-data-rate-index", prefix)))
	}
	rx2Frequency, rx2FrequencySet, err := flagsplugin.GetUint64(flags, flagsplugin.Prefix("rx2-frequency", prefix))
	if err != nil {
		return paths, err
	}
	if rx2FrequencySet {
		m.Rx2Frequency = rx2Frequency
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rx2-frequency", prefix)))
	}
	maxDutyCycle, maxDutyCycleSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("max-duty-cycle", prefix))
	if err != nil {
		return paths, err
	}
	if maxDutyCycleSet {
		enumValue, err := flagsplugin.SetEnumString(maxDutyCycle, AggregatedDutyCycle_value)
		if err != nil {
			return paths, err
		}
		m.MaxDutyCycle = AggregatedDutyCycle(enumValue)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("max-duty-cycle", prefix)))
	}
	rejoinTimePeriodicity, rejoinTimePeriodicitySet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("rejoin-time-periodicity", prefix))
	if err != nil {
		return paths, err
	}
	if rejoinTimePeriodicitySet {
		enumValue, err := flagsplugin.SetEnumString(rejoinTimePeriodicity, RejoinTimeExponent_value)
		if err != nil {
			return paths, err
		}
		m.RejoinTimePeriodicity = RejoinTimeExponent(enumValue)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rejoin-time-periodicity", prefix)))
	}
	rejoinCountPeriodicity, rejoinCountPeriodicitySet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("rejoin-count-periodicity", prefix))
	if err != nil {
		return paths, err
	}
	if rejoinCountPeriodicitySet {
		enumValue, err := flagsplugin.SetEnumString(rejoinCountPeriodicity, RejoinCountExponent_value)
		if err != nil {
			return paths, err
		}
		m.RejoinCountPeriodicity = RejoinCountExponent(enumValue)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rejoin-count-periodicity", prefix)))
	}
	pingSlotFrequency, pingSlotFrequencySet, err := flagsplugin.GetUint64(flags, flagsplugin.Prefix("ping-slot-frequency", prefix))
	if err != nil {
		return paths, err
	}
	if pingSlotFrequencySet {
		m.PingSlotFrequency = pingSlotFrequency
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("ping-slot-frequency", prefix)))
	}
	pingSlotDataRateIndex, pingSlotDataRateIndexSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("ping-slot-data-rate-index", prefix))
	if err != nil {
		return paths, err
	}
	if pingSlotDataRateIndexSet {
		enumValue, err := flagsplugin.SetEnumString(pingSlotDataRateIndex, DataRateIndex_value)
		if err != nil {
			return paths, err
		}
		m.PingSlotDataRateIndex = DataRateIndex(enumValue)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("ping-slot-data-rate-index", prefix)))
	}
	beaconFrequency, beaconFrequencySet, err := flagsplugin.GetUint64(flags, flagsplugin.Prefix("beacon-frequency", prefix))
	if err != nil {
		return paths, err
	}
	if beaconFrequencySet {
		m.BeaconFrequency = beaconFrequency
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("beacon-frequency", prefix)))
	}
	// FIXME: Skipping Channels because it does not seem to implement AddSetFlags.
	uplinkDwellTimeSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("uplink-dwell-time", prefix))
	if uplinkDwellTimeSet {
		m.UplinkDwellTime = &BoolValue{}
		if setPaths, err := m.UplinkDwellTime.SetFromFlags(flags, flagsplugin.Prefix("uplink-dwell-time", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	downlinkDwellTimeSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink-dwell-time", prefix))
	if downlinkDwellTimeSet {
		m.DownlinkDwellTime = &BoolValue{}
		if setPaths, err := m.DownlinkDwellTime.SetFromFlags(flags, flagsplugin.Prefix("downlink-dwell-time", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	adrAckLimitExponentSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("adr-ack-limit-exponent", prefix))
	if adrAckLimitExponentSet {
		m.AdrAckLimitExponent = &ADRAckLimitExponentValue{}
		if setPaths, err := m.AdrAckLimitExponent.SetFromFlags(flags, flagsplugin.Prefix("adr-ack-limit-exponent", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	adrAckDelayExponentSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("adr-ack-delay-exponent", prefix))
	if adrAckDelayExponentSet {
		m.AdrAckDelayExponent = &ADRAckDelayExponentValue{}
		if setPaths, err := m.AdrAckDelayExponent.SetFromFlags(flags, flagsplugin.Prefix("adr-ack-delay-exponent", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	pingSlotDataRateIndexValueSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ping-slot-data-rate-index-value", prefix))
	if pingSlotDataRateIndexValueSet {
		m.PingSlotDataRateIndexValue = &DataRateIndexValue{}
		if setPaths, err := m.PingSlotDataRateIndexValue.SetFromFlags(flags, flagsplugin.Prefix("ping-slot-data-rate-index-value", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	return paths, nil
}

// AddSelectFlagsForMACSettings adds flags to select fields in MACSettings.
func AddSelectFlagsForMACSettings(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("class-b-timeout", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("class-b-timeout", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ping-slot-periodicity", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ping-slot-periodicity", prefix), true)))
	AddSelectFlagsForPingSlotPeriodValue(flags, flagsplugin.Prefix("ping-slot-periodicity", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ping-slot-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ping-slot-data-rate-index", prefix), true)))
	AddSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("ping-slot-data-rate-index", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ping-slot-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ping-slot-frequency", prefix), true)))
	AddSelectFlagsForFrequencyValue(flags, flagsplugin.Prefix("ping-slot-frequency", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("beacon-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("beacon-frequency", prefix), true)))
	AddSelectFlagsForFrequencyValue(flags, flagsplugin.Prefix("beacon-frequency", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("class-c-timeout", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("class-c-timeout", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx1-delay", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx1-delay", prefix), true)))
	AddSelectFlagsForRxDelayValue(flags, flagsplugin.Prefix("rx1-delay", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx1-data-rate-offset", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx1-data-rate-offset", prefix), true)))
	AddSelectFlagsForDataRateOffsetValue(flags, flagsplugin.Prefix("rx1-data-rate-offset", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx2-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx2-data-rate-index", prefix), true)))
	AddSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("rx2-data-rate-index", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx2-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx2-frequency", prefix), true)))
	AddSelectFlagsForFrequencyValue(flags, flagsplugin.Prefix("rx2-frequency", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("factory-preset-frequencies", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("factory-preset-frequencies", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("max-duty-cycle", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("max-duty-cycle", prefix), true)))
	AddSelectFlagsForAggregatedDutyCycleValue(flags, flagsplugin.Prefix("max-duty-cycle", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("supports-32-bit-f-cnt", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("supports-32-bit-f-cnt", prefix), true)))
	AddSelectFlagsForBoolValue(flags, flagsplugin.Prefix("supports-32-bit-f-cnt", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("use-adr", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("use-adr", prefix), true)))
	AddSelectFlagsForBoolValue(flags, flagsplugin.Prefix("use-adr", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("adr-margin", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("adr-margin", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("resets-f-cnt", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("resets-f-cnt", prefix), true)))
	AddSelectFlagsForBoolValue(flags, flagsplugin.Prefix("resets-f-cnt", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("status-time-periodicity", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("status-time-periodicity", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("status-count-periodicity", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("status-count-periodicity", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-rx1-delay", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-rx1-delay", prefix), true)))
	AddSelectFlagsForRxDelayValue(flags, flagsplugin.Prefix("desired-rx1-delay", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-rx1-data-rate-offset", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-rx1-data-rate-offset", prefix), true)))
	AddSelectFlagsForDataRateOffsetValue(flags, flagsplugin.Prefix("desired-rx1-data-rate-offset", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-rx2-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-rx2-data-rate-index", prefix), true)))
	AddSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("desired-rx2-data-rate-index", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-rx2-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-rx2-frequency", prefix), true)))
	AddSelectFlagsForFrequencyValue(flags, flagsplugin.Prefix("desired-rx2-frequency", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-max-duty-cycle", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-max-duty-cycle", prefix), true)))
	AddSelectFlagsForAggregatedDutyCycleValue(flags, flagsplugin.Prefix("desired-max-duty-cycle", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-adr-ack-limit-exponent", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-adr-ack-limit-exponent", prefix), true)))
	AddSelectFlagsForADRAckLimitExponentValue(flags, flagsplugin.Prefix("desired-adr-ack-limit-exponent", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-adr-ack-delay-exponent", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-adr-ack-delay-exponent", prefix), true)))
	AddSelectFlagsForADRAckDelayExponentValue(flags, flagsplugin.Prefix("desired-adr-ack-delay-exponent", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-ping-slot-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-ping-slot-data-rate-index", prefix), true)))
	AddSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("desired-ping-slot-data-rate-index", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-ping-slot-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-ping-slot-frequency", prefix), true)))
	AddSelectFlagsForFrequencyValue(flags, flagsplugin.Prefix("desired-ping-slot-frequency", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-beacon-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-beacon-frequency", prefix), true)))
	AddSelectFlagsForFrequencyValue(flags, flagsplugin.Prefix("desired-beacon-frequency", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-max-eirp", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-max-eirp", prefix), true)))
	AddSelectFlagsForDeviceEIRPValue(flags, flagsplugin.Prefix("desired-max-eirp", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("class-b-c-downlink-interval", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("class-b-c-downlink-interval", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forMACSettings message from select flags.
func PathsFromSelectFlagsForMACSettings(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	classBTimeout, classBTimeoutSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("class-b-timeout", prefix))
	if err != nil {
		return paths, err
	}
	if classBTimeoutSelect && classBTimeout {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("class-b-timeout", prefix)))
	}
	pingSlotPeriodicity, pingSlotPeriodicitySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ping-slot-periodicity", prefix))
	if err != nil {
		return paths, err
	}
	if pingSlotPeriodicitySelect && pingSlotPeriodicity {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("ping-slot-periodicity", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForPingSlotPeriodValue(flags, flagsplugin.Prefix("ping-slot-periodicity", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	pingSlotDataRateIndex, pingSlotDataRateIndexSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ping-slot-data-rate-index", prefix))
	if err != nil {
		return paths, err
	}
	if pingSlotDataRateIndexSelect && pingSlotDataRateIndex {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("ping-slot-data-rate-index", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("ping-slot-data-rate-index", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	pingSlotFrequency, pingSlotFrequencySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ping-slot-frequency", prefix))
	if err != nil {
		return paths, err
	}
	if pingSlotFrequencySelect && pingSlotFrequency {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("ping-slot-frequency", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForFrequencyValue(flags, flagsplugin.Prefix("ping-slot-frequency", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	beaconFrequency, beaconFrequencySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("beacon-frequency", prefix))
	if err != nil {
		return paths, err
	}
	if beaconFrequencySelect && beaconFrequency {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("beacon-frequency", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForFrequencyValue(flags, flagsplugin.Prefix("beacon-frequency", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	classCTimeout, classCTimeoutSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("class-c-timeout", prefix))
	if err != nil {
		return paths, err
	}
	if classCTimeoutSelect && classCTimeout {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("class-c-timeout", prefix)))
	}
	rx1Delay, rx1DelaySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx1-delay", prefix))
	if err != nil {
		return paths, err
	}
	if rx1DelaySelect && rx1Delay {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rx1-delay", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForRxDelayValue(flags, flagsplugin.Prefix("rx1-delay", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	rx1DataRateOffset, rx1DataRateOffsetSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx1-data-rate-offset", prefix))
	if err != nil {
		return paths, err
	}
	if rx1DataRateOffsetSelect && rx1DataRateOffset {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rx1-data-rate-offset", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForDataRateOffsetValue(flags, flagsplugin.Prefix("rx1-data-rate-offset", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	rx2DataRateIndex, rx2DataRateIndexSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx2-data-rate-index", prefix))
	if err != nil {
		return paths, err
	}
	if rx2DataRateIndexSelect && rx2DataRateIndex {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rx2-data-rate-index", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("rx2-data-rate-index", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	rx2Frequency, rx2FrequencySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx2-frequency", prefix))
	if err != nil {
		return paths, err
	}
	if rx2FrequencySelect && rx2Frequency {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rx2-frequency", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForFrequencyValue(flags, flagsplugin.Prefix("rx2-frequency", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	factoryPresetFrequencies, factoryPresetFrequenciesSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("factory-preset-frequencies", prefix))
	if err != nil {
		return paths, err
	}
	if factoryPresetFrequenciesSelect && factoryPresetFrequencies {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("factory-preset-frequencies", prefix)))
	}
	maxDutyCycle, maxDutyCycleSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("max-duty-cycle", prefix))
	if err != nil {
		return paths, err
	}
	if maxDutyCycleSelect && maxDutyCycle {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("max-duty-cycle", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForAggregatedDutyCycleValue(flags, flagsplugin.Prefix("max-duty-cycle", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	supports32BitFCnt, supports32BitFCntSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("supports-32-bit-f-cnt", prefix))
	if err != nil {
		return paths, err
	}
	if supports32BitFCntSelect && supports32BitFCnt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("supports-32-bit-f-cnt", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForBoolValue(flags, flagsplugin.Prefix("supports-32-bit-f-cnt", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	useAdr, useAdrSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("use-adr", prefix))
	if err != nil {
		return paths, err
	}
	if useAdrSelect && useAdr {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("use-adr", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForBoolValue(flags, flagsplugin.Prefix("use-adr", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	adrMargin, adrMarginSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("adr-margin", prefix))
	if err != nil {
		return paths, err
	}
	if adrMarginSelect && adrMargin {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("adr-margin", prefix)))
	}
	resetsFCnt, resetsFCntSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("resets-f-cnt", prefix))
	if err != nil {
		return paths, err
	}
	if resetsFCntSelect && resetsFCnt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("resets-f-cnt", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForBoolValue(flags, flagsplugin.Prefix("resets-f-cnt", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	statusTimePeriodicity, statusTimePeriodicitySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("status-time-periodicity", prefix))
	if err != nil {
		return paths, err
	}
	if statusTimePeriodicitySelect && statusTimePeriodicity {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("status-time-periodicity", prefix)))
	}
	statusCountPeriodicity, statusCountPeriodicitySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("status-count-periodicity", prefix))
	if err != nil {
		return paths, err
	}
	if statusCountPeriodicitySelect && statusCountPeriodicity {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("status-count-periodicity", prefix)))
	}
	desiredRx1Delay, desiredRx1DelaySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired-rx1-delay", prefix))
	if err != nil {
		return paths, err
	}
	if desiredRx1DelaySelect && desiredRx1Delay {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("desired-rx1-delay", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForRxDelayValue(flags, flagsplugin.Prefix("desired-rx1-delay", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	desiredRx1DataRateOffset, desiredRx1DataRateOffsetSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired-rx1-data-rate-offset", prefix))
	if err != nil {
		return paths, err
	}
	if desiredRx1DataRateOffsetSelect && desiredRx1DataRateOffset {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("desired-rx1-data-rate-offset", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForDataRateOffsetValue(flags, flagsplugin.Prefix("desired-rx1-data-rate-offset", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	desiredRx2DataRateIndex, desiredRx2DataRateIndexSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired-rx2-data-rate-index", prefix))
	if err != nil {
		return paths, err
	}
	if desiredRx2DataRateIndexSelect && desiredRx2DataRateIndex {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("desired-rx2-data-rate-index", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("desired-rx2-data-rate-index", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	desiredRx2Frequency, desiredRx2FrequencySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired-rx2-frequency", prefix))
	if err != nil {
		return paths, err
	}
	if desiredRx2FrequencySelect && desiredRx2Frequency {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("desired-rx2-frequency", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForFrequencyValue(flags, flagsplugin.Prefix("desired-rx2-frequency", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	desiredMaxDutyCycle, desiredMaxDutyCycleSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired-max-duty-cycle", prefix))
	if err != nil {
		return paths, err
	}
	if desiredMaxDutyCycleSelect && desiredMaxDutyCycle {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("desired-max-duty-cycle", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForAggregatedDutyCycleValue(flags, flagsplugin.Prefix("desired-max-duty-cycle", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	desiredAdrAckLimitExponent, desiredAdrAckLimitExponentSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired-adr-ack-limit-exponent", prefix))
	if err != nil {
		return paths, err
	}
	if desiredAdrAckLimitExponentSelect && desiredAdrAckLimitExponent {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("desired-adr-ack-limit-exponent", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRAckLimitExponentValue(flags, flagsplugin.Prefix("desired-adr-ack-limit-exponent", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	desiredAdrAckDelayExponent, desiredAdrAckDelayExponentSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired-adr-ack-delay-exponent", prefix))
	if err != nil {
		return paths, err
	}
	if desiredAdrAckDelayExponentSelect && desiredAdrAckDelayExponent {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("desired-adr-ack-delay-exponent", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRAckDelayExponentValue(flags, flagsplugin.Prefix("desired-adr-ack-delay-exponent", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	desiredPingSlotDataRateIndex, desiredPingSlotDataRateIndexSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired-ping-slot-data-rate-index", prefix))
	if err != nil {
		return paths, err
	}
	if desiredPingSlotDataRateIndexSelect && desiredPingSlotDataRateIndex {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("desired-ping-slot-data-rate-index", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("desired-ping-slot-data-rate-index", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	desiredPingSlotFrequency, desiredPingSlotFrequencySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired-ping-slot-frequency", prefix))
	if err != nil {
		return paths, err
	}
	if desiredPingSlotFrequencySelect && desiredPingSlotFrequency {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("desired-ping-slot-frequency", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForFrequencyValue(flags, flagsplugin.Prefix("desired-ping-slot-frequency", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	desiredBeaconFrequency, desiredBeaconFrequencySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired-beacon-frequency", prefix))
	if err != nil {
		return paths, err
	}
	if desiredBeaconFrequencySelect && desiredBeaconFrequency {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("desired-beacon-frequency", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForFrequencyValue(flags, flagsplugin.Prefix("desired-beacon-frequency", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	desiredMaxEirp, desiredMaxEirpSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired-max-eirp", prefix))
	if err != nil {
		return paths, err
	}
	if desiredMaxEirpSelect && desiredMaxEirp {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("desired-max-eirp", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForDeviceEIRPValue(flags, flagsplugin.Prefix("desired-max-eirp", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	classBCDownlinkInterval, classBCDownlinkIntervalSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("class-b-c-downlink-interval", prefix))
	if err != nil {
		return paths, err
	}
	if classBCDownlinkIntervalSelect && classBCDownlinkInterval {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("class-b-c-downlink-interval", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForMACSettings adds flags to select fields in MACSettings.
func AddSetFlagsForMACSettings(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewDurationFlag(flagsplugin.Prefix("class-b-timeout", prefix), ""))
	AddSetFlagsForPingSlotPeriodValue(flags, flagsplugin.Prefix("ping-slot-periodicity", prefix))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("ping-slot-periodicity.value", prefix), flagsplugin.Prefix("ping-slot-periodicity", prefix))
	AddSetFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("ping-slot-data-rate-index", prefix))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("ping-slot-data-rate-index.value", prefix), flagsplugin.Prefix("ping-slot-data-rate-index", prefix))
	AddSetFlagsForFrequencyValue(flags, flagsplugin.Prefix("ping-slot-frequency", prefix))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("ping-slot-frequency.value", prefix), flagsplugin.Prefix("ping-slot-frequency", prefix))
	AddSetFlagsForFrequencyValue(flags, flagsplugin.Prefix("beacon-frequency", prefix))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("beacon-frequency.value", prefix), flagsplugin.Prefix("beacon-frequency", prefix))
	flags.AddFlag(flagsplugin.NewDurationFlag(flagsplugin.Prefix("class-c-timeout", prefix), ""))
	AddSetFlagsForRxDelayValue(flags, flagsplugin.Prefix("rx1-delay", prefix))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("rx1-delay.value", prefix), flagsplugin.Prefix("rx1-delay", prefix))
	AddSetFlagsForDataRateOffsetValue(flags, flagsplugin.Prefix("rx1-data-rate-offset", prefix))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("rx1-data-rate-offset.value", prefix), flagsplugin.Prefix("rx1-data-rate-offset", prefix))
	AddSetFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("rx2-data-rate-index", prefix))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("rx2-data-rate-index.value", prefix), flagsplugin.Prefix("rx2-data-rate-index", prefix))
	AddSetFlagsForFrequencyValue(flags, flagsplugin.Prefix("rx2-frequency", prefix))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("rx2-frequency.value", prefix), flagsplugin.Prefix("rx2-frequency", prefix))
	flags.AddFlag(flagsplugin.NewUint64SliceFlag(flagsplugin.Prefix("factory-preset-frequencies", prefix), ""))
	AddSetFlagsForAggregatedDutyCycleValue(flags, flagsplugin.Prefix("max-duty-cycle", prefix))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("max-duty-cycle.value", prefix), flagsplugin.Prefix("max-duty-cycle", prefix))
	AddSetFlagsForBoolValue(flags, flagsplugin.Prefix("supports-32-bit-f-cnt", prefix))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("supports-32-bit-f-cnt.value", prefix), flagsplugin.Prefix("supports-32-bit-f-cnt", prefix))
	AddSetFlagsForBoolValue(flags, flagsplugin.Prefix("use-adr", prefix))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("use-adr.value", prefix), flagsplugin.Prefix("use-adr", prefix))
	flags.AddFlag(flagsplugin.NewFloat32Flag(flagsplugin.Prefix("adr-margin", prefix), ""))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("adr-margin", prefix), flagsplugin.Prefix("adr-margin.value", prefix))
	AddSetFlagsForBoolValue(flags, flagsplugin.Prefix("resets-f-cnt", prefix))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("resets-f-cnt.value", prefix), flagsplugin.Prefix("resets-f-cnt", prefix))
	flags.AddFlag(flagsplugin.NewDurationFlag(flagsplugin.Prefix("status-time-periodicity", prefix), ""))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("status-count-periodicity", prefix), ""))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("status-count-periodicity", prefix), flagsplugin.Prefix("status-count-periodicity.value", prefix))
	AddSetFlagsForRxDelayValue(flags, flagsplugin.Prefix("desired-rx1-delay", prefix))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-rx1-delay.value", prefix), flagsplugin.Prefix("desired-rx1-delay", prefix))
	AddSetFlagsForDataRateOffsetValue(flags, flagsplugin.Prefix("desired-rx1-data-rate-offset", prefix))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-rx1-data-rate-offset.value", prefix), flagsplugin.Prefix("desired-rx1-data-rate-offset", prefix))
	AddSetFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("desired-rx2-data-rate-index", prefix))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-rx2-data-rate-index.value", prefix), flagsplugin.Prefix("desired-rx2-data-rate-index", prefix))
	AddSetFlagsForFrequencyValue(flags, flagsplugin.Prefix("desired-rx2-frequency", prefix))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-rx2-frequency.value", prefix), flagsplugin.Prefix("desired-rx2-frequency", prefix))
	AddSetFlagsForAggregatedDutyCycleValue(flags, flagsplugin.Prefix("desired-max-duty-cycle", prefix))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-max-duty-cycle.value", prefix), flagsplugin.Prefix("desired-max-duty-cycle", prefix))
	AddSetFlagsForADRAckLimitExponentValue(flags, flagsplugin.Prefix("desired-adr-ack-limit-exponent", prefix))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-adr-ack-limit-exponent.value", prefix), flagsplugin.Prefix("desired-adr-ack-limit-exponent", prefix))
	AddSetFlagsForADRAckDelayExponentValue(flags, flagsplugin.Prefix("desired-adr-ack-delay-exponent", prefix))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-adr-ack-delay-exponent.value", prefix), flagsplugin.Prefix("desired-adr-ack-delay-exponent", prefix))
	AddSetFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("desired-ping-slot-data-rate-index", prefix))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-ping-slot-data-rate-index.value", prefix), flagsplugin.Prefix("desired-ping-slot-data-rate-index", prefix))
	AddSetFlagsForFrequencyValue(flags, flagsplugin.Prefix("desired-ping-slot-frequency", prefix))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-ping-slot-frequency.value", prefix), flagsplugin.Prefix("desired-ping-slot-frequency", prefix))
	AddSetFlagsForFrequencyValue(flags, flagsplugin.Prefix("desired-beacon-frequency", prefix))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-beacon-frequency.value", prefix), flagsplugin.Prefix("desired-beacon-frequency", prefix))
	AddSetFlagsForDeviceEIRPValue(flags, flagsplugin.Prefix("desired-max-eirp", prefix))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-max-eirp.value", prefix), flagsplugin.Prefix("desired-max-eirp", prefix))
	flags.AddFlag(flagsplugin.NewDurationFlag(flagsplugin.Prefix("class-b-c-downlink-interval", prefix), ""))
}

// SetFromFlags sets the MACSettings message from flags.
func (m *MACSettings) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	classBTimeout, classBTimeoutSet, err := flagsplugin.GetDuration(flags, flagsplugin.Prefix("class-b-timeout", prefix))
	if err != nil {
		return paths, err
	}
	if classBTimeoutSet {
		m.ClassBTimeout = gogo.SetDuration(classBTimeout)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("class-b-timeout", prefix)))
	}
	pingSlotPeriodicitySet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ping-slot-periodicity", prefix))
	if pingSlotPeriodicitySet {
		m.PingSlotPeriodicity = &PingSlotPeriodValue{}
		if setPaths, err := m.PingSlotPeriodicity.SetFromFlags(flags, flagsplugin.Prefix("ping-slot-periodicity", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	pingSlotDataRateIndexSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ping-slot-data-rate-index", prefix))
	if pingSlotDataRateIndexSet {
		m.PingSlotDataRateIndex = &DataRateIndexValue{}
		if setPaths, err := m.PingSlotDataRateIndex.SetFromFlags(flags, flagsplugin.Prefix("ping-slot-data-rate-index", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	pingSlotFrequencySet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ping-slot-frequency", prefix))
	if pingSlotFrequencySet {
		m.PingSlotFrequency = &FrequencyValue{}
		if setPaths, err := m.PingSlotFrequency.SetFromFlags(flags, flagsplugin.Prefix("ping-slot-frequency", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	beaconFrequencySet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("beacon-frequency", prefix))
	if beaconFrequencySet {
		m.BeaconFrequency = &FrequencyValue{}
		if setPaths, err := m.BeaconFrequency.SetFromFlags(flags, flagsplugin.Prefix("beacon-frequency", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	classCTimeout, classCTimeoutSet, err := flagsplugin.GetDuration(flags, flagsplugin.Prefix("class-c-timeout", prefix))
	if err != nil {
		return paths, err
	}
	if classCTimeoutSet {
		m.ClassCTimeout = gogo.SetDuration(classCTimeout)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("class-c-timeout", prefix)))
	}
	rx1DelaySet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("rx1-delay", prefix))
	if rx1DelaySet {
		m.Rx1Delay = &RxDelayValue{}
		if setPaths, err := m.Rx1Delay.SetFromFlags(flags, flagsplugin.Prefix("rx1-delay", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	rx1DataRateOffsetSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("rx1-data-rate-offset", prefix))
	if rx1DataRateOffsetSet {
		m.Rx1DataRateOffset = &DataRateOffsetValue{}
		if setPaths, err := m.Rx1DataRateOffset.SetFromFlags(flags, flagsplugin.Prefix("rx1-data-rate-offset", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	rx2DataRateIndexSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("rx2-data-rate-index", prefix))
	if rx2DataRateIndexSet {
		m.Rx2DataRateIndex = &DataRateIndexValue{}
		if setPaths, err := m.Rx2DataRateIndex.SetFromFlags(flags, flagsplugin.Prefix("rx2-data-rate-index", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	rx2FrequencySet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("rx2-frequency", prefix))
	if rx2FrequencySet {
		m.Rx2Frequency = &FrequencyValue{}
		if setPaths, err := m.Rx2Frequency.SetFromFlags(flags, flagsplugin.Prefix("rx2-frequency", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	factoryPresetFrequencies, factoryPresetFrequenciesSet, err := flagsplugin.GetUint64Slice(flags, flagsplugin.Prefix("factory-preset-frequencies", prefix))
	if err != nil {
		return paths, err
	}
	if factoryPresetFrequenciesSet {
		m.FactoryPresetFrequencies = factoryPresetFrequencies
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("factory-preset-frequencies", prefix)))
	}
	maxDutyCycleSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("max-duty-cycle", prefix))
	if maxDutyCycleSet {
		m.MaxDutyCycle = &AggregatedDutyCycleValue{}
		if setPaths, err := m.MaxDutyCycle.SetFromFlags(flags, flagsplugin.Prefix("max-duty-cycle", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	supports32BitFCntSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("supports-32-bit-f-cnt", prefix))
	if supports32BitFCntSet {
		m.Supports_32BitFCnt = &BoolValue{}
		if setPaths, err := m.Supports_32BitFCnt.SetFromFlags(flags, flagsplugin.Prefix("supports-32-bit-f-cnt", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	useAdrSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("use-adr", prefix))
	if useAdrSet {
		m.UseAdr = &BoolValue{}
		if setPaths, err := m.UseAdr.SetFromFlags(flags, flagsplugin.Prefix("use-adr", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	adrMargin, adrMarginSet, err := flagsplugin.GetFloat32(flags, flagsplugin.Prefix("adr-margin", prefix))
	if err != nil {
		return paths, err
	}
	if adrMarginSet {
		m.AdrMargin = &types.FloatValue{Value: adrMargin}
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("adr-margin", prefix)))
	}
	resetsFCntSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("resets-f-cnt", prefix))
	if resetsFCntSet {
		m.ResetsFCnt = &BoolValue{}
		if setPaths, err := m.ResetsFCnt.SetFromFlags(flags, flagsplugin.Prefix("resets-f-cnt", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	statusTimePeriodicity, statusTimePeriodicitySet, err := flagsplugin.GetDuration(flags, flagsplugin.Prefix("status-time-periodicity", prefix))
	if err != nil {
		return paths, err
	}
	if statusTimePeriodicitySet {
		m.StatusTimePeriodicity = gogo.SetDuration(statusTimePeriodicity)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("status-time-periodicity", prefix)))
	}
	statusCountPeriodicity, statusCountPeriodicitySet, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("status-count-periodicity", prefix))
	if err != nil {
		return paths, err
	}
	if statusCountPeriodicitySet {
		m.StatusCountPeriodicity = &types.UInt32Value{Value: statusCountPeriodicity}
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("status-count-periodicity", prefix)))
	}
	desiredRx1DelaySet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired-rx1-delay", prefix))
	if desiredRx1DelaySet {
		m.DesiredRx1Delay = &RxDelayValue{}
		if setPaths, err := m.DesiredRx1Delay.SetFromFlags(flags, flagsplugin.Prefix("desired-rx1-delay", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	desiredRx1DataRateOffsetSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired-rx1-data-rate-offset", prefix))
	if desiredRx1DataRateOffsetSet {
		m.DesiredRx1DataRateOffset = &DataRateOffsetValue{}
		if setPaths, err := m.DesiredRx1DataRateOffset.SetFromFlags(flags, flagsplugin.Prefix("desired-rx1-data-rate-offset", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	desiredRx2DataRateIndexSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired-rx2-data-rate-index", prefix))
	if desiredRx2DataRateIndexSet {
		m.DesiredRx2DataRateIndex = &DataRateIndexValue{}
		if setPaths, err := m.DesiredRx2DataRateIndex.SetFromFlags(flags, flagsplugin.Prefix("desired-rx2-data-rate-index", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	desiredRx2FrequencySet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired-rx2-frequency", prefix))
	if desiredRx2FrequencySet {
		m.DesiredRx2Frequency = &FrequencyValue{}
		if setPaths, err := m.DesiredRx2Frequency.SetFromFlags(flags, flagsplugin.Prefix("desired-rx2-frequency", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	desiredMaxDutyCycleSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired-max-duty-cycle", prefix))
	if desiredMaxDutyCycleSet {
		m.DesiredMaxDutyCycle = &AggregatedDutyCycleValue{}
		if setPaths, err := m.DesiredMaxDutyCycle.SetFromFlags(flags, flagsplugin.Prefix("desired-max-duty-cycle", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	desiredAdrAckLimitExponentSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired-adr-ack-limit-exponent", prefix))
	if desiredAdrAckLimitExponentSet {
		m.DesiredAdrAckLimitExponent = &ADRAckLimitExponentValue{}
		if setPaths, err := m.DesiredAdrAckLimitExponent.SetFromFlags(flags, flagsplugin.Prefix("desired-adr-ack-limit-exponent", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	desiredAdrAckDelayExponentSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired-adr-ack-delay-exponent", prefix))
	if desiredAdrAckDelayExponentSet {
		m.DesiredAdrAckDelayExponent = &ADRAckDelayExponentValue{}
		if setPaths, err := m.DesiredAdrAckDelayExponent.SetFromFlags(flags, flagsplugin.Prefix("desired-adr-ack-delay-exponent", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	desiredPingSlotDataRateIndexSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired-ping-slot-data-rate-index", prefix))
	if desiredPingSlotDataRateIndexSet {
		m.DesiredPingSlotDataRateIndex = &DataRateIndexValue{}
		if setPaths, err := m.DesiredPingSlotDataRateIndex.SetFromFlags(flags, flagsplugin.Prefix("desired-ping-slot-data-rate-index", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	desiredPingSlotFrequencySet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired-ping-slot-frequency", prefix))
	if desiredPingSlotFrequencySet {
		m.DesiredPingSlotFrequency = &FrequencyValue{}
		if setPaths, err := m.DesiredPingSlotFrequency.SetFromFlags(flags, flagsplugin.Prefix("desired-ping-slot-frequency", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	desiredBeaconFrequencySet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired-beacon-frequency", prefix))
	if desiredBeaconFrequencySet {
		m.DesiredBeaconFrequency = &FrequencyValue{}
		if setPaths, err := m.DesiredBeaconFrequency.SetFromFlags(flags, flagsplugin.Prefix("desired-beacon-frequency", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	desiredMaxEirpSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired-max-eirp", prefix))
	if desiredMaxEirpSet {
		m.DesiredMaxEirp = &DeviceEIRPValue{}
		if setPaths, err := m.DesiredMaxEirp.SetFromFlags(flags, flagsplugin.Prefix("desired-max-eirp", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	classBCDownlinkInterval, classBCDownlinkIntervalSet, err := flagsplugin.GetDuration(flags, flagsplugin.Prefix("class-b-c-downlink-interval", prefix))
	if err != nil {
		return paths, err
	}
	if classBCDownlinkIntervalSet {
		m.ClassBCDownlinkInterval = gogo.SetDuration(classBCDownlinkInterval)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("class-b-c-downlink-interval", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForMACState adds flags to select fields in MACState.
func AddSelectFlagsForMACState(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("current-parameters", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("current-parameters", prefix), true)))
	AddSelectFlagsForMACParameters(flags, flagsplugin.Prefix("current-parameters", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-parameters", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-parameters", prefix), true)))
	AddSelectFlagsForMACParameters(flags, flagsplugin.Prefix("desired-parameters", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("device-class", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("device-class", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("lorawan-version", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("lorawan-version", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-confirmed-downlink-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-confirmed-downlink-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-dev-status-f-cnt-up", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-dev-status-f-cnt-up", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ping-slot-periodicity", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ping-slot-periodicity", prefix), true)))
	AddSelectFlagsForPingSlotPeriodValue(flags, flagsplugin.Prefix("ping-slot-periodicity", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("pending-application-downlink", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("pending-application-downlink", prefix), true)))
	AddSelectFlagsForApplicationDownlink(flags, flagsplugin.Prefix("pending-application-downlink", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("queued-responses", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("queued-responses", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("pending-requests", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("pending-requests", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("queued-join-accept", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("queued-join-accept", prefix), true)))
	// NOTE: queued_join_accept (MACState_JoinAccept) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("pending-join-request", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("pending-join-request", prefix), true)))
	// NOTE: pending_join_request (MACState_JoinRequest) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx-windows-available", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx-windows-available", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("recent-uplinks", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("recent-uplinks", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("recent-downlinks", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("recent-downlinks", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-network-initiated-downlink-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-network-initiated-downlink-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rejected-adr-data-rate-indexes", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rejected-adr-data-rate-indexes", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rejected-adr-tx-power-indexes", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rejected-adr-tx-power-indexes", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rejected-frequencies", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rejected-frequencies", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-downlink-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-downlink-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rejected-data-rate-ranges", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rejected-data-rate-ranges", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-adr-change-f-cnt-up", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-adr-change-f-cnt-up", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forMACState message from select flags.
func PathsFromSelectFlagsForMACState(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	currentParameters, currentParametersSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("current-parameters", prefix))
	if err != nil {
		return paths, err
	}
	if currentParametersSelect && currentParameters {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("current-parameters", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForMACParameters(flags, flagsplugin.Prefix("current-parameters", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	desiredParameters, desiredParametersSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired-parameters", prefix))
	if err != nil {
		return paths, err
	}
	if desiredParametersSelect && desiredParameters {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("desired-parameters", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForMACParameters(flags, flagsplugin.Prefix("desired-parameters", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	deviceClass, deviceClassSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("device-class", prefix))
	if err != nil {
		return paths, err
	}
	if deviceClassSelect && deviceClass {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("device-class", prefix)))
	}
	lorawanVersion, lorawanVersionSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("lorawan-version", prefix))
	if err != nil {
		return paths, err
	}
	if lorawanVersionSelect && lorawanVersion {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("lorawan-version", prefix)))
	}
	lastConfirmedDownlinkAt, lastConfirmedDownlinkAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last-confirmed-downlink-at", prefix))
	if err != nil {
		return paths, err
	}
	if lastConfirmedDownlinkAtSelect && lastConfirmedDownlinkAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("last-confirmed-downlink-at", prefix)))
	}
	lastDevStatusFCntUp, lastDevStatusFCntUpSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last-dev-status-f-cnt-up", prefix))
	if err != nil {
		return paths, err
	}
	if lastDevStatusFCntUpSelect && lastDevStatusFCntUp {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("last-dev-status-f-cnt-up", prefix)))
	}
	pingSlotPeriodicity, pingSlotPeriodicitySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ping-slot-periodicity", prefix))
	if err != nil {
		return paths, err
	}
	if pingSlotPeriodicitySelect && pingSlotPeriodicity {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("ping-slot-periodicity", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForPingSlotPeriodValue(flags, flagsplugin.Prefix("ping-slot-periodicity", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	pendingApplicationDownlink, pendingApplicationDownlinkSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("pending-application-downlink", prefix))
	if err != nil {
		return paths, err
	}
	if pendingApplicationDownlinkSelect && pendingApplicationDownlink {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("pending-application-downlink", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationDownlink(flags, flagsplugin.Prefix("pending-application-downlink", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	queuedResponses, queuedResponsesSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("queued-responses", prefix))
	if err != nil {
		return paths, err
	}
	if queuedResponsesSelect && queuedResponses {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("queued-responses", prefix)))
	}
	pendingRequests, pendingRequestsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("pending-requests", prefix))
	if err != nil {
		return paths, err
	}
	if pendingRequestsSelect && pendingRequests {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("pending-requests", prefix)))
	}
	queuedJoinAccept, queuedJoinAcceptSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("queued-join-accept", prefix))
	if err != nil {
		return paths, err
	}
	if queuedJoinAcceptSelect && queuedJoinAccept {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("queued-join-accept", prefix)))
	}
	// NOTE: queued_join_accept (MACState_JoinAccept) does not seem to have select flags.
	pendingJoinRequest, pendingJoinRequestSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("pending-join-request", prefix))
	if err != nil {
		return paths, err
	}
	if pendingJoinRequestSelect && pendingJoinRequest {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("pending-join-request", prefix)))
	}
	// NOTE: pending_join_request (MACState_JoinRequest) does not seem to have select flags.
	rxWindowsAvailable, rxWindowsAvailableSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx-windows-available", prefix))
	if err != nil {
		return paths, err
	}
	if rxWindowsAvailableSelect && rxWindowsAvailable {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rx-windows-available", prefix)))
	}
	recentUplinks, recentUplinksSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("recent-uplinks", prefix))
	if err != nil {
		return paths, err
	}
	if recentUplinksSelect && recentUplinks {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("recent-uplinks", prefix)))
	}
	recentDownlinks, recentDownlinksSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("recent-downlinks", prefix))
	if err != nil {
		return paths, err
	}
	if recentDownlinksSelect && recentDownlinks {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("recent-downlinks", prefix)))
	}
	lastNetworkInitiatedDownlinkAt, lastNetworkInitiatedDownlinkAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last-network-initiated-downlink-at", prefix))
	if err != nil {
		return paths, err
	}
	if lastNetworkInitiatedDownlinkAtSelect && lastNetworkInitiatedDownlinkAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("last-network-initiated-downlink-at", prefix)))
	}
	rejectedAdrDataRateIndexes, rejectedAdrDataRateIndexesSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rejected-adr-data-rate-indexes", prefix))
	if err != nil {
		return paths, err
	}
	if rejectedAdrDataRateIndexesSelect && rejectedAdrDataRateIndexes {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rejected-adr-data-rate-indexes", prefix)))
	}
	rejectedAdrTxPowerIndexes, rejectedAdrTxPowerIndexesSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rejected-adr-tx-power-indexes", prefix))
	if err != nil {
		return paths, err
	}
	if rejectedAdrTxPowerIndexesSelect && rejectedAdrTxPowerIndexes {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rejected-adr-tx-power-indexes", prefix)))
	}
	rejectedFrequencies, rejectedFrequenciesSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rejected-frequencies", prefix))
	if err != nil {
		return paths, err
	}
	if rejectedFrequenciesSelect && rejectedFrequencies {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rejected-frequencies", prefix)))
	}
	lastDownlinkAt, lastDownlinkAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last-downlink-at", prefix))
	if err != nil {
		return paths, err
	}
	if lastDownlinkAtSelect && lastDownlinkAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("last-downlink-at", prefix)))
	}
	rejectedDataRateRanges, rejectedDataRateRangesSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rejected-data-rate-ranges", prefix))
	if err != nil {
		return paths, err
	}
	if rejectedDataRateRangesSelect && rejectedDataRateRanges {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rejected-data-rate-ranges", prefix)))
	}
	lastAdrChangeFCntUp, lastAdrChangeFCntUpSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last-adr-change-f-cnt-up", prefix))
	if err != nil {
		return paths, err
	}
	if lastAdrChangeFCntUpSelect && lastAdrChangeFCntUp {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("last-adr-change-f-cnt-up", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForMACState adds flags to select fields in MACState.
func AddSetFlagsForMACState(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForMACParameters(flags, flagsplugin.Prefix("current-parameters", prefix))
	AddSetFlagsForMACParameters(flags, flagsplugin.Prefix("desired-parameters", prefix))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("device-class", prefix), flagsplugin.EnumValueDesc(Class_value)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("lorawan-version", prefix), flagsplugin.EnumValueDesc(MACVersion_value)))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("last-confirmed-downlink-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("last-dev-status-f-cnt-up", prefix), ""))
	AddSetFlagsForPingSlotPeriodValue(flags, flagsplugin.Prefix("ping-slot-periodicity", prefix))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("ping-slot-periodicity.value", prefix), flagsplugin.Prefix("ping-slot-periodicity", prefix))
	AddSetFlagsForApplicationDownlink(flags, flagsplugin.Prefix("pending-application-downlink", prefix))
	// FIXME: Skipping QueuedResponses because repeated messages are currently not supported.
	// FIXME: Skipping PendingRequests because repeated messages are currently not supported.
	// FIXME: Skipping QueuedJoinAccept because it does not seem to implement AddSetFlags.
	// FIXME: Skipping PendingJoinRequest because it does not seem to implement AddSetFlags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx-windows-available", prefix), ""))
	// FIXME: Skipping RecentUplinks because repeated messages are currently not supported.
	// FIXME: Skipping RecentDownlinks because repeated messages are currently not supported.
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("last-network-initiated-downlink-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("rejected-adr-data-rate-indexes", prefix), ""))
	flags.AddFlag(flagsplugin.NewUint32SliceFlag(flagsplugin.Prefix("rejected-adr-tx-power-indexes", prefix), ""))
	flags.AddFlag(flagsplugin.NewUint64SliceFlag(flagsplugin.Prefix("rejected-frequencies", prefix), ""))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("last-downlink-at", prefix), ""))
	// FIXME: Skipping RejectedDataRateRanges because maps with uint64 key types are currently not supported.
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("last-adr-change-f-cnt-up", prefix), ""))
}

// SetFromFlags sets the MACState message from flags.
func (m *MACState) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	currentParametersSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("current-parameters", prefix))
	if currentParametersSet {
		m.CurrentParameters = &MACParameters{}
		if setPaths, err := m.CurrentParameters.SetFromFlags(flags, flagsplugin.Prefix("current-parameters", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	desiredParametersSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired-parameters", prefix))
	if desiredParametersSet {
		m.DesiredParameters = &MACParameters{}
		if setPaths, err := m.DesiredParameters.SetFromFlags(flags, flagsplugin.Prefix("desired-parameters", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	deviceClass, deviceClassSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("device-class", prefix))
	if err != nil {
		return paths, err
	}
	if deviceClassSet {
		enumValue, err := flagsplugin.SetEnumString(deviceClass, Class_value)
		if err != nil {
			return paths, err
		}
		m.DeviceClass = Class(enumValue)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("device-class", prefix)))
	}
	lorawanVersion, lorawanVersionSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("lorawan-version", prefix))
	if err != nil {
		return paths, err
	}
	if lorawanVersionSet {
		enumValue, err := flagsplugin.SetEnumString(lorawanVersion, MACVersion_value)
		if err != nil {
			return paths, err
		}
		m.LorawanVersion = MACVersion(enumValue)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("lorawan-version", prefix)))
	}
	lastConfirmedDownlinkAt, lastConfirmedDownlinkAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("last-confirmed-downlink-at", prefix))
	if err != nil {
		return paths, err
	}
	if lastConfirmedDownlinkAtSet {
		m.LastConfirmedDownlinkAt = gogo.SetTimestamp(lastConfirmedDownlinkAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("last-confirmed-downlink-at", prefix)))
	}
	lastDevStatusFCntUp, lastDevStatusFCntUpSet, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("last-dev-status-f-cnt-up", prefix))
	if err != nil {
		return paths, err
	}
	if lastDevStatusFCntUpSet {
		m.LastDevStatusFCntUp = lastDevStatusFCntUp
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("last-dev-status-f-cnt-up", prefix)))
	}
	pingSlotPeriodicitySet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ping-slot-periodicity", prefix))
	if pingSlotPeriodicitySet {
		m.PingSlotPeriodicity = &PingSlotPeriodValue{}
		if setPaths, err := m.PingSlotPeriodicity.SetFromFlags(flags, flagsplugin.Prefix("ping-slot-periodicity", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	pendingApplicationDownlinkSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("pending-application-downlink", prefix))
	if pendingApplicationDownlinkSet {
		m.PendingApplicationDownlink = &ApplicationDownlink{}
		if setPaths, err := m.PendingApplicationDownlink.SetFromFlags(flags, flagsplugin.Prefix("pending-application-downlink", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	// FIXME: Skipping QueuedResponses because it does not seem to implement AddSetFlags.
	// FIXME: Skipping PendingRequests because it does not seem to implement AddSetFlags.
	// FIXME: Skipping QueuedJoinAccept because it does not seem to implement AddSetFlags.
	// FIXME: Skipping PendingJoinRequest because it does not seem to implement AddSetFlags.
	rxWindowsAvailable, rxWindowsAvailableSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx-windows-available", prefix))
	if err != nil {
		return paths, err
	}
	if rxWindowsAvailableSet {
		m.RxWindowsAvailable = rxWindowsAvailable
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rx-windows-available", prefix)))
	}
	// FIXME: Skipping RecentUplinks because it does not seem to implement AddSetFlags.
	// FIXME: Skipping RecentDownlinks because it does not seem to implement AddSetFlags.
	lastNetworkInitiatedDownlinkAt, lastNetworkInitiatedDownlinkAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("last-network-initiated-downlink-at", prefix))
	if err != nil {
		return paths, err
	}
	if lastNetworkInitiatedDownlinkAtSet {
		m.LastNetworkInitiatedDownlinkAt = gogo.SetTimestamp(lastNetworkInitiatedDownlinkAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("last-network-initiated-downlink-at", prefix)))
	}
	rejectedAdrDataRateIndexes, rejectedAdrDataRateIndexesSet, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("rejected-adr-data-rate-indexes", prefix))
	if err != nil {
		return paths, err
	}
	if rejectedAdrDataRateIndexesSet {
		for _, v := range rejectedAdrDataRateIndexes {
			enumValue, err := flagsplugin.SetEnumString(v, DataRateIndex_value)
			if err != nil {
				return paths, err
			}
			m.RejectedAdrDataRateIndexes = append(m.RejectedAdrDataRateIndexes, DataRateIndex(enumValue))
		}
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rejected-adr-data-rate-indexes", prefix)))
	}
	rejectedAdrTxPowerIndexes, rejectedAdrTxPowerIndexesSet, err := flagsplugin.GetUint32Slice(flags, flagsplugin.Prefix("rejected-adr-tx-power-indexes", prefix))
	if err != nil {
		return paths, err
	}
	if rejectedAdrTxPowerIndexesSet {
		m.RejectedAdrTxPowerIndexes = rejectedAdrTxPowerIndexes
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rejected-adr-tx-power-indexes", prefix)))
	}
	rejectedFrequencies, rejectedFrequenciesSet, err := flagsplugin.GetUint64Slice(flags, flagsplugin.Prefix("rejected-frequencies", prefix))
	if err != nil {
		return paths, err
	}
	if rejectedFrequenciesSet {
		m.RejectedFrequencies = rejectedFrequencies
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("rejected-frequencies", prefix)))
	}
	lastDownlinkAt, lastDownlinkAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("last-downlink-at", prefix))
	if err != nil {
		return paths, err
	}
	if lastDownlinkAtSet {
		m.LastDownlinkAt = gogo.SetTimestamp(lastDownlinkAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("last-downlink-at", prefix)))
	}
	// FIXME: Skipping RejectedDataRateRanges because maps with uint64 key types are currently not supported.
	lastAdrChangeFCntUp, lastAdrChangeFCntUpSet, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("last-adr-change-f-cnt-up", prefix))
	if err != nil {
		return paths, err
	}
	if lastAdrChangeFCntUpSet {
		m.LastAdrChangeFCntUp = lastAdrChangeFCntUp
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("last-adr-change-f-cnt-up", prefix)))
	}
	return paths, nil
}

// AddSelectFlagsForEndDevice adds flags to select fields in EndDevice.
func AddSelectFlagsForEndDevice(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ids", prefix), true)))
	AddSelectFlagsForEndDeviceIdentifiers(flags, flagsplugin.Prefix("ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("created-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("created-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("updated-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("updated-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("name", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("name", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("description", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("description", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("attributes", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("attributes", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("version-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("version-ids", prefix), true)))
	AddSelectFlagsForEndDeviceVersionIdentifiers(flags, flagsplugin.Prefix("version-ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("service-profile-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("service-profile-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("network-server-address", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("network-server-address", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("network-server-kek-label", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("network-server-kek-label", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("application-server-address", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("application-server-address", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("application-server-kek-label", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("application-server-kek-label", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("application-server-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("application-server-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("join-server-address", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("join-server-address", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("locations", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("locations", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("picture", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("picture", prefix), true)))
	// NOTE: picture (Picture) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("supports-class-b", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("supports-class-b", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("supports-class-c", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("supports-class-c", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("lorawan-version", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("lorawan-version", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("lorawan-phy-version", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("lorawan-phy-version", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("frequency-plan-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("frequency-plan-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("min-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("min-frequency", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("max-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("max-frequency", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("supports-join", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("supports-join", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("resets-join-nonces", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("resets-join-nonces", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("root-keys", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("root-keys", prefix), true)))
	AddSelectFlagsForRootKeys(flags, flagsplugin.Prefix("root-keys", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("net-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("net-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mac-settings", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("mac-settings", prefix), true)))
	AddSelectFlagsForMACSettings(flags, flagsplugin.Prefix("mac-settings", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mac-state", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("mac-state", prefix), true)))
	AddSelectFlagsForMACState(flags, flagsplugin.Prefix("mac-state", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("pending-mac-state", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("pending-mac-state", prefix), true)))
	AddSelectFlagsForMACState(flags, flagsplugin.Prefix("pending-mac-state", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("session", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("session", prefix), true)))
	// NOTE: session (Session) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("pending-session", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("pending-session", prefix), true)))
	// NOTE: pending_session (Session) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-dev-nonce", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-dev-nonce", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("used-dev-nonces", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("used-dev-nonces", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-join-nonce", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-join-nonce", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-rj-count-0", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-rj-count-0", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-rj-count-1", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-rj-count-1", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-dev-status-received-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-dev-status-received-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("power-state", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("power-state", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("battery-percentage", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("battery-percentage", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-margin", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-margin", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("queued-application-downlinks", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("queued-application-downlinks", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("formatters", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("formatters", prefix), true)))
	AddSelectFlagsForMessagePayloadFormatters(flags, flagsplugin.Prefix("formatters", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("provisioner-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("provisioner-id", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("provisioning-data", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("provisioning-data", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("multicast", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("multicast", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("claim-authentication-code", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("claim-authentication-code", prefix), true)))
	// NOTE: claim_authentication_code (EndDeviceAuthenticationCode) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("skip-payload-crypto", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("skip-payload-crypto", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("skip-payload-crypto-override", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("skip-payload-crypto-override", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("activated-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("activated-at", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forEndDevice message from select flags.
func PathsFromSelectFlagsForEndDevice(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	ids, idsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ids", prefix))
	if err != nil {
		return paths, err
	}
	if idsSelect && ids {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("ids", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForEndDeviceIdentifiers(flags, flagsplugin.Prefix("ids", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	createdAt, createdAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("created-at", prefix))
	if err != nil {
		return paths, err
	}
	if createdAtSelect && createdAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("created-at", prefix)))
	}
	updatedAt, updatedAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("updated-at", prefix))
	if err != nil {
		return paths, err
	}
	if updatedAtSelect && updatedAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("updated-at", prefix)))
	}
	name, nameSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("name", prefix))
	if err != nil {
		return paths, err
	}
	if nameSelect && name {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("name", prefix)))
	}
	description, descriptionSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("description", prefix))
	if err != nil {
		return paths, err
	}
	if descriptionSelect && description {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("description", prefix)))
	}
	attributes, attributesSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("attributes", prefix))
	if err != nil {
		return paths, err
	}
	if attributesSelect && attributes {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("attributes", prefix)))
	}
	versionIds, versionIdsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("version-ids", prefix))
	if err != nil {
		return paths, err
	}
	if versionIdsSelect && versionIds {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("version-ids", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForEndDeviceVersionIdentifiers(flags, flagsplugin.Prefix("version-ids", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	serviceProfileId, serviceProfileIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("service-profile-id", prefix))
	if err != nil {
		return paths, err
	}
	if serviceProfileIdSelect && serviceProfileId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("service-profile-id", prefix)))
	}
	networkServerAddress, networkServerAddressSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("network-server-address", prefix))
	if err != nil {
		return paths, err
	}
	if networkServerAddressSelect && networkServerAddress {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("network-server-address", prefix)))
	}
	networkServerKekLabel, networkServerKekLabelSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("network-server-kek-label", prefix))
	if err != nil {
		return paths, err
	}
	if networkServerKekLabelSelect && networkServerKekLabel {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("network-server-kek-label", prefix)))
	}
	applicationServerAddress, applicationServerAddressSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("application-server-address", prefix))
	if err != nil {
		return paths, err
	}
	if applicationServerAddressSelect && applicationServerAddress {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("application-server-address", prefix)))
	}
	applicationServerKekLabel, applicationServerKekLabelSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("application-server-kek-label", prefix))
	if err != nil {
		return paths, err
	}
	if applicationServerKekLabelSelect && applicationServerKekLabel {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("application-server-kek-label", prefix)))
	}
	applicationServerId, applicationServerIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("application-server-id", prefix))
	if err != nil {
		return paths, err
	}
	if applicationServerIdSelect && applicationServerId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("application-server-id", prefix)))
	}
	joinServerAddress, joinServerAddressSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("join-server-address", prefix))
	if err != nil {
		return paths, err
	}
	if joinServerAddressSelect && joinServerAddress {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("join-server-address", prefix)))
	}
	locations, locationsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("locations", prefix))
	if err != nil {
		return paths, err
	}
	if locationsSelect && locations {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("locations", prefix)))
	}
	picture, pictureSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("picture", prefix))
	if err != nil {
		return paths, err
	}
	if pictureSelect && picture {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("picture", prefix)))
	}
	// NOTE: picture (Picture) does not seem to have select flags.
	supportsClassB, supportsClassBSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("supports-class-b", prefix))
	if err != nil {
		return paths, err
	}
	if supportsClassBSelect && supportsClassB {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("supports-class-b", prefix)))
	}
	supportsClassC, supportsClassCSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("supports-class-c", prefix))
	if err != nil {
		return paths, err
	}
	if supportsClassCSelect && supportsClassC {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("supports-class-c", prefix)))
	}
	lorawanVersion, lorawanVersionSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("lorawan-version", prefix))
	if err != nil {
		return paths, err
	}
	if lorawanVersionSelect && lorawanVersion {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("lorawan-version", prefix)))
	}
	lorawanPhyVersion, lorawanPhyVersionSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("lorawan-phy-version", prefix))
	if err != nil {
		return paths, err
	}
	if lorawanPhyVersionSelect && lorawanPhyVersion {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("lorawan-phy-version", prefix)))
	}
	frequencyPlanId, frequencyPlanIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("frequency-plan-id", prefix))
	if err != nil {
		return paths, err
	}
	if frequencyPlanIdSelect && frequencyPlanId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("frequency-plan-id", prefix)))
	}
	minFrequency, minFrequencySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("min-frequency", prefix))
	if err != nil {
		return paths, err
	}
	if minFrequencySelect && minFrequency {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("min-frequency", prefix)))
	}
	maxFrequency, maxFrequencySelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("max-frequency", prefix))
	if err != nil {
		return paths, err
	}
	if maxFrequencySelect && maxFrequency {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("max-frequency", prefix)))
	}
	supportsJoin, supportsJoinSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("supports-join", prefix))
	if err != nil {
		return paths, err
	}
	if supportsJoinSelect && supportsJoin {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("supports-join", prefix)))
	}
	resetsJoinNonces, resetsJoinNoncesSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("resets-join-nonces", prefix))
	if err != nil {
		return paths, err
	}
	if resetsJoinNoncesSelect && resetsJoinNonces {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("resets-join-nonces", prefix)))
	}
	rootKeys, rootKeysSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("root-keys", prefix))
	if err != nil {
		return paths, err
	}
	if rootKeysSelect && rootKeys {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("root-keys", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForRootKeys(flags, flagsplugin.Prefix("root-keys", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	netId, netIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("net-id", prefix))
	if err != nil {
		return paths, err
	}
	if netIdSelect && netId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("net-id", prefix)))
	}
	macSettings, macSettingsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("mac-settings", prefix))
	if err != nil {
		return paths, err
	}
	if macSettingsSelect && macSettings {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("mac-settings", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForMACSettings(flags, flagsplugin.Prefix("mac-settings", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	macState, macStateSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("mac-state", prefix))
	if err != nil {
		return paths, err
	}
	if macStateSelect && macState {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("mac-state", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForMACState(flags, flagsplugin.Prefix("mac-state", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	pendingMacState, pendingMacStateSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("pending-mac-state", prefix))
	if err != nil {
		return paths, err
	}
	if pendingMacStateSelect && pendingMacState {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("pending-mac-state", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForMACState(flags, flagsplugin.Prefix("pending-mac-state", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	session, sessionSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("session", prefix))
	if err != nil {
		return paths, err
	}
	if sessionSelect && session {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("session", prefix)))
	}
	// NOTE: session (Session) does not seem to have select flags.
	pendingSession, pendingSessionSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("pending-session", prefix))
	if err != nil {
		return paths, err
	}
	if pendingSessionSelect && pendingSession {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("pending-session", prefix)))
	}
	// NOTE: pending_session (Session) does not seem to have select flags.
	lastDevNonce, lastDevNonceSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last-dev-nonce", prefix))
	if err != nil {
		return paths, err
	}
	if lastDevNonceSelect && lastDevNonce {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("last-dev-nonce", prefix)))
	}
	usedDevNonces, usedDevNoncesSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("used-dev-nonces", prefix))
	if err != nil {
		return paths, err
	}
	if usedDevNoncesSelect && usedDevNonces {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("used-dev-nonces", prefix)))
	}
	lastJoinNonce, lastJoinNonceSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last-join-nonce", prefix))
	if err != nil {
		return paths, err
	}
	if lastJoinNonceSelect && lastJoinNonce {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("last-join-nonce", prefix)))
	}
	lastRjCount0, lastRjCount0Select, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last-rj-count-0", prefix))
	if err != nil {
		return paths, err
	}
	if lastRjCount0Select && lastRjCount0 {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("last-rj-count-0", prefix)))
	}
	lastRjCount1, lastRjCount1Select, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last-rj-count-1", prefix))
	if err != nil {
		return paths, err
	}
	if lastRjCount1Select && lastRjCount1 {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("last-rj-count-1", prefix)))
	}
	lastDevStatusReceivedAt, lastDevStatusReceivedAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last-dev-status-received-at", prefix))
	if err != nil {
		return paths, err
	}
	if lastDevStatusReceivedAtSelect && lastDevStatusReceivedAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("last-dev-status-received-at", prefix)))
	}
	powerState, powerStateSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("power-state", prefix))
	if err != nil {
		return paths, err
	}
	if powerStateSelect && powerState {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("power-state", prefix)))
	}
	batteryPercentage, batteryPercentageSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("battery-percentage", prefix))
	if err != nil {
		return paths, err
	}
	if batteryPercentageSelect && batteryPercentage {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("battery-percentage", prefix)))
	}
	downlinkMargin, downlinkMarginSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink-margin", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkMarginSelect && downlinkMargin {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("downlink-margin", prefix)))
	}
	queuedApplicationDownlinks, queuedApplicationDownlinksSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("queued-application-downlinks", prefix))
	if err != nil {
		return paths, err
	}
	if queuedApplicationDownlinksSelect && queuedApplicationDownlinks {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("queued-application-downlinks", prefix)))
	}
	formatters, formattersSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("formatters", prefix))
	if err != nil {
		return paths, err
	}
	if formattersSelect && formatters {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("formatters", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForMessagePayloadFormatters(flags, flagsplugin.Prefix("formatters", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	provisionerId, provisionerIdSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("provisioner-id", prefix))
	if err != nil {
		return paths, err
	}
	if provisionerIdSelect && provisionerId {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("provisioner-id", prefix)))
	}
	provisioningData, provisioningDataSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("provisioning-data", prefix))
	if err != nil {
		return paths, err
	}
	if provisioningDataSelect && provisioningData {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("provisioning-data", prefix)))
	}
	multicast, multicastSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("multicast", prefix))
	if err != nil {
		return paths, err
	}
	if multicastSelect && multicast {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("multicast", prefix)))
	}
	claimAuthenticationCode, claimAuthenticationCodeSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("claim-authentication-code", prefix))
	if err != nil {
		return paths, err
	}
	if claimAuthenticationCodeSelect && claimAuthenticationCode {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("claim-authentication-code", prefix)))
	}
	// NOTE: claim_authentication_code (EndDeviceAuthenticationCode) does not seem to have select flags.
	skipPayloadCrypto, skipPayloadCryptoSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("skip-payload-crypto", prefix))
	if err != nil {
		return paths, err
	}
	if skipPayloadCryptoSelect && skipPayloadCrypto {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("skip-payload-crypto", prefix)))
	}
	skipPayloadCryptoOverride, skipPayloadCryptoOverrideSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("skip-payload-crypto-override", prefix))
	if err != nil {
		return paths, err
	}
	if skipPayloadCryptoOverrideSelect && skipPayloadCryptoOverride {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("skip-payload-crypto-override", prefix)))
	}
	activatedAt, activatedAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("activated-at", prefix))
	if err != nil {
		return paths, err
	}
	if activatedAtSelect && activatedAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("activated-at", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForEndDevice adds flags to select fields in EndDevice.
func AddSetFlagsForEndDevice(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForEndDeviceIdentifiers(flags, flagsplugin.Prefix("ids", prefix))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("created-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("updated-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("name", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("description", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringStringMapFlag(flagsplugin.Prefix("attributes", prefix), ""))
	AddSetFlagsForEndDeviceVersionIdentifiers(flags, flagsplugin.Prefix("version-ids", prefix))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("service-profile-id", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("network-server-address", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("network-server-kek-label", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("application-server-address", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("application-server-kek-label", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("application-server-id", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("join-server-address", prefix), ""))
	// FIXME: Skipping Locations because maps with message value types are currently not supported.
	// FIXME: Skipping Picture because it does not seem to implement AddSetFlags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("supports-class-b", prefix), ""))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("supports-class-c", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("lorawan-version", prefix), flagsplugin.EnumValueDesc(MACVersion_value)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("lorawan-phy-version", prefix), flagsplugin.EnumValueDesc(PHYVersion_value)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("frequency-plan-id", prefix), ""))
	flags.AddFlag(flagsplugin.NewUint64Flag(flagsplugin.Prefix("min-frequency", prefix), ""))
	flags.AddFlag(flagsplugin.NewUint64Flag(flagsplugin.Prefix("max-frequency", prefix), ""))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("supports-join", prefix), ""))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("resets-join-nonces", prefix), ""))
	AddSetFlagsForRootKeys(flags, flagsplugin.Prefix("root-keys", prefix))
	flags.AddFlag(custom_flags.New3BytesFlag(flagsplugin.Prefix("net-id", prefix), ""))
	AddSetFlagsForMACSettings(flags, flagsplugin.Prefix("mac-settings", prefix))
	AddSetFlagsForMACState(flags, flagsplugin.Prefix("mac-state", prefix))
	AddSetFlagsForMACState(flags, flagsplugin.Prefix("pending-mac-state", prefix))
	// FIXME: Skipping Session because it does not seem to implement AddSetFlags.
	// FIXME: Skipping PendingSession because it does not seem to implement AddSetFlags.
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("last-dev-nonce", prefix), ""))
	flags.AddFlag(flagsplugin.NewUint32SliceFlag(flagsplugin.Prefix("used-dev-nonces", prefix), ""))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("last-join-nonce", prefix), ""))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("last-rj-count-0", prefix), ""))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("last-rj-count-1", prefix), ""))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("last-dev-status-received-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("power-state", prefix), flagsplugin.EnumValueDesc(PowerState_value)))
	flags.AddFlag(flagsplugin.NewFloat32Flag(flagsplugin.Prefix("battery-percentage", prefix), ""))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("battery-percentage", prefix), flagsplugin.Prefix("battery-percentage.value", prefix))
	flags.AddFlag(flagsplugin.NewInt32Flag(flagsplugin.Prefix("downlink-margin", prefix), ""))
	// FIXME: Skipping QueuedApplicationDownlinks because repeated messages are currently not supported.
	AddSetFlagsForMessagePayloadFormatters(flags, flagsplugin.Prefix("formatters", prefix))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("provisioner-id", prefix), ""))
	// FIXME: Skipping ProvisioningData because this WKT is currently not supported.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("multicast", prefix), ""))
	// FIXME: Skipping ClaimAuthenticationCode because it does not seem to implement AddSetFlags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("skip-payload-crypto", prefix), ""))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("skip-payload-crypto-override", prefix), ""))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("skip-payload-crypto-override", prefix), flagsplugin.Prefix("skip-payload-crypto-override.value", prefix))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("activated-at", prefix), ""))
}

// SetFromFlags sets the EndDevice message from flags.
func (m *EndDevice) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	idsSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ids", prefix))
	if idsSet {
		m.Ids = &EndDeviceIdentifiers{}
		if setPaths, err := m.Ids.SetFromFlags(flags, flagsplugin.Prefix("ids", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	createdAt, createdAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("created-at", prefix))
	if err != nil {
		return paths, err
	}
	if createdAtSet {
		m.CreatedAt = gogo.SetTimestamp(createdAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("created-at", prefix)))
	}
	updatedAt, updatedAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("updated-at", prefix))
	if err != nil {
		return paths, err
	}
	if updatedAtSet {
		m.UpdatedAt = gogo.SetTimestamp(updatedAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("updated-at", prefix)))
	}
	name, nameSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("name", prefix))
	if err != nil {
		return paths, err
	}
	if nameSet {
		m.Name = name
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("name", prefix)))
	}
	description, descriptionSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("description", prefix))
	if err != nil {
		return paths, err
	}
	if descriptionSet {
		m.Description = description
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("description", prefix)))
	}
	attributes, attributesSet, err := flagsplugin.GetStringStringMap(flags, flagsplugin.Prefix("attributes", prefix))
	if err != nil {
		return paths, err
	}
	if attributesSet {
		m.Attributes = attributes
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("attributes", prefix)))
	}
	versionIdsSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("version-ids", prefix))
	if versionIdsSet {
		m.VersionIds = &EndDeviceVersionIdentifiers{}
		if setPaths, err := m.VersionIds.SetFromFlags(flags, flagsplugin.Prefix("version-ids", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	serviceProfileId, serviceProfileIdSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("service-profile-id", prefix))
	if err != nil {
		return paths, err
	}
	if serviceProfileIdSet {
		m.ServiceProfileId = serviceProfileId
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("service-profile-id", prefix)))
	}
	networkServerAddress, networkServerAddressSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("network-server-address", prefix))
	if err != nil {
		return paths, err
	}
	if networkServerAddressSet {
		m.NetworkServerAddress = networkServerAddress
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("network-server-address", prefix)))
	}
	networkServerKekLabel, networkServerKekLabelSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("network-server-kek-label", prefix))
	if err != nil {
		return paths, err
	}
	if networkServerKekLabelSet {
		m.NetworkServerKekLabel = networkServerKekLabel
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("network-server-kek-label", prefix)))
	}
	applicationServerAddress, applicationServerAddressSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("application-server-address", prefix))
	if err != nil {
		return paths, err
	}
	if applicationServerAddressSet {
		m.ApplicationServerAddress = applicationServerAddress
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("application-server-address", prefix)))
	}
	applicationServerKekLabel, applicationServerKekLabelSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("application-server-kek-label", prefix))
	if err != nil {
		return paths, err
	}
	if applicationServerKekLabelSet {
		m.ApplicationServerKekLabel = applicationServerKekLabel
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("application-server-kek-label", prefix)))
	}
	applicationServerId, applicationServerIdSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("application-server-id", prefix))
	if err != nil {
		return paths, err
	}
	if applicationServerIdSet {
		m.ApplicationServerId = applicationServerId
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("application-server-id", prefix)))
	}
	joinServerAddress, joinServerAddressSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("join-server-address", prefix))
	if err != nil {
		return paths, err
	}
	if joinServerAddressSet {
		m.JoinServerAddress = joinServerAddress
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("join-server-address", prefix)))
	}
	// FIXME: Skipping Locations because maps with message value types are currently not supported.
	// FIXME: Skipping Picture because it does not seem to implement AddSetFlags.
	supportsClassB, supportsClassBSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("supports-class-b", prefix))
	if err != nil {
		return paths, err
	}
	if supportsClassBSet {
		m.SupportsClassB = supportsClassB
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("supports-class-b", prefix)))
	}
	supportsClassC, supportsClassCSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("supports-class-c", prefix))
	if err != nil {
		return paths, err
	}
	if supportsClassCSet {
		m.SupportsClassC = supportsClassC
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("supports-class-c", prefix)))
	}
	lorawanVersion, lorawanVersionSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("lorawan-version", prefix))
	if err != nil {
		return paths, err
	}
	if lorawanVersionSet {
		enumValue, err := flagsplugin.SetEnumString(lorawanVersion, MACVersion_value)
		if err != nil {
			return paths, err
		}
		m.LorawanVersion = MACVersion(enumValue)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("lorawan-version", prefix)))
	}
	lorawanPhyVersion, lorawanPhyVersionSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("lorawan-phy-version", prefix))
	if err != nil {
		return paths, err
	}
	if lorawanPhyVersionSet {
		enumValue, err := flagsplugin.SetEnumString(lorawanPhyVersion, PHYVersion_value)
		if err != nil {
			return paths, err
		}
		m.LorawanPhyVersion = PHYVersion(enumValue)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("lorawan-phy-version", prefix)))
	}
	frequencyPlanId, frequencyPlanIdSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("frequency-plan-id", prefix))
	if err != nil {
		return paths, err
	}
	if frequencyPlanIdSet {
		m.FrequencyPlanId = frequencyPlanId
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("frequency-plan-id", prefix)))
	}
	minFrequency, minFrequencySet, err := flagsplugin.GetUint64(flags, flagsplugin.Prefix("min-frequency", prefix))
	if err != nil {
		return paths, err
	}
	if minFrequencySet {
		m.MinFrequency = minFrequency
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("min-frequency", prefix)))
	}
	maxFrequency, maxFrequencySet, err := flagsplugin.GetUint64(flags, flagsplugin.Prefix("max-frequency", prefix))
	if err != nil {
		return paths, err
	}
	if maxFrequencySet {
		m.MaxFrequency = maxFrequency
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("max-frequency", prefix)))
	}
	supportsJoin, supportsJoinSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("supports-join", prefix))
	if err != nil {
		return paths, err
	}
	if supportsJoinSet {
		m.SupportsJoin = supportsJoin
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("supports-join", prefix)))
	}
	resetsJoinNonces, resetsJoinNoncesSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("resets-join-nonces", prefix))
	if err != nil {
		return paths, err
	}
	if resetsJoinNoncesSet {
		m.ResetsJoinNonces = resetsJoinNonces
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("resets-join-nonces", prefix)))
	}
	rootKeysSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("root-keys", prefix))
	if rootKeysSet {
		m.RootKeys = &RootKeys{}
		if setPaths, err := m.RootKeys.SetFromFlags(flags, flagsplugin.Prefix("root-keys", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	netId, netIdSet, err := custom_flags.GetNetID(flags, flagsplugin.Prefix("net-id", prefix))
	if err != nil {
		return paths, err
	}
	if netIdSet {
		m.NetId = &netId
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("net-id", prefix)))
	}
	macSettingsSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("mac-settings", prefix))
	if macSettingsSet {
		m.MacSettings = &MACSettings{}
		if setPaths, err := m.MacSettings.SetFromFlags(flags, flagsplugin.Prefix("mac-settings", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	macStateSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("mac-state", prefix))
	if macStateSet {
		m.MacState = &MACState{}
		if setPaths, err := m.MacState.SetFromFlags(flags, flagsplugin.Prefix("mac-state", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	pendingMacStateSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("pending-mac-state", prefix))
	if pendingMacStateSet {
		m.PendingMacState = &MACState{}
		if setPaths, err := m.PendingMacState.SetFromFlags(flags, flagsplugin.Prefix("pending-mac-state", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	// FIXME: Skipping Session because it does not seem to implement AddSetFlags.
	// FIXME: Skipping PendingSession because it does not seem to implement AddSetFlags.
	lastDevNonce, lastDevNonceSet, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("last-dev-nonce", prefix))
	if err != nil {
		return paths, err
	}
	if lastDevNonceSet {
		m.LastDevNonce = lastDevNonce
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("last-dev-nonce", prefix)))
	}
	usedDevNonces, usedDevNoncesSet, err := flagsplugin.GetUint32Slice(flags, flagsplugin.Prefix("used-dev-nonces", prefix))
	if err != nil {
		return paths, err
	}
	if usedDevNoncesSet {
		m.UsedDevNonces = usedDevNonces
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("used-dev-nonces", prefix)))
	}
	lastJoinNonce, lastJoinNonceSet, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("last-join-nonce", prefix))
	if err != nil {
		return paths, err
	}
	if lastJoinNonceSet {
		m.LastJoinNonce = lastJoinNonce
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("last-join-nonce", prefix)))
	}
	lastRjCount0, lastRjCount0Set, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("last-rj-count-0", prefix))
	if err != nil {
		return paths, err
	}
	if lastRjCount0Set {
		m.LastRjCount_0 = lastRjCount0
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("last-rj-count-0", prefix)))
	}
	lastRjCount1, lastRjCount1Set, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("last-rj-count-1", prefix))
	if err != nil {
		return paths, err
	}
	if lastRjCount1Set {
		m.LastRjCount_1 = lastRjCount1
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("last-rj-count-1", prefix)))
	}
	lastDevStatusReceivedAt, lastDevStatusReceivedAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("last-dev-status-received-at", prefix))
	if err != nil {
		return paths, err
	}
	if lastDevStatusReceivedAtSet {
		m.LastDevStatusReceivedAt = gogo.SetTimestamp(lastDevStatusReceivedAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("last-dev-status-received-at", prefix)))
	}
	powerState, powerStateSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("power-state", prefix))
	if err != nil {
		return paths, err
	}
	if powerStateSet {
		enumValue, err := flagsplugin.SetEnumString(powerState, PowerState_value)
		if err != nil {
			return paths, err
		}
		m.PowerState = PowerState(enumValue)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("power-state", prefix)))
	}
	batteryPercentage, batteryPercentageSet, err := flagsplugin.GetFloat32(flags, flagsplugin.Prefix("battery-percentage", prefix))
	if err != nil {
		return paths, err
	}
	if batteryPercentageSet {
		m.BatteryPercentage = &types.FloatValue{Value: batteryPercentage}
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("battery-percentage", prefix)))
	}
	downlinkMargin, downlinkMarginSet, err := flagsplugin.GetInt32(flags, flagsplugin.Prefix("downlink-margin", prefix))
	if err != nil {
		return paths, err
	}
	if downlinkMarginSet {
		m.DownlinkMargin = downlinkMargin
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("downlink-margin", prefix)))
	}
	// FIXME: Skipping QueuedApplicationDownlinks because it does not seem to implement AddSetFlags.
	formattersSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("formatters", prefix))
	if formattersSet {
		m.Formatters = &MessagePayloadFormatters{}
		if setPaths, err := m.Formatters.SetFromFlags(flags, flagsplugin.Prefix("formatters", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	provisionerId, provisionerIdSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("provisioner-id", prefix))
	if err != nil {
		return paths, err
	}
	if provisionerIdSet {
		m.ProvisionerId = provisionerId
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("provisioner-id", prefix)))
	}
	// FIXME: Skipping ProvisioningData because this WKT is not supported.
	multicast, multicastSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("multicast", prefix))
	if err != nil {
		return paths, err
	}
	if multicastSet {
		m.Multicast = multicast
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("multicast", prefix)))
	}
	// FIXME: Skipping ClaimAuthenticationCode because it does not seem to implement AddSetFlags.
	skipPayloadCrypto, skipPayloadCryptoSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("skip-payload-crypto", prefix))
	if err != nil {
		return paths, err
	}
	if skipPayloadCryptoSet {
		m.SkipPayloadCrypto = skipPayloadCrypto
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("skip-payload-crypto", prefix)))
	}
	skipPayloadCryptoOverride, skipPayloadCryptoOverrideSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("skip-payload-crypto-override", prefix))
	if err != nil {
		return paths, err
	}
	if skipPayloadCryptoOverrideSet {
		m.SkipPayloadCryptoOverride = &types.BoolValue{Value: skipPayloadCryptoOverride}
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("skip-payload-crypto-override", prefix)))
	}
	activatedAt, activatedAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("activated-at", prefix))
	if err != nil {
		return paths, err
	}
	if activatedAtSet {
		m.ActivatedAt = gogo.SetTimestamp(activatedAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("activated-at", prefix)))
	}
	return paths, nil
}
