// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v0.0.0-dev
// - protoc              v3.17.3
// source: lorawan-stack/api/user.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	gogo "github.com/TheThingsIndustries/protoc-gen-go-flags/gogo"
	pflag "github.com/spf13/pflag"
)

// AddSelectFlagsForUser adds flags to select fields in User.
func AddSelectFlagsForUser(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ids", prefix), true)))
	AddSelectFlagsForUserIdentifiers(flags, flagsplugin.Prefix("ids", prefix))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("created-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("created-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("updated-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("updated-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("deleted-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("deleted-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("name", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("name", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("description", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("description", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("attributes", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("attributes", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("contact-info", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("contact-info", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("primary-email-address", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("primary-email-address", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("primary-email-address-validated-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("primary-email-address-validated-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("password", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("password", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("password-updated-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("password-updated-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("require-password-update", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("require-password-update", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("state", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("state", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("state-description", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("state-description", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("admin", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("admin", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("temporary-password", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("temporary-password", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("temporary-password-created-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("temporary-password-created-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("temporary-password-expires-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("temporary-password-expires-at", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("profile-picture", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("profile-picture", prefix), true)))
	// NOTE: profile_picture (Picture) does not seem to have select flags.
}

// SelectFromFlags outputs the fieldmask paths forUser message from select flags.
func PathsFromSelectFlagsForUser(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	ids, idsSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ids", prefix))
	if err != nil {
		return paths, err
	}
	if idsSelect && ids {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("ids", prefix)))
	}
	if selectPaths, err := PathsFromSelectFlagsForUserIdentifiers(flags, flagsplugin.Prefix("ids", prefix)); err != nil {
		return paths, err
	} else {
		paths = append(paths, selectPaths...)
	}
	createdAt, createdAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("created-at", prefix))
	if err != nil {
		return paths, err
	}
	if createdAtSelect && createdAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("created-at", prefix)))
	}
	updatedAt, updatedAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("updated-at", prefix))
	if err != nil {
		return paths, err
	}
	if updatedAtSelect && updatedAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("updated-at", prefix)))
	}
	deletedAt, deletedAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("deleted-at", prefix))
	if err != nil {
		return paths, err
	}
	if deletedAtSelect && deletedAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("deleted-at", prefix)))
	}
	name, nameSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("name", prefix))
	if err != nil {
		return paths, err
	}
	if nameSelect && name {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("name", prefix)))
	}
	description, descriptionSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("description", prefix))
	if err != nil {
		return paths, err
	}
	if descriptionSelect && description {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("description", prefix)))
	}
	attributes, attributesSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("attributes", prefix))
	if err != nil {
		return paths, err
	}
	if attributesSelect && attributes {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("attributes", prefix)))
	}
	contactInfo, contactInfoSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("contact-info", prefix))
	if err != nil {
		return paths, err
	}
	if contactInfoSelect && contactInfo {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("contact-info", prefix)))
	}
	primaryEmailAddress, primaryEmailAddressSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("primary-email-address", prefix))
	if err != nil {
		return paths, err
	}
	if primaryEmailAddressSelect && primaryEmailAddress {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("primary-email-address", prefix)))
	}
	primaryEmailAddressValidatedAt, primaryEmailAddressValidatedAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("primary-email-address-validated-at", prefix))
	if err != nil {
		return paths, err
	}
	if primaryEmailAddressValidatedAtSelect && primaryEmailAddressValidatedAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("primary-email-address-validated-at", prefix)))
	}
	password, passwordSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("password", prefix))
	if err != nil {
		return paths, err
	}
	if passwordSelect && password {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("password", prefix)))
	}
	passwordUpdatedAt, passwordUpdatedAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("password-updated-at", prefix))
	if err != nil {
		return paths, err
	}
	if passwordUpdatedAtSelect && passwordUpdatedAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("password-updated-at", prefix)))
	}
	requirePasswordUpdate, requirePasswordUpdateSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("require-password-update", prefix))
	if err != nil {
		return paths, err
	}
	if requirePasswordUpdateSelect && requirePasswordUpdate {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("require-password-update", prefix)))
	}
	state, stateSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("state", prefix))
	if err != nil {
		return paths, err
	}
	if stateSelect && state {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("state", prefix)))
	}
	stateDescription, stateDescriptionSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("state-description", prefix))
	if err != nil {
		return paths, err
	}
	if stateDescriptionSelect && stateDescription {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("state-description", prefix)))
	}
	admin, adminSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("admin", prefix))
	if err != nil {
		return paths, err
	}
	if adminSelect && admin {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("admin", prefix)))
	}
	temporaryPassword, temporaryPasswordSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("temporary-password", prefix))
	if err != nil {
		return paths, err
	}
	if temporaryPasswordSelect && temporaryPassword {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("temporary-password", prefix)))
	}
	temporaryPasswordCreatedAt, temporaryPasswordCreatedAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("temporary-password-created-at", prefix))
	if err != nil {
		return paths, err
	}
	if temporaryPasswordCreatedAtSelect && temporaryPasswordCreatedAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("temporary-password-created-at", prefix)))
	}
	temporaryPasswordExpiresAt, temporaryPasswordExpiresAtSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("temporary-password-expires-at", prefix))
	if err != nil {
		return paths, err
	}
	if temporaryPasswordExpiresAtSelect && temporaryPasswordExpiresAt {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("temporary-password-expires-at", prefix)))
	}
	profilePicture, profilePictureSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("profile-picture", prefix))
	if err != nil {
		return paths, err
	}
	if profilePictureSelect && profilePicture {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("profile-picture", prefix)))
	}
	// NOTE: profile_picture (Picture) does not seem to have select flags.
	return paths, nil
}

// AddSetFlagsForUser adds flags to select fields in User.
func AddSetFlagsForUser(flags *pflag.FlagSet, prefix string) {
	AddSetFlagsForUserIdentifiers(flags, flagsplugin.Prefix("ids", prefix))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("created-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("updated-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("deleted-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("name", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("description", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringStringMapFlag(flagsplugin.Prefix("attributes", prefix), ""))
	// FIXME: Skipping ContactInfo because repeated messages are currently not supported.
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("primary-email-address", prefix), ""))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("primary-email-address-validated-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("password", prefix), ""))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("password-updated-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("require-password-update", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("state", prefix), flagsplugin.EnumValueDesc(State_value)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("state-description", prefix), ""))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("admin", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("temporary-password", prefix), ""))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("temporary-password-created-at", prefix), ""))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("temporary-password-expires-at", prefix), ""))
	// FIXME: Skipping ProfilePicture because it does not seem to implement AddSetFlags.
}

// SetFromFlags sets the User message from flags.
func (m *User) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	idsSet := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ids", prefix))
	if idsSet {
		m.Ids = &UserIdentifiers{}
		if setPaths, err := m.Ids.SetFromFlags(flags, flagsplugin.Prefix("ids", prefix)); err != nil {
			return paths, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	createdAt, createdAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("created-at", prefix))
	if err != nil {
		return paths, err
	}
	if createdAtSet {
		m.CreatedAt = gogo.SetTimestamp(createdAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("created-at", prefix)))
	}
	updatedAt, updatedAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("updated-at", prefix))
	if err != nil {
		return paths, err
	}
	if updatedAtSet {
		m.UpdatedAt = gogo.SetTimestamp(updatedAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("updated-at", prefix)))
	}
	deletedAt, deletedAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("deleted-at", prefix))
	if err != nil {
		return paths, err
	}
	if deletedAtSet {
		m.DeletedAt = gogo.SetTimestamp(deletedAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("deleted-at", prefix)))
	}
	name, nameSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("name", prefix))
	if err != nil {
		return paths, err
	}
	if nameSet {
		m.Name = name
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("name", prefix)))
	}
	description, descriptionSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("description", prefix))
	if err != nil {
		return paths, err
	}
	if descriptionSet {
		m.Description = description
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("description", prefix)))
	}
	attributes, attributesSet, err := flagsplugin.GetStringStringMap(flags, flagsplugin.Prefix("attributes", prefix))
	if err != nil {
		return paths, err
	}
	if attributesSet {
		m.Attributes = attributes
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("attributes", prefix)))
	}
	// FIXME: Skipping ContactInfo because it does not seem to implement AddSetFlags.
	primaryEmailAddress, primaryEmailAddressSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("primary-email-address", prefix))
	if err != nil {
		return paths, err
	}
	if primaryEmailAddressSet {
		m.PrimaryEmailAddress = primaryEmailAddress
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("primary-email-address", prefix)))
	}
	primaryEmailAddressValidatedAt, primaryEmailAddressValidatedAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("primary-email-address-validated-at", prefix))
	if err != nil {
		return paths, err
	}
	if primaryEmailAddressValidatedAtSet {
		m.PrimaryEmailAddressValidatedAt = gogo.SetTimestamp(primaryEmailAddressValidatedAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("primary-email-address-validated-at", prefix)))
	}
	password, passwordSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("password", prefix))
	if err != nil {
		return paths, err
	}
	if passwordSet {
		m.Password = password
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("password", prefix)))
	}
	passwordUpdatedAt, passwordUpdatedAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("password-updated-at", prefix))
	if err != nil {
		return paths, err
	}
	if passwordUpdatedAtSet {
		m.PasswordUpdatedAt = gogo.SetTimestamp(passwordUpdatedAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("password-updated-at", prefix)))
	}
	requirePasswordUpdate, requirePasswordUpdateSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("require-password-update", prefix))
	if err != nil {
		return paths, err
	}
	if requirePasswordUpdateSet {
		m.RequirePasswordUpdate = requirePasswordUpdate
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("require-password-update", prefix)))
	}
	state, stateSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("state", prefix))
	if err != nil {
		return paths, err
	}
	if stateSet {
		enumValue, err := flagsplugin.SetEnumString(state, State_value)
		if err != nil {
			return paths, err
		}
		m.State = State(enumValue)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("state", prefix)))
	}
	stateDescription, stateDescriptionSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("state-description", prefix))
	if err != nil {
		return paths, err
	}
	if stateDescriptionSet {
		m.StateDescription = stateDescription
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("state-description", prefix)))
	}
	admin, adminSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("admin", prefix))
	if err != nil {
		return paths, err
	}
	if adminSet {
		m.Admin = admin
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("admin", prefix)))
	}
	temporaryPassword, temporaryPasswordSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("temporary-password", prefix))
	if err != nil {
		return paths, err
	}
	if temporaryPasswordSet {
		m.TemporaryPassword = temporaryPassword
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("temporary-password", prefix)))
	}
	temporaryPasswordCreatedAt, temporaryPasswordCreatedAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("temporary-password-created-at", prefix))
	if err != nil {
		return paths, err
	}
	if temporaryPasswordCreatedAtSet {
		m.TemporaryPasswordCreatedAt = gogo.SetTimestamp(temporaryPasswordCreatedAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("temporary-password-created-at", prefix)))
	}
	temporaryPasswordExpiresAt, temporaryPasswordExpiresAtSet, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("temporary-password-expires-at", prefix))
	if err != nil {
		return paths, err
	}
	if temporaryPasswordExpiresAtSet {
		m.TemporaryPasswordExpiresAt = gogo.SetTimestamp(temporaryPasswordExpiresAt)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("temporary-password-expires-at", prefix)))
	}
	// FIXME: Skipping ProfilePicture because it does not seem to implement AddSetFlags.
	return paths, nil
}

// AddSelectFlagsForListUsersRequest adds flags to select fields in ListUsersRequest.
func AddSelectFlagsForListUsersRequest(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("field-mask", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("field-mask", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("order", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("order", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("limit", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("limit", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("page", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("page", prefix), false)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("deleted", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("deleted", prefix), false)))
}

// SelectFromFlags outputs the fieldmask paths forListUsersRequest message from select flags.
func PathsFromSelectFlagsForListUsersRequest(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	fieldMask, fieldMaskSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("field-mask", prefix))
	if err != nil {
		return paths, err
	}
	if fieldMaskSelect && fieldMask {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("field-mask", prefix)))
	}
	order, orderSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("order", prefix))
	if err != nil {
		return paths, err
	}
	if orderSelect && order {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("order", prefix)))
	}
	limit, limitSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("limit", prefix))
	if err != nil {
		return paths, err
	}
	if limitSelect && limit {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("limit", prefix)))
	}
	page, pageSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("page", prefix))
	if err != nil {
		return paths, err
	}
	if pageSelect && page {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("page", prefix)))
	}
	deleted, deletedSelect, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("deleted", prefix))
	if err != nil {
		return paths, err
	}
	if deletedSelect && deleted {
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("deleted", prefix)))
	}
	return paths, nil
}

// AddSetFlagsForListUsersRequest adds flags to select fields in ListUsersRequest.
func AddSetFlagsForListUsersRequest(flags *pflag.FlagSet, prefix string) {
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("field-mask", prefix), ""))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("order", prefix), ""))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("limit", prefix), ""))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("page", prefix), ""))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("deleted", prefix), ""))
}

// SetFromFlags sets the ListUsersRequest message from flags.
func (m *ListUsersRequest) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	fieldMask, fieldMaskSet, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("field-mask", prefix))
	if err != nil {
		return paths, err
	}
	if fieldMaskSet {
		m.FieldMask = gogo.SetFieldMask(fieldMask)
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("field-mask", prefix)))
	}
	order, orderSet, err := flagsplugin.GetString(flags, flagsplugin.Prefix("order", prefix))
	if err != nil {
		return paths, err
	}
	if orderSet {
		m.Order = order
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("order", prefix)))
	}
	limit, limitSet, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("limit", prefix))
	if err != nil {
		return paths, err
	}
	if limitSet {
		m.Limit = limit
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("limit", prefix)))
	}
	page, pageSet, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("page", prefix))
	if err != nil {
		return paths, err
	}
	if pageSet {
		m.Page = page
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("page", prefix)))
	}
	deleted, deletedSet, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("deleted", prefix))
	if err != nil {
		return paths, err
	}
	if deletedSet {
		m.Deleted = deleted
		paths = append(paths, flagsplugin.FieldMaskFlag(flagsplugin.Prefix("deleted", prefix)))
	}
	return paths, nil
}
