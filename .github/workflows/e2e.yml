name: End-to-end Tests
concurrency: 
  group: e2e-${{ github.ref }}
  cancel-in-progress: true
on:
  pull_request:
    paths:
      - '*.go'
      - 'go.mod'
      - 'go.sum'
      - 'pkg/**'
      - 'tools/**'
      - 'config/**'
      - '!config/stack/ttn-lw-stack.yml'
      - 'package.json'
      - 'pkg/webui/**'
      - 'sdk/js/**'
      - 'yarn.lock'
      - 'cypress/**'
      - 'docker-compose.yml'
      - '.github/workflows/e2e.yml'
env:
  TTN_LW_LOG_LEVEL: debug
  CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
  CYPRESS_FAIL_FAST: true
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
jobs:
  determine-if-required:
    name: Determine if run is required
    runs-on: ubuntu-20.04
    outputs:
      needs-to-run: ${{ steps.check-result.outputs.passed != 'true' }}
      hash: ${{ steps.get-hash.outputs.hash }}
      yarn-cache-dir-path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: false
      - name: Get hash of code files
        id: get-hash
        run: echo "::set-output name=hash::${{ hashFiles('*.go', 'go.mod', 'go.sum', 'pkg/**', 'tools/**', 'config/**', 'package.json', 'pkg/webui/**', 'sdk/js/**', 'yarn.lock', 'cypress/**', 'docker-compose.yml') }}"
      - name: Get the cached result
        id: run-cache
        uses: actions/cache@v2
        with:
          path: .cache/passed
          key: run-cache-${{ steps.get-hash.outputs.hash }}-${{ github.run_id }}
          restore-keys: |
            run-cache-${{ steps.get-hash.outputs.hash }}
      - name: Check cached result connected to the hashed files (if any)
        id: check-result
        continue-on-error: true
        run: test -f .cache/passed && echo "::set-output name=passed::$(cat .cache/passed)"
      - name: Get Yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(npx yarn cache dir)"
  preparation:
    name: Run preparations
    runs-on: ubuntu-20.04
    needs: determine-if-required
    if: needs.determine-if-required.outputs.needs-to-run == 'true'
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true
      - name: Initialize Yarn module cache
        id: yarn-cache
        uses: actions/cache@v2
        with:
          path: ${{ needs.determine-if-required.outputs.yarn-cache-dir-path }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Initialize SQL dump cache
        id: db-cache
        uses: actions/cache@v2
        with:
          path: |
            .cache/sqldump.sql
            .env/admin_api_key.txt
          key: db-cache-${{ hashFiles('pkg/identityserver/store/**/*.go', 'cmd/ttn-lw-stack/commands/is-db.go') }}
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '~1.17'
      - name: Initialize Go module cache
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Download Go tool dependencies
        run: |
          cd tools
          go mod download
      - name: Initialize tool binary cache
        id: tools-cache
        uses: actions/cache@v2
        with:
          path: tools/bin
          key: ${{ runner.os }}-tools-${{ hashFiles('tools/**') }}
      - name: Make Mage
        run: make tools/bin/mage
        if: steps.tools-cache.outputs.cache-hit != 'true'
      - name: Initialize device repository index cache
        id: dr-index-cache
        uses: actions/cache@v2
        with:
          path: data/lorawan-devices-index
          key: dr-index-cache-${{ hashFiles('data/lorawan-devices') }}
      - name: Create device repository index
        run: tools/bin/mage dev:initDeviceRepo
        if: steps.dr-index-cache.outputs.cache-hit != 'true'
      - name: Run test preparations
        if: steps.db-cache.outputs.cache-hit != 'true'
        run: tools/bin/mage -v dev:dbStop dev:dbErase dev:dbStart dev:initStack dev:sqlDump
      - name: Initialize public folder cache
        id: public-cache
        uses: actions/cache@v2
        with:
          path: public
          key: public-cache-${{ hashFiles('pkg/webui/**', 'sdk/js/**/*.js', 'sdk/js/generated/*.json', 'config/webpack.config.babel.js', 'yarn.lock', 'sdk/js/yarn.lock')}}
      - name: Initialize dll cache
        id: dll-cache
        uses: actions/cache@v2
        with:
          path: |
            public/libs.*.bundle.js
            .cache/dll.json
          key: dll-cache-${{ hashFiles('yarn.lock') }}
      - name: Initialize babel cache
        id: babel-cache
        uses: actions/cache@v2
        if: steps.public-cache.outputs.cache-hit != 'true'
        with:
          path: .cache/babel
          key: ${{ runner.os }}-babel-cache-${{ hashFiles('config/babel.config.json', 'config/webpack.config.babel.js') }}
          restore-keys: |
            ${{ runner.os }}-babel-cache-
      - name: Build DLLs
        if: steps.dll-cache.outputs.cache-hit != 'true'
        run: tools/bin/mage js:buildDll
      - name: Build frontend
        if: steps.public-cache.outputs.cache-hit != 'true'
        run: tools/bin/mage js:build
      - name: Initialize build cache
        id: build-cache
        uses: actions/cache@v2
        with:
          path: ttn-lw-stack
          key: build-cache-${{ hashFiles('go.mod', 'go.sum', 'pkg/**',  'config/**', 'cmd/**') }}
      - name: Build TTS
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: go build ./cmd/ttn-lw-stack
      - name: Zip build artifacts
        run: zip -r build.zip .cache/sqldump.sql .env/admin_api_key.txt data/lorawan-devices-index public ttn-lw-stack tools/bin/mage
      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-files
          path: build.zip
  end-to-end:
    name: Main frontend end-to-end tests (Chrome)
    runs-on: ubuntu-20.04
    env:
      NODE_ENV: development
      CYPRESS_MACHINE_NUMBER: ${{ matrix.machines }}
    strategy:
      matrix:
        machines: [1, 2, 3, 4]
    needs: [determine-if-required, preparation]
    if: needs.determine-if-required.outputs.needs-to-run == 'true'
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true
      - uses: actions/download-artifact@v2
        name: Download build artifacts
        with:
          name: 'build-files'
      - name: Download last failed spec
        uses: dawidd6/action-download-artifact@v2
        continue-on-error: true
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: e2e.yml
          branch: ${{ github.head_ref }}
          workflow_conclusion: completed
          name: cypress-failed-test-spec
          search_artifacts: true
      - name: Read failed spec file
        id: get-failed-spec
        continue-on-error: true
        run: |
          echo "::set-output name=failed-test::$(paste -d , .failed-specs-*.txt)"
          echo "::set-output name=neg-failed-test::!$(paste -d ',!' .failed-specs-*.txt)"
      - name: Unzip build artifacts
        run: unzip -o build.zip
      - name: Initialize Yarn module cache
        id: yarn-cache
        uses: actions/cache@v2
        with:
          path: ${{ needs.determine-if-required.outputs.yarn-cache-dir-path }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Generate certs
        run: tools/bin/mage dev:certificates
      - name: Restore initialized sql db
        run: tools/bin/mage dev:dbStart dev:sqlRestore dev:sqlCreateSeedDb
      - name: Run stack
        run: tools/bin/mage dev:startDevStack &
      - name: Run previously failed test first
        uses: cypress-io/github-action@v2
        if: steps.get-failed-spec.outputs.failed-test != ''
        with:
          config-file: config/cypress.json
          config: baseUrl=https://localhost:8885
          record: true
          parallel: true
          browser: chrome
          group: previously-failed-${{ needs.determine-if-required.outputs.hash }}
          spec: ${{ steps.get-failed-spec.outputs.failed-test }}
      - name: Run frontend end-to-end tests
        uses: cypress-io/github-action@v2
        with:
          config-file: config/cypress.json
          config: baseUrl=https://localhost:8885
          record: true
          parallel: true
          browser: chrome
          group: main-${{ needs.determine-if-required.outputs.hash }}
          spec: |
            **/*
            !cypress/integration/smoke/smoke.spec.js
            ${{ steps.get-failed-spec.outputs.neg-failed-test }}
      - name: Upload logs
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: logs
          path: .cache/devStack.log
      - name: Upload screenshots for failed tests
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
      - name: Upload name of failing test
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cypress-failed-test-spec
          path: .cache/.failed-specs-*.txt
  cross-browser-smoke:
    name: Cross-browser smoke tests (Firefox 78 ESR)
    runs-on: ubuntu-20.04
    env:
      NODE_ENV: development
    needs: [determine-if-required, preparation]
    if: needs.determine-if-required.outputs.needs-to-run == 'true'
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true
      - uses: actions/download-artifact@v2
        name: Download build artifacts
        with:
          name: 'build-files'
      - name: Unzip build artifacts
        run: unzip -o build.zip
      - name: Initialize Yarn module cache
        id: yarn-cache
        uses: actions/cache@v2
        with:
          path: ${{ needs.determine-if-required.outputs.yarn-cache-dir-path }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install FF 78 ESR
        run: |
          wget --no-verbose -O /tmp/firefox.tar.bz2 https://download-installer.cdn.mozilla.net/pub/firefox/releases/78.13.0esr/linux-x86_64/en-US/firefox-78.13.0esr.tar.bz2
          tar -C /opt -xjf /tmp/firefox.tar.bz2
          rm /tmp/firefox.tar.bz2
          sudo ln -fs /opt/firefox/firefox /usr/bin/firefox
      - name: Generate certs
        run: tools/bin/mage dev:certificates
      - name: Restore initialized sql db
        run: tools/bin/mage dev:dbStart dev:SQLRestore dev:SQLCreateSeedDB
      - name: Run stack
        run: tools/bin/mage dev:startDevStack &
      - name: Run end-to-end smoke tests (Firefox)
        uses: cypress-io/github-action@v2
        with:
          config-file: config/cypress.json
          config: baseUrl=https://localhost:8885
          browser: firefox
          record: true
          spec: cypress/integration/smoke/smoke.spec.js
      - name: Upload logs
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: logs
          path: .cache/devStack.log
      - name: Upload screenshots for failed tests
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
  cache-result:
    name: Write result cache
    runs-on: ubuntu-20.04
    needs: [preparation, end-to-end, cross-browser-smoke, determine-if-required]
    steps:
      - name: Setup result cache to skip redundant runs
        id: run-cache
        uses: actions/cache@v2
        with:
          path: .cache/passed
          key: run-cache-${{ needs.determine-if-required.outputs.hash }}
      - name: Create result file for caching
        run: mkdir -p .cache && echo true > .cache/passed
